/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConfigurationPanel.java
 *
 * Created on 01.02.2010, 22:33:44
 */

package de.malban.config;

import com.javamex.classmexer.MemoryUtil;
import static com.javamex.classmexer.MemoryUtil.VisibilityFilter.ALL;
import de.malban.gui.CSAMainFrame;
import de.malban.gui.ImageCache;
import de.malban.gui.Windowable;
import de.malban.gui.components.CSAView;
import de.malban.gui.ImageCacheWatchFrame;
import de.malban.gui.TimingTriggerer;
import de.malban.gui.TriggerCallback;
import de.malban.sound.PlayClip;
import de.malban.vide.vecx.VecX;
import de.malban.vide.vecx.VecXPanel;
import de.malban.vide.vecx.VecXState;
import java.awt.DisplayMode;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.lang.instrument.Instrumentation;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.table.AbstractTableModel;
/**
 *
 * @author Malban
 */
public class ConfigurationPanel extends javax.swing.JPanel implements Windowable{

    private boolean USE_CLASSMEX = false;
    private int mClassSetting=0;

    private CSAView mParent = null;
    private javax.swing.JMenuItem mParentMenuItem = null;

    @Override
    public void closing()
    {
        if (USE_CLASSMEX)
        {
            deinitObjects();
            deinitUpdater();
        }
    }
    
    @Override
    public void setParentWindow(CSAView jpv)
    {
        mParent = jpv;
    }
    @Override
    public void setMenuItem(javax.swing.JMenuItem item)
    {
        mParentMenuItem = item;
        mParentMenuItem.setText("Application configuration");
    }
    @Override
    public javax.swing.JMenuItem getMenuItem()
    {
        return mParentMenuItem;
    }
    @Override
    public javax.swing.JPanel getPanel()
    {
        return this;
    }
    @Override public boolean isIcon()
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return false;
        return frame.getInternalFrame(this).isIcon();
    }
    @Override public void setIcon(boolean b)
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return;
        try
        {
            frame.getInternalFrame(this).setIcon(b);
        }
        catch (Throwable e){}
    }

    /** Creates new form ConfigurationPanel */
    public ConfigurationPanel()
    {
        initComponents();
        setAllFromCurrent();
        jScrollPane1.setVisible(USE_CLASSMEX);
        if (USE_CLASSMEX)
        {
            initTable();
            initUpdater();
        }
    }

    private void setAllFromCurrent() /* allneeded*/
    {
        mClassSetting++;
        Configuration C = Configuration.getConfiguration();
        jCheckBoxDisableFileLogging.setSelected(C.isFileLoggingDisabled());

        jCheckBoxDebugOff.setSelected(C.isDebugOff());
        jTextFieldDebugLevel.setText(""+C.getDebugLevel());
        jTextFieldFiles.setText(""+C.getDebugFiles());
        jTextFieldClasses.setText(""+C.getDebugClasses());
        jTextFieldMethods.setText(""+C.getDebugMethods());
        jCheckBoxDebugTiming.setSelected(C.isDebugTiming());
        jCheckBoxDebugFileOnly.setSelected(C.isDebugFileOnly());

        jTextFieldImageCache.setText("");
        ImageCache.cacheActive = C.getCacheActive();
        jCheckBoxCacheActive.setSelected(ImageCache.cacheActive);
        mClassSetting--;
    }

    private void readAllToCurrent() /* allneeded*/
    {
        Configuration C = Configuration.getConfiguration();
        Integer I=100;
        try
        {
            C.setDebugLevel(Integer.parseInt(jTextFieldDebugLevel.getText()));
        }
        catch (Throwable e) {}

        C.setDebugFiles(jTextFieldFiles.getText());
        C.setDebugClasses(jTextFieldClasses.getText());
        C.setDebugMethods(jTextFieldMethods.getText());
        C.setDebugTiming(jCheckBoxDebugTiming.isSelected());
        C.setDebugOff(jCheckBoxDebugOff.isSelected());
        C.setDebugFileOnly(jCheckBoxDebugFileOnly.isSelected());
        C.setFileLoggingDisabled(jCheckBoxDisableFileLogging.isSelected());
        


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldDebugLevel = new javax.swing.JTextField();
        jCheckBoxDebugWindow = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jCheckBoxDebugTiming = new javax.swing.JCheckBox();
        jTextFieldFiles = new javax.swing.JTextField();
        jTextFieldClasses = new javax.swing.JTextField();
        jTextFieldMethods = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jCheckBoxDebugOff = new javax.swing.JCheckBox();
        jCheckBoxDebugFileOnly = new javax.swing.JCheckBox();
        jButton5 = new javax.swing.JButton();
        jCheckBoxDisableFileLogging = new javax.swing.JCheckBox();
        jCheckBoxInfoInPanel = new javax.swing.JCheckBox();
        jCheckBoxAutoSave = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jCheckBoxScriptCache = new javax.swing.JCheckBox();
        jTextFieldScriptCache = new javax.swing.JTextField();
        jButtonScriptCache = new javax.swing.JButton();
        jButtonImageCache = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldImageCache = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldFXCache1 = new javax.swing.JTextField();
        jButtonFXCache = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jButtonHintsCache = new javax.swing.JButton();
        jTextFieldHintsCache = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jButtonCacheWatch = new javax.swing.JButton();
        jCheckBoxCacheActive = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonSave = new javax.swing.JButton();

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Debug"));
        jPanel5.setName("jPanel5"); // NOI18N

        jLabel8.setText("Debug level");
        jLabel8.setName("jLabel8"); // NOI18N

        jTextFieldDebugLevel.setToolTipText("0 - only errors\n1 - errors and warning\n2 - error and warning and info\n3 - error and warning and info an verbose\n");
        jTextFieldDebugLevel.setName("jTextFieldDebugLevel"); // NOI18N

        jCheckBoxDebugWindow.setText("Debug Window in Frame");
        jCheckBoxDebugWindow.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxDebugWindow.setName("jCheckBoxDebugWindow"); // NOI18N

        jButton2.setText("Clear Debug log");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBoxDebugTiming.setText("Add Timing Info");
        jCheckBoxDebugTiming.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxDebugTiming.setName("jCheckBoxDebugTiming"); // NOI18N

        jTextFieldFiles.setName("jTextFieldFiles"); // NOI18N

        jTextFieldClasses.setName("jTextFieldClasses"); // NOI18N

        jTextFieldMethods.setName("jTextFieldMethods"); // NOI18N

        jLabel10.setText("Only Files");
        jLabel10.setName("jLabel10"); // NOI18N

        jLabel11.setText("Only Classes");
        jLabel11.setName("jLabel11"); // NOI18N

        jLabel12.setText("Only Methods");
        jLabel12.setName("jLabel12"); // NOI18N

        jCheckBoxDebugOff.setText("Debug Off");
        jCheckBoxDebugOff.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxDebugOff.setName("jCheckBoxDebugOff"); // NOI18N

        jCheckBoxDebugFileOnly.setText("Debug in File only");
        jCheckBoxDebugFileOnly.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxDebugFileOnly.setName("jCheckBoxDebugFileOnly"); // NOI18N

        jButton5.setText("Clear log");
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jCheckBoxDisableFileLogging.setText("Disable file logging");
        jCheckBoxDisableFileLogging.setToolTipText("No logging to disk, neither debug nor log.");
        jCheckBoxDisableFileLogging.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxDisableFileLogging.setName("jCheckBoxDisableFileLogging"); // NOI18N

        jCheckBoxInfoInPanel.setText("Show Debug/Log in game info panel");
        jCheckBoxInfoInPanel.setToolTipText("No logging to disk, neither debug nor log.");
        jCheckBoxInfoInPanel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxInfoInPanel.setName("jCheckBoxInfoInPanel"); // NOI18N

        jCheckBoxAutoSave.setText("Auto save");
        jCheckBoxAutoSave.setToolTipText("");
        jCheckBoxAutoSave.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxAutoSave.setName("jCheckBoxAutoSave"); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jTextFieldDebugLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxDebugOff)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxDebugFileOnly))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jCheckBoxDebugTiming, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jCheckBoxDebugWindow, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jTextFieldClasses, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jTextFieldMethods, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jTextFieldFiles, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jCheckBoxDisableFileLogging, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jCheckBoxInfoInPanel, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jCheckBoxAutoSave, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addContainerGap(500, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDebugLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jCheckBoxDebugOff)
                    .addComponent(jCheckBoxDebugFileOnly))
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMethods, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxDebugTiming)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxDebugWindow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxDisableFileLogging)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxInfoInPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxAutoSave)
                .addContainerGap(295, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Debug", jPanel5);

        jPanel6.setName("jPanel6"); // NOI18N

        jCheckBoxScriptCache.setText("Use script cache");
        jCheckBoxScriptCache.setToolTipText("<html>\nIf script cache is switched on, game will be a bit faster overall.<BR>\nIf you script new cards or AI, you may have to reset the cache manually<BR>\nfor the new scripts to be active.\n</html>"); // NOI18N
        jCheckBoxScriptCache.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxScriptCache.setName("jCheckBoxScriptCache"); // NOI18N
        jCheckBoxScriptCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxScriptCacheActionPerformed(evt);
            }
        });

        jTextFieldScriptCache.setEnabled(false);
        jTextFieldScriptCache.setName("jTextFieldScriptCache"); // NOI18N

        jButtonScriptCache.setText("Reset Cache");
        jButtonScriptCache.setName("jButtonScriptCache"); // NOI18N
        jButtonScriptCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScriptCacheActionPerformed(evt);
            }
        });

        jButtonImageCache.setText("Reset Cache");
        jButtonImageCache.setName("jButtonImageCache"); // NOI18N
        jButtonImageCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImageCacheActionPerformed(evt);
            }
        });

        jLabel5.setText("Images in Cache");
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel9.setText("Scripts in Cache");
        jLabel9.setName("jLabel9"); // NOI18N

        jTextFieldImageCache.setEnabled(false);
        jTextFieldImageCache.setName("jTextFieldImageCache"); // NOI18N

        jLabel17.setText("FX in Cache");
        jLabel17.setName("jLabel17"); // NOI18N

        jTextFieldFXCache1.setEnabled(false);
        jTextFieldFXCache1.setName("jTextFieldFXCache1"); // NOI18N

        jButtonFXCache.setText("Reset Cache");
        jButtonFXCache.setName("jButtonFXCache"); // NOI18N
        jButtonFXCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFXCacheActionPerformed(evt);
            }
        });

        jLabel18.setText("Only caching for clips!");
        jLabel18.setName("jLabel18"); // NOI18N

        jButtonHintsCache.setText("Reset Cache");
        jButtonHintsCache.setName("jButtonHintsCache"); // NOI18N
        jButtonHintsCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHintsCacheActionPerformed(evt);
            }
        });

        jTextFieldHintsCache.setEnabled(false);
        jTextFieldHintsCache.setName("jTextFieldHintsCache"); // NOI18N

        jLabel31.setText("Hints in Cache");
        jLabel31.setName("jLabel31"); // NOI18N

        jButtonCacheWatch.setText("Cache Watch");
        jButtonCacheWatch.setName("jButtonCacheWatch"); // NOI18N
        jButtonCacheWatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCacheWatchActionPerformed(evt);
            }
        });

        jCheckBoxCacheActive.setText("cache active");
        jCheckBoxCacheActive.setName("jCheckBoxCacheActive"); // NOI18N
        jCheckBoxCacheActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCacheActiveActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldHintsCache, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldScriptCache, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jTextFieldFXCache1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldImageCache, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonHintsCache)
                            .addComponent(jButtonScriptCache)
                            .addComponent(jButtonFXCache)
                            .addComponent(jButtonImageCache))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jCheckBoxScriptCache)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jButtonCacheWatch)
                                .addGap(37, 37, 37)
                                .addComponent(jCheckBoxCacheActive))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(327, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButtonImageCache)
                    .addComponent(jTextFieldImageCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCacheWatch)
                    .addComponent(jCheckBoxCacheActive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jButtonFXCache)
                    .addComponent(jLabel18)
                    .addComponent(jTextFieldFXCache1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldScriptCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jButtonScriptCache)
                    .addComponent(jCheckBoxScriptCache))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jButtonHintsCache)
                    .addComponent(jTextFieldHintsCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cache & Co", jPanel6);

        jButtonSave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonSave.setText("Save Configuration");
        jButtonSave.setName("jButtonSave"); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSave)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed

        readAllToCurrent();
        Configuration.getConfiguration().save();
        setAllFromCurrent();

}//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonCacheWatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCacheWatchActionPerformed

        if (imageCacheWatchFrame==null)
        imageCacheWatchFrame = new ImageCacheWatchFrame();
        imageCacheWatchFrame.setVisible(true);
    }//GEN-LAST:event_jButtonCacheWatchActionPerformed

    private void jButtonHintsCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHintsCacheActionPerformed

    }//GEN-LAST:event_jButtonHintsCacheActionPerformed

    private void jButtonFXCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFXCacheActionPerformed
        PlayClip.resetCache();
        jTextFieldFXCache1.setText(""+PlayClip.mClipMap.size());
    }//GEN-LAST:event_jButtonFXCacheActionPerformed

    private void jButtonImageCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImageCacheActionPerformed
        jTextFieldImageCache.setText(""+0);
    }//GEN-LAST:event_jButtonImageCacheActionPerformed

    private void jButtonScriptCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScriptCacheActionPerformed
        Configuration C = Configuration.getConfiguration();
        jTextFieldScriptCache.setText("0");
    }//GEN-LAST:event_jButtonScriptCacheActionPerformed

    private void jCheckBoxScriptCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxScriptCacheActionPerformed
        Configuration C = Configuration.getConfiguration();
    }//GEN-LAST:event_jCheckBoxScriptCacheActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Configuration C = Configuration.getConfiguration();
        C.clearLog();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Configuration C = Configuration.getConfiguration();
        C.clearDebugLog();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBoxCacheActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCacheActiveActionPerformed
        ImageCache.cacheActive = jCheckBoxCacheActive.isSelected();
        ImageCache.clearCache();
        Configuration C = Configuration.getConfiguration();
        C.setCacheActive(ImageCache.cacheActive);
    }//GEN-LAST:event_jCheckBoxCacheActiveActionPerformed

    ImageCacheWatchFrame imageCacheWatchFrame=null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButtonCacheWatch;
    private javax.swing.JButton jButtonFXCache;
    private javax.swing.JButton jButtonHintsCache;
    private javax.swing.JButton jButtonImageCache;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonScriptCache;
    private javax.swing.JCheckBox jCheckBoxAutoSave;
    private javax.swing.JCheckBox jCheckBoxCacheActive;
    private javax.swing.JCheckBox jCheckBoxDebugFileOnly;
    private javax.swing.JCheckBox jCheckBoxDebugOff;
    private javax.swing.JCheckBox jCheckBoxDebugTiming;
    private javax.swing.JCheckBox jCheckBoxDebugWindow;
    private javax.swing.JCheckBox jCheckBoxDisableFileLogging;
    private javax.swing.JCheckBox jCheckBoxInfoInPanel;
    private javax.swing.JCheckBox jCheckBoxScriptCache;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldClasses;
    private javax.swing.JTextField jTextFieldDebugLevel;
    private javax.swing.JTextField jTextFieldFXCache1;
    private javax.swing.JTextField jTextFieldFiles;
    private javax.swing.JTextField jTextFieldHintsCache;
    private javax.swing.JTextField jTextFieldImageCache;
    private javax.swing.JTextField jTextFieldMethods;
    private javax.swing.JTextField jTextFieldScriptCache;
    // End of variables declaration//GEN-END:variables


    public static DisplayMode getDisplayModeForString(String s)
    {
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] devices = env.getScreenDevices();
        DisplayMode[] modes = devices[0].getDisplayModes();

        for (int i = 0; i < modes.length; i++)
        {
            DisplayMode displayMode = modes[i];
            String m = "";
            m+= displayMode.getWidth()+"x";
            m+= displayMode.getHeight()+" ";
            m+= displayMode.getBitDepth()+"bit ";
            m+= displayMode.getRefreshRate()+"Hz";
            if (s.equals(m)) return displayMode;
        }

        // default to something senseable, taken first mode with res of 1024width
        for (int i = 0; i < modes.length; i++)
        {
            DisplayMode displayMode = modes[i];
            String m = "";
            m+= displayMode.getWidth()+"x";
            m+= displayMode.getHeight()+" ";
            m+= displayMode.getBitDepth()+"bit ";
            m+= displayMode.getRefreshRate()+"Hz";
            if ((displayMode.getWidth()==1024) && (displayMode.getBitDepth() == 32))
            {
                return displayMode;
            }
        }
        // default to something senseable, taken first mode with res of 1024width
        for (int i = 0; i < modes.length; i++)
        {
            DisplayMode displayMode = modes[i];
            String m = "";
            m+= displayMode.getWidth()+"x";
            m+= displayMode.getHeight()+" ";
            m+= displayMode.getBitDepth()+"bit ";
            m+= displayMode.getRefreshRate()+"Hz";
            if ((displayMode.getWidth()==1024) && (displayMode.getBitDepth() == 16))
            {
                return displayMode;
            }
        }
        // default to something senseable, taken first mode with res of 1024width
        for (int i = 0; i < modes.length; i++)
        {
            DisplayMode displayMode = modes[i];
            String m = "";
            m+= displayMode.getWidth()+"x";
            m+= displayMode.getHeight()+" ";
            m+= displayMode.getBitDepth()+"bit ";
            m+= displayMode.getRefreshRate()+"Hz";
            if ((displayMode.getWidth()==1024) && (displayMode.getBitDepth() == 8))
            {
                return displayMode;
            }
        }
        return null;
    }

    String buildStringForMode(DisplayMode displayMode)
    {
        String m = "";
        if (displayMode == null) return m;
        m+= displayMode.getWidth()+"x";
        m+= displayMode.getHeight()+" ";
        m+= displayMode.getBitDepth()+"bit ";
        m+= displayMode.getRefreshRate()+"Hz";
        return m;
    }
    
    private void correctScreenModeIfNeccessary()
    {
        Configuration C = Configuration.getConfiguration();
        C.setFullScrrenResString(buildStringForMode(getDisplayModeForString(C.getFullScrrenResString())));
    }
    public void deIconified()  {}
    
    class SizeableObject
    {
        String name="";
        long size = 0;
        Object o = null;
    }

    ArrayList<SizeableObject> sobjects = new ArrayList<SizeableObject>();
    void initTable()
    {
        SizeableObjectTableModel model = new SizeableObjectTableModel();
        jTable1.setModel(model);
        
        initObjects();
    }

    public static int POLL_RESOLUTION = 1000; // each 1000 milliseconds -> 1 times per second
    private static int pollResultion = POLL_RESOLUTION;
    static TimingTriggerer timer;
    boolean doTimer = false;
    TriggerCallback triggerCallback = new TriggerCallback()
    {
        public void doIt(int state, Object o)
        {
            if (doTimer)
            {
                updateTableValues();
                timer.addTrigger(triggerCallback, pollResultion, 0, null);
            }
        }
    };
    void initUpdater()
    {
        doTimer = true;
        timer = TimingTriggerer.getTimer();
        timer.addTrigger(triggerCallback, pollResultion, 0, null);
        
    }
    void deinitUpdater()
    {
        doTimer = false;
    }
    
    void deinitObjects()
    {
        if (sobjects != null)
            sobjects.clear();
    }
    
    void initObjects()
    {
        CSAMainFrame main = Configuration.getConfiguration().getMainFrame();
        deinitObjects();
        
        SizeableObject so = new SizeableObject();
        so.name = main.getClass().getName();
        so.o = main;
        so.size = MemoryUtil.deepMemoryUsageOf(so.o, ALL);
        sobjects.add(so);
        
        VecXPanel v = main.checkVecxy();
        if (v != null)
        {
            VecXState vs = v.getVecXState();
            if (vs != null)
            {
                if (vs instanceof VecX)
                {
                    VecX vecx = (VecX)vs;
                    so = new SizeableObject();
                    so.name = vecx.getClass().getName();
                    so.o = vecx;
                    so.size = MemoryUtil.deepMemoryUsageOf(so.o, ALL);
                    sobjects.add(so);
                }
            }
        }
        jTable1.tableChanged(null);
        SizeableObjectTableModel model = (SizeableObjectTableModel)jTable1.getModel();
        for (int i=0; i< model.getColumnCount(); i++)
        {
            jTable1.getColumnModel().getColumn(i).setPreferredWidth(model.getColWidth(i));                
        }
        updateTableValues();
    }
    void updateTableValues()
    {
        synchronized(sobjects)
        {
            for (SizeableObject so:sobjects)
            {
                so.size = MemoryUtil.deepMemoryUsageOf(so.o, ALL);
            }
        }
        jTable1.repaint();
    }
    String getSizeAsString(long s)
    {
        DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance();
        return formatter.format(s);
    }
    public class SizeableObjectTableModel extends AbstractTableModel
    {
        public int getRowCount()
        {
            return sobjects.size();
        }
        public int getColumnCount()
        {
            return 2;
        }
        public Object getValueAt(int row, int col)
        {
            if (col == 0) 
            {
                return sobjects.get(row).name;
            }
            if (col == 1)
            {
                return getSizeAsString(sobjects.get(row).size);
            }
            return "";
        }
        public String getColumnName(int column) {
            if (column == 0) return "object";
            if (column == 1) return "size";
            return "";
        }
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return String.class;
        }
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
        public int getColWidth(int col)
        {
            if (col == 0) return 200;
            if (col == 1) return 20;
            return 20;
        }
        /*
        public Color getBackground(int col)
        {
            if (col == 0) return config.tableAddress;
            return null; // default
        }
*/
    }    
}
