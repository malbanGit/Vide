/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.vide.vedi;

import com.fazecast.jSerialComm.SerialPort;
import com.fazecast.jSerialComm.SerialPortDataListener;
import com.fazecast.jSerialComm.SerialPortEvent;
import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.config.TinyLogInterface;
import de.malban.gui.dialogs.InternalFrameFileChoser;
import de.malban.gui.dialogs.QuickHelpTopFrame;
import de.malban.gui.panels.LogPanel;
import static de.malban.gui.panels.LogPanel.WARN;
import de.malban.util.KeyboardListener;
import de.malban.util.syntax.Syntax.TokenStyles;
import de.malban.util.UtilityString;
import de.malban.vide.PiTrex.PiTrexEvent;
import static de.malban.vide.PiTrex.PiTrexEvent.PITREX_CONNECTION_STATE_CHANGED;
import de.malban.vide.PiTrex.PiTrexListenerInterface;
import de.malban.vide.PiTrex.PiTrexSingleton;
import de.malban.vide.VideConfig;
import de.malban.vide.dissy.DASM6809;
import static de.malban.vide.dissy.DissiPanel.eval;
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.StyleConstants;



/**
 *
 * @author malban
 * 
 * See: http://fazecast.github.io/jSerialComm/
 * 
 * 
 * Vectrex32 vectorlists wants data X,Y and "non" relative
 * vectrex32 files must use windows style textfiles (0x0d + 0x0a at the end of a line)
 * 
 * 
 */
public class PiTrexTerminal extends VEdiFoundationPanel implements TinyLogInterface
{
    VideConfig config = VideConfig.getConfig();
    LogPanel log = (LogPanel) Configuration.getConfiguration().getDebugEntity();
    Path currentStartPath = Paths.get(Global.mainPathPrefix);
    private String lastPath="";    
    public static int scanCount = 0;
    boolean init = false;
    PiTrexSingleton pi=null;

    boolean loadSettings=true;
    public boolean isLoadSettings()
    {
        return loadSettings;
    }
   
    
    /**
     * Creates new form RegisterJPanel
     */
    public PiTrexTerminal() {
        this(true);
    }
    public PiTrexTerminal(boolean ls) {
        initComponents();
        jMenuItemVector.setVisible(false); // dsabled, do image conversion from vecci
        loadSettings = ls;
        jEditorLog.setContentType("text/html");
        
        init();
        
        if (pi.getPiTrex().isReady())
        {
            jLabel10.setText("connected");
            jLabel10.setForeground(config.valueNotChanged);
        }
        else
        {
            jLabel10.setText("not connected");
            jLabel10.setForeground(config.valueChanged);
        }
        UIManager.addPropertyChangeListener(pListener);
        updateMyUI(); 
    }
    public void deinit()
    {
        pi.removeListener(listener);
        jLabel10.setText("not connected");
        jLabel10.setForeground(config.valueChanged);
        saveSettings();
        init = false;
        removeUIListerner();
    }    
    public String getSettingsName()
    {
        return "PiTrexTerminal.ser";
    }
    protected boolean saveSettings()
    {
        return super.saveSettings();
    }
    public static String SID = "PiTrexTerminal";
    public String getID()
    {
        return SID;
    }
    @Override public String getFileID()
    {
        return de.malban.util.UtilityString.replace(de.malban.util.UtilityString.replace(de.malban.util.UtilityString.replace(de.malban.util.UtilityString.replaceWhiteSpaces(SID, ""),":",""),"(",""),")","") ;
    }
    
    public void init()
    {
        pi = PiTrexSingleton.getPiTrex();
        pi.addListener(listener);
        String lastLoadedFile =null;
        if (loadSettings())
        {
            setFontSize(settings.fontSize);
            if (isLoadSettings())
            {
            }
        }
        else
        {
            settings  = new VediSettings();
        }
        init = true;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuNewFileMenu = new javax.swing.JMenu();
        jMenuItemNewFile = new javax.swing.JMenuItem();
        jPopupMenuTree = new javax.swing.JPopupMenu();
        jMenuItemFileProperties = new javax.swing.JMenuItem();
        jMenuItemAction = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemModi = new javax.swing.JMenuItem();
        jMenuItemYM = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemRaster = new javax.swing.JMenuItem();
        jMenuItemVector = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemDelete = new javax.swing.JMenuItem();
        jMenuItemRename = new javax.swing.JMenuItem();
        jMenuItemDuplicate = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButtonDumpRom = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorLog = new javax.swing.JEditorPane();
        jLabel10 = new javax.swing.JLabel();
        jButtonReset = new javax.swing.JButton();

        jPopupMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPopupMenu1MouseExited(evt);
            }
        });

        jMenuNewFileMenu.setText("new file");

        jMenuItemNewFile.setText("new empty file");
        jMenuItemNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewFileActionPerformed(evt);
            }
        });
        jMenuNewFileMenu.add(jMenuItemNewFile);

        jPopupMenu1.add(jMenuNewFileMenu);

        jPopupMenuTree.setEnabled(false);

        jMenuItemFileProperties.setText("Properties");
        jMenuItemFileProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFilePropertiesActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemFileProperties);

        jMenuItemAction.setText("execute action");
        jMenuItemAction.setToolTipText("execute the configured action (if any)");
        jMenuItemAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemActionActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemAction);
        jPopupMenuTree.add(jSeparator1);

        jMenuItemModi.setText("build vectrex mod");
        jMenuItemModi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemModiActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemModi);

        jMenuItemYM.setText("build vectrex YM");
        jMenuItemYM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemYMActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemYM);
        jPopupMenuTree.add(jSeparator3);

        jMenuItemRaster.setText("convert image to vectrex raster");
        jMenuItemRaster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRasterActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemRaster);

        jMenuItemVector.setText("convert image to vector");
        jMenuItemVector.setToolTipText("");
        jMenuItemVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVectorActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemVector);
        jPopupMenuTree.add(jSeparator2);

        jMenuItemDelete.setText("Delete");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemDelete);

        jMenuItemRename.setText("Rename");
        jMenuItemRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRenameActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemRename);

        jMenuItemDuplicate.setText("Duplicate");
        jMenuItemDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDuplicateActionPerformed(evt);
            }
        });
        jPopupMenuTree.add(jMenuItemDuplicate);

        setName("regi"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(946, 645));

        jButton8.setText("connect");
        jButton8.setToolTipText("<html>\nConnect to Vectrex 32 using the given parameters<BR>\nSHIFT -> disconnect.\n</html>\n");
        jButton8.setPreferredSize(new java.awt.Dimension(71, 21));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButtonDumpRom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_go.png"))); // NOI18N
        jButtonDumpRom.setToolTipText("Dump a ROM to PiTrex (must be in Vectrex-Exact)");
        jButtonDumpRom.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonDumpRom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDumpRomActionPerformed(evt);
            }
        });

        jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneStateChanged(evt);
            }
        });

        jEditorLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jEditorLogMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jEditorLogMousePressed(evt);
            }
        });
        jEditorLog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jEditorLogKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jEditorLog);

        jTabbedPane.addTab("Terminal", jScrollPane2);

        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("not connected");
        jLabel10.setPreferredSize(new java.awt.Dimension(69, 21));

        jButtonReset.setText("reset PiTrex");
        jButtonReset.setToolTipText("<html>\nConnect to Vectrex 32 using the given parameters<BR>\nSHIFT -> disconnect.\n</html>\n");
        jButtonReset.setPreferredSize(new java.awt.Dimension(71, 21));
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButtonDumpRom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 455, Short.MAX_VALUE)
                .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDumpRom)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDumpRomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDumpRomActionPerformed
        if (!pi.isReady()) return;
        InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();
        
        if ((!config.useLastKnownDir) || ((lastPath == null) || (lastPath.length()==0)))
        {
            fc.setCurrentDirectory(new java.io.File(config.fileRequestHome));
        }
        else
        {
            fc.setCurrentDirectory(new java.io.File(lastPath));
        }
        FileNameExtensionFilter  filter = new  FileNameExtensionFilter("Rom (bin, rom, vec)", "bin", "rom", "vec");
        fc.setFileFilter(filter);
        
        int r = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
        if (r != InternalFrameFileChoser.APPROVE_OPTION) return;
        String name = fc.getSelectedFile().getAbsolutePath();
        lastPath = new File(name).getAbsolutePath();
        pi.fileToPiTrex(name);
    }//GEN-LAST:event_jButtonDumpRomActionPerformed

    

    
    
    // output "Tabs" for source generation
    final int TAB_EQU = 30;
    final int TAB_EQU_VALUE = 40;
    final int TAB_MNEMONIC = 20;
    final int TAB_OP = 30;
    final int TAB_COMMENT = 58;
    
    int spaceTo(StringBuilder s, int posNow, int upTo)
    {
        s.append(" ");posNow++; //at least 1;
        while (posNow++<upTo) s.append(" ");
        return posNow;
    }
    
    String prettyQuoteLine(String line)
    {
        String preQuote;
        String quote;
        String postQuote;
        int startQuote;
        String quoteChar = "\"";
        startQuote = line.indexOf("\"");
        if (line.indexOf("'")>startQuote)
        {
            quoteChar = "'";
            startQuote = line.indexOf("'");
        }
        int endQuote = line.lastIndexOf(quoteChar);
        if (endQuote<=startQuote) return line;
        preQuote = line.substring(0,startQuote);
        quote = line.substring(startQuote, endQuote+1);
        postQuote = line.substring(endQuote+1);
        
        StringBuilder b = new StringBuilder();
        String[] words = preQuote.split(" ");
        int w = 0;
        int c = 0;
        if (!UtilityString.isWordBoundry(line.charAt(0)))
        {
            b.append(words[w]).append(" ");
            c+=words[w].length()+1;
            w++;
        }
        c = spaceTo(b, c, TAB_MNEMONIC);
        if (w>=words.length)
        {
            b.append(quote);
            c+=quote.length();
            c = spaceTo(b, c, TAB_OP);
            b.append(postQuote);
            return b.toString();
        }
        while (words[w].length()==0) w++;
        b.append(words[w]).append(" ");
        c+=words[w].length()+1;
        w++;
        c = spaceTo(b, c, TAB_OP);

        for (;w<words.length;w++)
        {
            if (words[w].length()!=0)
            {
                b.append(words[w]).append(" ");
                c+=words[w].length()+1;
            }
        }
        b.append(quote);
        c+=quote.length();
        b.append(postQuote);
        return b.toString();
    }
    
    int getFirstnonQuoteComment(String line)
    {
        String preQuote;
        String quote;
        String postQuote;
        int startQuote;
        String quoteChar = "\"";
        startQuote = line.indexOf("\"");
        if (line.indexOf("'")>startQuote)
        {
            quoteChar = "'";
            startQuote = line.indexOf("'");
        }
        int endQuote = line.lastIndexOf(quoteChar);
        if (endQuote<=startQuote) return -1;
        preQuote = line.substring(0,startQuote);
        quote = line.substring(startQuote, endQuote+1);
        postQuote = line.substring(endQuote+1);
        int ind = postQuote.indexOf(";");
        if (ind == -1) return -1;
        return ind+preQuote.length()+quote.length();
    }

    private void jMenuItemNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewFileActionPerformed

        InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();
        
        if (lastPath.length()==0)
        {
            lastPath = "";
        }
        if ((!config.useLastKnownDir) || ((lastPath == null) || (lastPath.length()==0)))
        {
            fc.setCurrentDirectory(new java.io.File(config.fileRequestHome));
        }
        else
        {
            fc.setCurrentDirectory(new java.io.File(lastPath));
        }
        
        int r = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
        if (r != InternalFrameFileChoser.APPROVE_OPTION) return;
        lastPath = fc.getSelectedFile().getAbsolutePath();
        
        File newFile = new File(lastPath);
        if (newFile.exists())
        {
            // todo, make this CSA Fullscreen conform!
//            JOptionPane pane = new JOptionPane("The file already exists, do you really want\nto create a new file?\n\nAll previous data will be lost!", JOptionPane.WARNING_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
//            int answer = JOptionPaneDialog.show(pane);

                int answer = JOptionPane.showOptionDialog(Configuration.getConfiguration().getMainFrame(), 
                "The file already exists, do you really want\nto create a new file?\n\nAll previous data will be lost!",
                "File exists",
                JOptionPane.WARNING_MESSAGE, JOptionPane.OK_CANCEL_OPTION, null, null, null);

            if (answer == JOptionPane.YES_OPTION)
                System.out.println("YES");
            else
            {
                System.out.println("NO");
                return;
            }
        }
        de.malban.util.UtilityFiles.createTextFile(lastPath, "");
    }//GEN-LAST:event_jMenuItemNewFileActionPerformed
    
    public void addTempEditFile(String filePath)
    {
    }
    
    private void jPopupMenu1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenu1MouseExited
        jPopupMenu1.setVisible(false);
    }//GEN-LAST:event_jPopupMenu1MouseExited

    private void jMenuItemFilePropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFilePropertiesActionPerformed
    }//GEN-LAST:event_jMenuItemFilePropertiesActionPerformed

    private void jMenuItemModiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemModiActionPerformed
    }//GEN-LAST:event_jMenuItemModiActionPerformed

    private void jTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneStateChanged
    }//GEN-LAST:event_jTabbedPaneStateChanged

    private void jMenuItemRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRenameActionPerformed
    }//GEN-LAST:event_jMenuItemRenameActionPerformed

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void jMenuItemDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDuplicateActionPerformed
    }//GEN-LAST:event_jMenuItemDuplicateActionPerformed

     
    
    private void jMenuItemActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemActionActionPerformed
    }//GEN-LAST:event_jMenuItemActionActionPerformed

    private void jMenuItemRasterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRasterActionPerformed
    }//GEN-LAST:event_jMenuItemRasterActionPerformed

    private void jMenuItemYMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemYMActionPerformed
    }//GEN-LAST:event_jMenuItemYMActionPerformed
    boolean fileView = true;
    private void jMenuItemVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVectorActionPerformed
    }//GEN-LAST:event_jMenuItemVectorActionPerformed

    private void jEditorLogKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jEditorLogKeyTyped
        handleTerminalKey(evt.getKeyChar());
    }//GEN-LAST:event_jEditorLogKeyTyped

    private void jEditorLogMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorLogMousePressed
    }//GEN-LAST:event_jEditorLogMousePressed

    private void jEditorLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorLogMouseClicked
        pos = getCursorPos();
    }//GEN-LAST:event_jEditorLogMouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        if (KeyboardListener.is_ShiftDown())
        pi.disconnect();
        else
        pi.rescanConnect();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        if (!pi.resetPi())
        {
            printError("Reset failed, see log for more information.");
        }
        
    }//GEN-LAST:event_jButtonResetActionPerformed
    

    // receives the contents of the textfield after a return
    public boolean doCalculator(String command)
    {
        try
        {
            Double d = eval(command) ;
            int i = (int) d.intValue();
            if ((i<256) && (i>-128))
                printMessage("Result: "+i+", $"+String.format("%02X", i & 0xFF)+", "+DASM6809.printbinary(i));
            else
                printMessage("Result: "+i+", $"+String.format("%X", i)+", "+DASM6809.printbinary16(i));
        }
        catch (Throwable x)
        {
            return false;
        }
        return true;
    }

    public String getLine(JEditorPane comp, int pos)
    {
        try
        {
            String s[] = comp.getDocument().getText(0, comp.getDocument().getLength()).split("\n");
            return s[pos];
        }
        catch (Throwable e)
        {
        }
        return "";
    }
    int getLineOfPos(JEditorPane comp, int pos)
    {
        int ret = -1;
        try
        {
            String[] lines = comp.getDocument().getText(0, comp.getDocument().getLength()).split("\n");
            int count = 0;
            int c = -1;
            while (count <= pos)
            {
                c++;
                count += lines[c].length()+1; // because of "/n"
            }
            if (c < lines.length) ret = c;
        }
        catch (Throwable e)
        {
        }
        return ret;
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButtonDumpRom;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JEditorPane jEditorLog;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JMenuItem jMenuItemAction;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemDuplicate;
    private javax.swing.JMenuItem jMenuItemFileProperties;
    private javax.swing.JMenuItem jMenuItemModi;
    private javax.swing.JMenuItem jMenuItemNewFile;
    private javax.swing.JMenuItem jMenuItemRaster;
    private javax.swing.JMenuItem jMenuItemRename;
    private javax.swing.JMenuItem jMenuItemVector;
    private javax.swing.JMenuItem jMenuItemYM;
    private javax.swing.JMenu jMenuNewFileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenuTree;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane;
    // End of variables declaration//GEN-END:variables

    public void editorChanged(EditorEvent ev)
    {
        tabChanged(false);
    }

    boolean isPrintable(byte c)
    {
        String test = "abcdefghijklmnopqrstuvwxyz1234567890öäüß!\"§$%&/()=?#'@€^°`*+,.-;:_|<>";
        String t = ""+((char)c);
        return test.contains(t.toLowerCase());
    }
    
    
    Point pos= new Point(0,0);
    public Point getCursorPos()
    {
        Point p = new Point(1,1);
        String[] splitter;
        try
        {
         splitter = jEditorLog.getDocument().getText(0, jEditorLog.getDocument().getLength()).split("\n");
            
        }
        catch (Throwable e)
        {
            return p;
        }
        int pos = jEditorLog.getCaretPosition();
        
        int count =0;
        for (String split: splitter)
        {
            if (count + split.length() >=pos)
            {
                p.x = pos - count+1;
                break;
            }
            count+=split.length();
            count++; // plus one because of "/n"
            p.y++;
        }
        
        return p;
    }

    void setFontSize(int fs)
    {
        ArrayList<TokenStyles.MyStyle> cloneStyleList = TokenStyles.styleList;
        TokenStyles.reset();
        settings.fontSize = fs;
        
        for (TokenStyles.MyStyle style: cloneStyleList)
        {
            TokenStyles.addStyle(
                style.name,
                StyleConstants.getBackground(style),
                StyleConstants.getForeground(style), 
                StyleConstants.isBold(style),
                StyleConstants.isItalic(style),
                settings.fontSize,
                StyleConstants.getFontFamily(style)
                );
        }
    }
    
    public void removeUIListerner()
    {
        UIManager.removePropertyChangeListener(pListener);
    }
    private PropertyChangeListener pListener = new PropertyChangeListener()
    {
        public void propertyChange(PropertyChangeEvent evt)
        {
            updateMyUI();
        }
    };
    void updateMyUI()
    {
        SwingUtilities.updateComponentTreeUI(jPopupMenu1);
        SwingUtilities.updateComponentTreeUI(jPopupMenuTree);
        // int fontSize = Theme.textFieldFont.getFont().getSize();
        // int rowHeight = fontSize+2;
        // jTable1.setRowHeight(rowHeight);
    }
    public void deIconified()  {}

    public void printMessageSU(final String s)
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                printMessage(s);
            }
        });                    
    }    
    public void printWarningSU(final String s)
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                printWarning(s);
            }
        });                    
    }    
    public void printErrorSU(final String s)
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                printError(s);
            }
        });                    
    }    
    
    public static boolean displayHelp(String h)
    {
        h = h.toLowerCase();
        String path = Global.mainPathPrefix+"help"+File.separator;
        
        String full = path+h+".html";
        File f = new File(full);
        if (!f.exists())
            full = path+h+".htm";
        f = new File(full);
        if (f.exists())
        {
            QuickHelpTopFrame.showHelpHtmlFile(full);
            return true;
        }
        full = path+h+".png";
        f = new File(full);
        if (f.exists())
        {
            QuickHelpTopFrame.showHelpPNGFile(full);
            return true;
        }
        return false;
    }

    // VEdiFoundationPanel
    public void printMessage(String s)
    {
        try
        {
            jEditorLog.getDocument().insertString(jEditorLog.getDocument().getLength(), s+"\n", TokenStyles.getStyle("editLogMessage"));
        } catch (Throwable e) { }
        jEditorLog.setCaretPosition(jEditorLog.getDocument().getLength());
    }
    public void printWarning(String s)
    {
        try
        {
            jEditorLog.getDocument().insertString(jEditorLog.getDocument().getLength(), s+"\n", TokenStyles.getStyle("editLogWarning"));
        } catch (Throwable e) { }
        jEditorLog.setCaretPosition(jEditorLog.getDocument().getLength());
    }    
    public void printError(String s)
    {
        try
        {
            jEditorLog.getDocument().insertString(jEditorLog.getDocument().getLength(), s+"\n", TokenStyles.getStyle("editLogError"));
        } catch (Throwable e) { }
        jEditorLog.setCaretPosition(jEditorLog.getDocument().getLength());
    }
    public void printASMList(String s, int type){}
    public void printASMMessage(String s, int type){}
    protected boolean closeRequested(String tabName) { return true; }    
    public void doQuickHelp(String word, String integer)
    {
        if (!displayHelp(word))
            doCalculator(integer);
    }
    public void tabChanged(boolean b){}
    public void changeFileName(String s, String f2){}
    public void processIncludeLine(String s) {}

    public void processWord(String s){}
    public void requestSearchFocus(){}
    protected void deselectInTree(String name){}
    public void run(){ }
    public void debug(){ }
    
    StringBuilder fromCard = new StringBuilder();
    PiTrexListenerInterface listener = new PiTrexListenerInterface() 
    {
        @Override
        synchronized public void piTrexEvent(PiTrexEvent e)
        {
            if (e.type == PITREX_CONNECTION_STATE_CHANGED)
            {
                if (pi.getPiTrex().isReady())
                {
                    jLabel10.setText("connected");
                    jLabel10.setForeground(config.valueNotChanged);
                }
                else
                {
                    jLabel10.setText("not connected");
                    jLabel10.setForeground(config.valueChanged);
                }
                return;
            }
            
            SerialPortEvent event = e.se;
            
            SerialPort comPort = event.getSerialPort();
            int available = comPort.bytesAvailable();
            if (available<0) return;
            byte[] newData = new byte[available];
            int numRead = comPort.readBytes(newData, newData.length);

            for (byte d: newData)
            {
                fromCard.append((char )d);
            }
            
            if (jEditorLog.getDocument().getLength()>400000)
            {
                jEditorLog.setText("");
            }

            try
            {
                jEditorLog.getDocument().insertString(jEditorLog.getDocument().getLength(), fromCard.toString()+"", TokenStyles.getStyle("editLogMessage"));
            } 
            catch (Throwable ex) { }
            fromCard = new StringBuilder();
            jEditorLog.setCaretPosition(jEditorLog.getDocument().getLength());
        }
    };
    byte typed = 0;
    void handleTerminalKey(char t)
    {
        if (!pi.isReady()) return;
        
        if ((t >= 32 && t <= 126) || (t==0xa))
        {
            // for PiTrex the "\n" is 0x0a, NOT 0x0d
            typed = (byte)t;
            if (pi.getActiveSerialPort()!=null)
            {
                byte[] buffer = new byte[1];
                buffer[0] = typed;
                pi.getActiveSerialPort().writeBytes(buffer, 1);

                if (typed == 03) // CTRL / C
                {
                    buffer[0] = 0x0a;
                    pi.getActiveSerialPort().writeBytes(buffer, 1);
                }
            }
        }
        pos = getCursorPos();                
    }

}
