/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.vide.vedi.raster;

import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.config.TinyLogInterface;
import de.malban.graphics.GFXVector;
import de.malban.graphics.GFXVectorList;
import de.malban.gui.CSAMainFrame;
import de.malban.gui.ImageCache;
import de.malban.gui.Windowable;
import de.malban.gui.components.CSAInternalFrame;
import de.malban.gui.components.CSAView;
import de.malban.gui.dialogs.InternalFrameFileChoser;
import de.malban.gui.image.DespeckleFilter;
import de.malban.gui.image.SmartBlurFilter;
import de.malban.gui.image.ThresholdFilter;
import de.malban.gui.panels.LogPanel;
import static de.malban.gui.panels.LogPanel.INFO;
import static de.malban.gui.panels.LogPanel.WARN;
import de.malban.vide.veccy.VeccyPanel;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 * @author malban
 */
public class VectorJPanel extends javax.swing.JPanel implements Windowable
{
    LogPanel log = (LogPanel) Configuration.getConfiguration().getDebugEntity();
    StringBuilder outGobblerString = null;

    String pathOnly = "";
    TinyLogInterface tinyLog = null;
    private int mClassSetting=0;
    private CSAView mParent = null;
    private javax.swing.JMenuItem mParentMenuItem = null;
    Thread two = null;
    String orgName="";
    BufferedImage baseImage ;

    @Override
    public void closing()
    {
    }
    @Override public boolean isIcon()
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return false;
        return frame.getInternalFrame(this).isIcon();
    }
    @Override public void setIcon(boolean b)
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return;
        try
        {
            frame.getInternalFrame(this).setIcon(b);
        }
        catch (Throwable e){}
    }
    @Override
    public void setParentWindow(CSAView jpv)
    {
        mParent = jpv;
    }
    @Override
    public void setMenuItem(javax.swing.JMenuItem item)
    {
        mParentMenuItem = item;
        mParentMenuItem.setText("Vector: Image to Vector");
    }
    @Override
    public javax.swing.JMenuItem getMenuItem()
    {
        return mParentMenuItem;
    }
    @Override
    public javax.swing.JPanel getPanel()
    {
        return this;
    }        
    
    /**
     * Creates new form SampleJPanel
     */
    public VectorJPanel() 
    {
        initComponents();
    }
    public VectorJPanel(String filename, TinyLogInterface tl) 
    {
        tinyLog = tl;
        initComponents();
        setImage(filename);
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButtonLoad = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldWidth = new javax.swing.JTextField();
        jTextFieldHeight = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        singleImagePanel1 = new de.malban.graphics.SingleImagePanel();
        jSliderThreshold = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        singleVectorPanel1 = new de.malban.graphics.SingleVectorPanel();
        jSliderSourceScale = new javax.swing.JSlider();
        jCheckBoxGenerateData = new javax.swing.JCheckBox();
        jCheckBoxGenerateExampleCode = new javax.swing.JCheckBox();
        jSliderCombinePixelLen = new javax.swing.JSlider();
        jSliderCombineAngle = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        singleImagePanel2 = new de.malban.graphics.SingleImagePanel();
        jSliderDespeckle = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSliderBlurRadius = new javax.swing.JSlider();
        jLabel15 = new javax.swing.JLabel();
        jSliderBlurThreshold = new javax.swing.JSlider();
        jButton2 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldStartX = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldStartY = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        jLabel18 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jLabel19 = new javax.swing.JLabel();
        jSliderCombineUpscale = new javax.swing.JSlider();
        jLabel14 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButtonPotrace = new javax.swing.JRadioButton();
        jRadioButtonAutotrace = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField4 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(960, 537));

        jButtonLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_go.png"))); // NOI18N
        jButtonLoad.setToolTipText("load YM");
        jButtonLoad.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jLabel1.setText("size");

        jTextFieldWidth.setEditable(false);

        jTextFieldHeight.setEditable(false);

        jLabel2.setText("x");

        singleImagePanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                singleImagePanel1MouseDragged(evt);
            }
        });

        javax.swing.GroupLayout singleImagePanel1Layout = new javax.swing.GroupLayout(singleImagePanel1);
        singleImagePanel1.setLayout(singleImagePanel1Layout);
        singleImagePanel1Layout.setHorizontalGroup(
            singleImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        singleImagePanel1Layout.setVerticalGroup(
            singleImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(singleImagePanel1);

        jSliderThreshold.setMajorTickSpacing(50);
        jSliderThreshold.setMaximum(255);
        jSliderThreshold.setMinorTickSpacing(5);
        jSliderThreshold.setPaintLabels(true);
        jSliderThreshold.setPaintTicks(true);
        jSliderThreshold.setValue(60);
        jSliderThreshold.setPreferredSize(new java.awt.Dimension(322, 45));
        jSliderThreshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderThresholdStateChanged(evt);
            }
        });

        jLabel5.setText("threshold");

        javax.swing.GroupLayout singleVectorPanel1Layout = new javax.swing.GroupLayout(singleVectorPanel1);
        singleVectorPanel1.setLayout(singleVectorPanel1Layout);
        singleVectorPanel1Layout.setHorizontalGroup(
            singleVectorPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        singleVectorPanel1Layout.setVerticalGroup(
            singleVectorPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(singleVectorPanel1);

        jSliderSourceScale.setMajorTickSpacing(1);
        jSliderSourceScale.setMaximum(25);
        jSliderSourceScale.setMinimum(1);
        jSliderSourceScale.setMinorTickSpacing(1);
        jSliderSourceScale.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderSourceScale.setPaintTicks(true);
        jSliderSourceScale.setSnapToTicks(true);
        jSliderSourceScale.setValue(20);
        jSliderSourceScale.setPreferredSize(new java.awt.Dimension(39, 292));
        jSliderSourceScale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSourceScaleStateChanged(evt);
            }
        });

        jCheckBoxGenerateData.setText("generate data file");
        jCheckBoxGenerateData.setEnabled(false);

        jCheckBoxGenerateExampleCode.setText("example code file");
        jCheckBoxGenerateExampleCode.setEnabled(false);

        jSliderCombinePixelLen.setMajorTickSpacing(10);
        jSliderCombinePixelLen.setMinorTickSpacing(1);
        jSliderCombinePixelLen.setPaintLabels(true);
        jSliderCombinePixelLen.setPaintTicks(true);
        jSliderCombinePixelLen.setValue(2);
        jSliderCombinePixelLen.setPreferredSize(new java.awt.Dimension(322, 45));
        jSliderCombinePixelLen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderCombinePixelLenStateChanged(evt);
            }
        });

        jSliderCombineAngle.setMajorTickSpacing(5);
        jSliderCombineAngle.setMaximum(45);
        jSliderCombineAngle.setMinorTickSpacing(1);
        jSliderCombineAngle.setPaintLabels(true);
        jSliderCombineAngle.setPaintTicks(true);
        jSliderCombineAngle.setValue(10);
        jSliderCombineAngle.setPreferredSize(new java.awt.Dimension(322, 45));
        jSliderCombineAngle.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderCombineAngleStateChanged(evt);
            }
        });

        jLabel9.setText("polygon count");

        jButton1.setText("auto limit to:");
        jButton1.setEnabled(false);

        jTextField2.setEnabled(false);

        jLabel10.setText("vector count");

        jCheckBox1.setText("no end points");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel3.setText("minimal vector length");

        jLabel4.setText("minimal vector angle");

        jLabel7.setText("original");

        jLabel8.setText("black and white");

        jLabel11.setText("vectorized");

        javax.swing.GroupLayout singleImagePanel2Layout = new javax.swing.GroupLayout(singleImagePanel2);
        singleImagePanel2.setLayout(singleImagePanel2Layout);
        singleImagePanel2Layout.setHorizontalGroup(
            singleImagePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        singleImagePanel2Layout.setVerticalGroup(
            singleImagePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(singleImagePanel2);

        jSliderDespeckle.setMajorTickSpacing(5);
        jSliderDespeckle.setMaximum(25);
        jSliderDespeckle.setMinorTickSpacing(1);
        jSliderDespeckle.setPaintLabels(true);
        jSliderDespeckle.setPaintTicks(true);
        jSliderDespeckle.setValue(0);
        jSliderDespeckle.setPreferredSize(new java.awt.Dimension(322, 45));
        jSliderDespeckle.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderDespeckleStateChanged(evt);
            }
        });

        jLabel12.setText("despeckle");

        jLabel13.setText("smart blur radius");

        jSliderBlurRadius.setMajorTickSpacing(20);
        jSliderBlurRadius.setMinorTickSpacing(10);
        jSliderBlurRadius.setPaintLabels(true);
        jSliderBlurRadius.setPaintTicks(true);
        jSliderBlurRadius.setValue(0);
        jSliderBlurRadius.setPreferredSize(new java.awt.Dimension(322, 45));
        jSliderBlurRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBlurRadiusStateChanged(evt);
            }
        });

        jLabel15.setText("threshold");

        jSliderBlurThreshold.setMajorTickSpacing(20);
        jSliderBlurThreshold.setMinorTickSpacing(10);
        jSliderBlurThreshold.setPaintLabels(true);
        jSliderBlurThreshold.setPaintTicks(true);
        jSliderBlurThreshold.setValue(0);
        jSliderBlurThreshold.setPreferredSize(new java.awt.Dimension(322, 45));
        jSliderBlurThreshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBlurThresholdStateChanged(evt);
            }
        });

        jButton2.setText("to vecci");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel16.setText("start");

        jTextFieldStartX.setEditable(false);
        jTextFieldStartX.setText("0");

        jLabel17.setText(",");

        jTextFieldStartY.setEditable(false);
        jTextFieldStartY.setText("0");

        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider1.setValue(100);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel18.setText("x factor");

        jSlider2.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider2.setValue(100);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jLabel19.setText("y factor");

        jSliderCombineUpscale.setMajorTickSpacing(10);
        jSliderCombineUpscale.setMinimum(1);
        jSliderCombineUpscale.setMinorTickSpacing(1);
        jSliderCombineUpscale.setPaintTicks(true);
        jSliderCombineUpscale.setValue(10);
        jSliderCombineUpscale.setPreferredSize(new java.awt.Dimension(322, 45));
        jSliderCombineUpscale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderCombineUpscaleStateChanged(evt);
            }
        });

        jLabel14.setText("upscaling");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSliderDespeckle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSliderBlurRadius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSliderBlurThreshold, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel15)))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jSliderThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jSliderCombinePixelLen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(jSliderCombineAngle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(330, 330, 330)
                                .addComponent(jLabel8))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel7))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldStartX, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldStartY, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCheckBox1)
                                            .addComponent(jCheckBoxGenerateData)
                                            .addComponent(jCheckBoxGenerateExampleCode)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel9)
                                                    .addComponent(jLabel10)
                                                    .addComponent(jButton1))
                                                .addGap(13, 13, 13)
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(6, 6, 6))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSliderSourceScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel18)
                                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jSliderCombineUpscale, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(1, 1, 1))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(666, 666, 666)
                        .addComponent(jLabel11)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(373, 373, 373)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(11, 11, 11))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jSliderSourceScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldStartY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldStartX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel17)
                                .addComponent(jLabel16))
                            .addComponent(jCheckBox1))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSliderCombinePixelLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSliderThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSliderCombineAngle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSliderDespeckle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSliderBlurRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxGenerateData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxGenerateExampleCode)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSliderBlurThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSliderCombineUpscale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(373, 373, 373)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("image settings", jPanel3);

        jLabel6.setText("load image file");

        buttonGroup1.add(jRadioButtonPotrace);
        jRadioButtonPotrace.setSelected(true);
        jRadioButtonPotrace.setText("potrace");
        jRadioButtonPotrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPotraceActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonAutotrace);
        jRadioButtonAutotrace.setText("autotrace");
        jRadioButtonAutotrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAutotraceActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "black", "white" }));
        jComboBox1.setToolTipText("only autotrace");
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextField4.setText("0.2");
        jTextField4.setToolTipText("<html>\nonly autotrace\n<BR>\ninto how many single vectors curves are \"splitted\", the higher (0.5, 1, 2,3,4...) the blockier\n</html>");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel20.setText("error-Threshold");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLoad)
                .addGap(33, 33, 33)
                .addComponent(jRadioButtonPotrace)
                .addGap(35, 35, 35)
                .addComponent(jRadioButtonAutotrace)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonLoad)
                            .addComponent(jLabel6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jRadioButtonPotrace, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jRadioButtonAutotrace, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addGap(0, 0, 0)))
                .addComponent(jTabbedPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    String lastImagePath = Global.mainPathPrefix;
    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed


        InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();
        fc.setMultiSelectionEnabled(true);
        if (lastImagePath.length()==0)
        {
        }
        else
        {
            fc.setCurrentDirectory(new java.io.File(lastImagePath));
        }
        FileNameExtensionFilter  filter = new  FileNameExtensionFilter("Images", "jpg", "jpeg", "png", "bmp", "gif");
        fc.setFileFilter(filter);
        int r = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
        if (r != InternalFrameFileChoser.APPROVE_OPTION) return;
        File[] files = fc.getSelectedFiles();
        String fullPath;
        if ((files == null) || (files.length == 1))
        {
            fullPath = fc.getSelectedFile().getAbsolutePath();
        }
        else // add multiple images
        {
            fullPath = files[0].getAbsolutePath();
        }        
        lastImagePath =fullPath;
        setImage(fullPath);
    }//GEN-LAST:event_jButtonLoadActionPerformed
   
    

    
    
    private void jSliderThresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderThresholdStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderThresholdStateChanged

    private void jSliderSourceScaleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSourceScaleStateChanged
        int value = jSliderSourceScale.getValue();
        int max = jSliderSourceScale.getMaximum();

        double scale = value - ((max-1)/2);

        if (value <((max/2)+1))
        {
            int invScale = ((max/2)+2)-value;
            scale = 1.0/invScale;
        }
        singleVectorPanel1.setScale(scale);

    }//GEN-LAST:event_jSliderSourceScaleStateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        singleVectorPanel1.setDrawVectorEnds(!jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jSliderCombinePixelLenStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderCombinePixelLenStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderCombinePixelLenStateChanged

    private void jSliderCombineAngleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderCombineAngleStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderCombineAngleStateChanged

    private void jSliderDespeckleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderDespeckleStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderDespeckleStateChanged

    private void jSliderBlurRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBlurRadiusStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderBlurRadiusStateChanged

    private void jSliderBlurThresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBlurThresholdStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderBlurThresholdStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (veccy != null)
        {
            veccy.setCurrentVectorList(singleVectorPanel1.getForegroundVectorList().clone());
            return;
        }
        CSAMainFrame mainFrame = (CSAMainFrame) Configuration.getConfiguration().getMainFrame();
        veccy = mainFrame.getVeccy();
        veccy.setVPanel(this);
        setVeccy(veccy);
        veccy.setCurrentVectorList(singleVectorPanel1.getForegroundVectorList().clone());

    }//GEN-LAST:event_jButton2ActionPerformed

    private void singleImagePanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_singleImagePanel1MouseDragged
        if (baseImage == null) return;
        int x = ((int)((double)((double)evt.getX())/1));
        int y = ((int)((double)((double)evt.getY())/1));
        
        int sX = singleImagePanel1.getPressedStartX();
        int sY = singleImagePanel1.getPressedStartY();
        
        if (x<0) x = 0;
        if (sX<0) sX = 0;
        if (y<0) y = 0;
        if (sY<0) sY = 0;
        
        if (x>baseImage.getWidth()) x = baseImage.getWidth();
        if (sX>baseImage.getWidth()) sX = baseImage.getWidth();
        if (y>baseImage.getHeight()) y = baseImage.getHeight();
        if (sY>baseImage.getHeight()) sY = baseImage.getHeight();
        
        if (x < sX)
        {
            int tmp = sX;
            sX = x;
            x = tmp;
        }
        if (y < sY)
        {
            int tmp = sY;
            sY = y;
            y = tmp;
        }
        
        int w = x-sX;
        int h = y-sY;
        
        jTextFieldStartX.setText(""+sX);
        jTextFieldStartY.setText(""+sY);
        jTextFieldWidth.setText(""+w);
        jTextFieldHeight.setText(""+h);
      //  jTextFieldVectorWitdh.setText(""+w);
      //  jTextFieldVectorHeight.setText(""+h);
        
        
        
        buildVectors();
    }//GEN-LAST:event_singleImagePanel1MouseDragged

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        xFactor = ((double)jSlider1.getValue())/100.0;
        buildVectors();
    }//GEN-LAST:event_jSlider1StateChanged

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        yFactor = ((double)jSlider2.getValue())/100.0;
        buildVectors();
    }//GEN-LAST:event_jSlider2StateChanged

    private void jSliderCombineUpscaleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderCombineUpscaleStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderCombineUpscaleStateChanged

    private void jRadioButtonPotraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPotraceActionPerformed
        buildVectors();
    }//GEN-LAST:event_jRadioButtonPotraceActionPerformed

    private void jRadioButtonAutotraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAutotraceActionPerformed
        buildVectors();
    }//GEN-LAST:event_jRadioButtonAutotraceActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        buildVectors();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        buildVectors();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    double xFactor = 1.0;
    double yFactor = 1.0;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBoxGenerateData;
    private javax.swing.JCheckBox jCheckBoxGenerateExampleCode;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButtonAutotrace;
    private javax.swing.JRadioButton jRadioButtonPotrace;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSliderBlurRadius;
    private javax.swing.JSlider jSliderBlurThreshold;
    private javax.swing.JSlider jSliderCombineAngle;
    private javax.swing.JSlider jSliderCombinePixelLen;
    private javax.swing.JSlider jSliderCombineUpscale;
    private javax.swing.JSlider jSliderDespeckle;
    private javax.swing.JSlider jSliderSourceScale;
    private javax.swing.JSlider jSliderThreshold;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextFieldHeight;
    private javax.swing.JTextField jTextFieldStartX;
    private javax.swing.JTextField jTextFieldStartY;
    private javax.swing.JTextField jTextFieldWidth;
    private de.malban.graphics.SingleImagePanel singleImagePanel1;
    private de.malban.graphics.SingleImagePanel singleImagePanel2;
    private de.malban.graphics.SingleVectorPanel singleVectorPanel1;
    // End of variables declaration//GEN-END:variables

    VeccyPanel veccy=null;
    public void setVeccy(VeccyPanel vp)
    {
        veccy = vp;
    }
    
    public static void showModPanelNoModal(VeccyPanel v)
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        VectorJPanel panel = new VectorJPanel();
        if (v != null)
        {
            v.setVPanel(panel);
            panel.veccy = v;
        }
        ((CSAMainFrame)Configuration.getConfiguration().getMainFrame()).addAsWindow(panel,  1080, 800, "Vector: Image to Vector");
    }        

    public static void showModPanelNoModal(String fileName, TinyLogInterface tl)
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        VectorJPanel panel = new VectorJPanel(fileName, tl);
        ((CSAMainFrame)Configuration.getConfiguration().getMainFrame()).addAsWindow(panel,  1080, 800, "Vector: Image to Vector");
    }        
    
    
    

    
    
    public void setImage(String filename)
    {
        orgName = filename;
        singleImagePanel1.setImage(orgName);
        baseImage = singleImagePanel1.getImage();
        
        if ((singleImagePanel1.getSourceWidth()>320) || (singleImagePanel1.getSourceHeight()>320))
            singleImagePanel1.scaleToFit();
        
        jTextFieldWidth.setText(""+singleImagePanel1.getSourceWidth());
        jTextFieldHeight.setText(""+singleImagePanel1.getSourceHeight());
        

        jSliderSourceScaleStateChanged(null);
        buildVectors();
    }

    static long uid = 0;
    // whole thing is oriented on badapple!
    boolean building = false;
    public boolean buildVectors()
    {
        if (baseImage==null) return false;
        if (building) return false;
        building = true;
        // BufferedImage orgImage = singleImagePanel1.getImage();
        int startX = de.malban.util.UtilityString.IntX(jTextFieldStartX.getText(), 0);
        int startY = de.malban.util.UtilityString.IntX(jTextFieldStartY.getText(), 0);
        int width = de.malban.util.UtilityString.IntX(jTextFieldWidth.getText(), baseImage.getWidth()-startX);
        int height = de.malban.util.UtilityString.IntX(jTextFieldHeight.getText(), baseImage.getHeight()-startY);


        double upscale = ((double)jSliderCombineUpscale.getValue())/10.0;
        if (width == 0) 
        {
            building = false;
            return false;
        }
        if (height == 0) 
        {
            building = false;
            return false;
        }
        BufferedImage orgImage = baseImage;
        
        String filenameTMP = Global.mainPathPrefix+"tmp"+File.separator+"tmpImage"+(uid++)+".bmp";
        try
        {
            // get image

            // despeckle
            BufferedImage filteredImage= de.malban.util.UtilityImage.toNonAlpha(orgImage);
            DespeckleFilter despeckleFilter = new DespeckleFilter();
            for (int d = 0; d<jSliderDespeckle.getValue(); d++ )
            {
                filteredImage = despeckleFilter.filter(filteredImage, null);
            }
            
            // Blur
            if ((jSliderBlurRadius.getValue()>0) && (jSliderBlurThreshold.getValue()>0))
            {
                SmartBlurFilter blurFilter = new SmartBlurFilter();
                blurFilter.setRadius(jSliderBlurRadius.getValue());
                blurFilter.setThreshold(jSliderBlurThreshold.getValue());
                filteredImage = blurFilter.filter(filteredImage, null);
            }
            singleImagePanel1.setBaseImage(filteredImage);
            singleImagePanel1.setNoMouseRection(false);

            // black and white filter with threshold
            ThresholdFilter bwFilter = new ThresholdFilter(jSliderThreshold.getValue());

            // build black and white and force NO alpha (otherwise saving to BMP does not work)
            filteredImage = bwFilter.filter(filteredImage, null);
            filteredImage = filteredImage.getSubimage(startX, startY, width, height);

            
            // show image to user
            singleImagePanel2.setBaseImage( filteredImage);

            if (upscale != 1.0)
            {
                filteredImage = ImageCache.getImageCache().getDerivatScale(filteredImage, (int)(width*upscale), (int)(height*upscale));
            }
            
            filteredImage = de.malban.util.UtilityImage.toNonAlpha(filteredImage);
            // write to tmp
            boolean result = ImageIO.write(filteredImage, "BMP", new File(filenameTMP));
            if (!result) 
            {
                building = false;
                return false;
            }
            ArrayList<GFXVectorList> vList = new ArrayList<GFXVectorList>();

            String outFilename = filenameTMP.substring(0, filenameTMP.length()-4)+".vec";
           // if (jRadioButtonPotrace.isSelected())
            {
                // execute potrace
                if (jRadioButtonPotrace.isSelected())
                    result = executePoTrace(filenameTMP, outFilename);
                else
                    result = executeAutotrace(filenameTMP);

                if (!result) 
                {
                    building = false;
                    return false;
                }

                // read data to point lists
                Features features;
                if (jRadioButtonPotrace.isSelected())
                    features = readJSONData(outFilename, filteredImage.getWidth(), filteredImage.getHeight());
                else
                {
                    while (!outGobblerString.toString().contains("</svg>"))
                    {
                        
                        Thread.sleep(10);
                    }
                    features = readSVGData(outGobblerString.toString(), filteredImage.getWidth(), filteredImage.getHeight());
                    
                }

                // now process the result
                features = cullBorders(features);

                int combinePixelLen=jSliderCombinePixelLen.getValue();
                double combineAngle=(180 - jSliderCombineAngle.getValue())*(Math.PI/180.0);
                features=optimizeMesh(features, combinePixelLen, combineAngle);

                features = cullEmpty(features);
                int scale=4;

                vList = generateGFXVectorList(features);
            }
            // build GFXVectorList
            jTextField1.setText(""+vList.size());
            GFXVectorList vectorList = concat(vList); 
            jTextField3.setText(""+vectorList.list.size());
            singleVectorPanel1.clearForegroundVectorList();
            centerVectorList(vectorList);
            singleVectorPanel1.addForegroundVectorList(vectorList.list);
        }
        catch (Throwable e)
        {
            log.addLog(e, WARN);
            building = false;
            return false;
        }
        building = false;
        de.malban.util.UtilityFiles.cleanDirectory(Global.mainPathPrefix+"tmp");
        
        return true;
    }
    void centerVectorList(GFXVectorList vl)
    {
        double minX = Integer.MAX_VALUE;
        double maxX = -Integer.MAX_VALUE;
        double minY = Integer.MAX_VALUE;
        double maxY = -Integer.MAX_VALUE;
        double minZ = Integer.MAX_VALUE;
        double maxZ = -Integer.MAX_VALUE;
        
        
        for (int i=0; i< vl.size(); i++)
        {
            GFXVector v = vl.get(i);
            if (minX>v.start.x()) minX = v.start.x();
            if (minX>v.end.x()) minX = v.end.x();
            if (maxX<v.start.x()) maxX = v.start.x();
            if (maxX<v.end.x()) maxX = v.end.x();
            
            if (minY>v.start.y()) minY = v.start.y();
            if (minY>v.end.y()) minY = v.end.y();
            if (maxY<v.start.y()) maxY = v.start.y();
            if (maxY<v.end.y()) maxY = v.end.y();
            
            if (minZ>v.start.z()) minZ = v.start.z();
            if (minZ>v.end.z()) minZ = v.end.z();
            if (maxZ<v.start.z()) maxZ = v.start.z();
            if (maxZ<v.end.z()) maxZ = v.end.z();
        }
        double difX = maxX-minX;
        double difY = maxY-minY;
        double difZ = maxZ-minZ;
        
        int translocationX = (int) (maxX-difX/2);
        int translocationY = (int) (maxY-difY/2);
        int translocationZ = (int) (maxZ-difZ/2);
        
        HashMap<String, Boolean> done = new HashMap<String, Boolean>();
        for (int i=0; i< vl.size(); i++)
        {
            GFXVector v = vl.get(i);
            if (done.get(""+v.start.uid) == null)
            {
                v.start.x(v.start.x()-translocationX);            
                v.start.y(v.start.y()-translocationY);            
                v.start.z(v.start.z()-translocationZ);            
                done.put(""+v.start.uid, true);
            }
            
            if (done.get(""+v.end.uid) == null)
            {
                v.end.x(v.end.x()-translocationX);            
                v.end.y(v.end.y()-translocationY);            
                v.end.z(v.end.z()-translocationZ);            
                done.put(""+v.end.uid, true);
            }
        }        
    }
    ArrayList<GFXVectorList> generateGFXVectorList_(Features in)
    {
        ArrayList<GFXVectorList> vList= new ArrayList<GFXVectorList>();
        for (Feature feature : in.feature) 
        {
            for(Poly poly: feature.poly) 
            {
                GFXVectorList vectorList = new GFXVectorList();
                boolean first = true;
                for (VPoint coord: poly.coords)
                {
                    GFXVector v = new GFXVector();
                    
                }
                vList.add(vectorList);
            }
        }
        return vList;
    }

    // https://www.youtube.com/watch?v=pTv5tm9-9CY
    // http://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple/1.1.1

    class VPoint
    {
        int x;
        int y;
        int flag;
        String flagSign;
        public VPoint(int _x, int _y)
        {
            x = _x;
            y = _y;
        }
    }
    class Poly
    {
        ArrayList<VPoint> coords= new ArrayList<VPoint>();
    }
    class Feature
    {
        ArrayList<Poly> poly = new ArrayList<Poly>();
    }
    class Features
    {
        ArrayList<Feature> feature= new ArrayList<Feature>();
    }
    
    // Point[][][] -> polygons -> coords -> ints
    //Grab poly info and convert to (255,255)-sized grid
    Features readJSONData(String filename, int imageWidth, int imageHeight)
    {
        Features features = new Features();
        try
        {
            FileReader reader = new FileReader(filename);
            JSONObject jobj = (JSONObject) new JSONParser().parse(reader);
            JSONArray featuresArray= (JSONArray)jobj.get("features");
            
            int featureCount = 0;
            for(Object f : featuresArray)
            {
                JSONObject geometry= (JSONObject)((JSONObject)f).get("geometry");
                JSONArray polygonArray = (JSONArray)((JSONObject)geometry).get("coordinates");
                int polygonCount = 0;

                Feature feature = new Feature();
                for(Object p : polygonArray)
                {
                    JSONArray polyArray = (JSONArray)p;
                    Poly poly = new Poly();
                    
                    int coordsCount = 0;
                    for (Object c: polyArray)
                    {
                        JSONArray coords = (JSONArray)c;
                        double val0 = (Double) coords.get(0);
                        double val1 = (Double) coords.get(1);
                        
                        val0 = val0*255; // x
                        val1 = val1*255; // y

                        val0 = val0/imageWidth;
                        val1 = val1/imageHeight;
                        
                        VPoint point = new VPoint((int)val0, (int)val1);
                        coordsCount++;
                        poly.coords.add(point);
                    }
                    polygonCount++;
                    feature.poly.add(poly);
                }
                featureCount++;
                features.feature.add(feature);
            }
        }
        catch (Throwable e)
        {
            e.printStackTrace();
            return null;
        }
        return features;
    }
    
    //Gets rid of lines along the borders of the image
    //In/Out: array of polys with abs coordinates
    // nulls all points that are border touching
    Features cullBorders(Features in) 
    {
        Features retFeatures = new Features();
        for (Feature feature : in.feature) 
        {
            Feature retFeature = new Feature();
            for(Poly poly: feature.poly) 
            {
                Poly retPoly = new Poly();
                for (VPoint coord: poly.coords)
                {
                    if (!(coord.x<=1 || coord.x>=254 || coord.y<=1 || coord.y>=254) )
                    {
                        retPoly.coords.add(new VPoint(coord.x, coord.y));
                    }
                }
                retFeature.poly.add(retPoly);
            }
            retFeatures.feature.add(retFeature);
        }
        return retFeatures;
    }
    //Optimize the polys to get rid of non-important lines
    //In/Out: array of polys with abs coordinates
    // looks for "small" lines, combines "pixelLen" lines
    // looks for "small" angels, combines small angles!
    Features optimizeMesh(Features in, int combinePixelLen, double combineAngle) 
    {
        Features retFeatures = new Features();
        int skippy=0;
        for (Feature feature : in.feature) 
        {
            Feature retFeature = new Feature();
            for(Poly poly: feature.poly) 
            {
                Poly retPoly = new Poly();
                int coordsCount = 0;

                int px=-9999;
                int py=-9999;
                
                for (VPoint coord: poly.coords)
                {
                    boolean skip = false;
                    int x= coord.x;
                    int y= coord.y;
                    
                    int dx=x-px; 
                    int dy=y-py;                    
                    
                    //See if this line is really small.
                    if (!((dx*dx)+(dy*dy)>(combinePixelLen*combinePixelLen)))
                        skip=true;
                    
                    //Calculate angle between this and next line
                    double a=Math.PI/2;
                    if ((coordsCount+1)<poly.coords.size()) 
                    {
                        a=calcAngle(px,py, x, y, poly.coords.get(coordsCount+1).x, poly.coords.get(coordsCount+1).y);
                    }
                    
                    
                    if (a<0) 
                        a=-a;
                    if (a>Math.PI) 
                        a=(2*Math.PI)-a;
                    //If angle is small, we can merge this and the next line.
                    if (!(a<combineAngle) )
                        skip=true;
                    if (!skip) 
                    {
                        //Add point to output array
                        retPoly.coords.add(new VPoint(x,y));
                        px=x;
                        py=y;
                    }
                    else
                    {
                        skippy++;
                    }
                    coordsCount++;
                }
                retFeature.poly.add(retPoly);
            }
            retFeatures.feature.add(retFeature);
        }
        return retFeatures;        
    }    
    
    //Get rid of empty polys
    //In/Out: array of polys with abs coordinates
    Features cullEmpty(Features in) 
    {
        Features retFeatures = new Features();
        for (Feature feature : in.feature) 
        {
            Feature retFeature = new Feature();
            for(Poly poly: feature.poly) 
            {
                if (poly.coords.size()>0)
                    retFeature.poly.add(poly);
            }
            if (feature.poly.size()>0)
                retFeatures.feature.add(retFeature);
        }
        return retFeatures;
    }

    //Convert to rel coords
    //In: array of polys with abs coordinates
    //Out: array of polys with rel coordinates
    Features scaleRel(Features in, int sc) 
    {
        int scaleMode = 1;
        if (!jRadioButtonPotrace.isSelected()) scaleMode = -1;
        int px=128*sc;
        int py=128*sc;
        Features retFeatures = new Features();
        for (Feature feature : in.feature) 
        {
            Feature retFeature = new Feature();
            for(Poly poly: feature.poly) 
            {
                Poly retPoly = new Poly();
                int coordsCount=0;
		boolean first=true;
                for (VPoint coord: poly.coords)
                {
                    int x= coord.x * sc;
                    int y= coord.y * sc;
                    
                    
                    double dx=x-px; 
                    double dy=y-py; //Calculate distance

                    //Calculate amount of moves we need to do
                    int divx=((int) Math.abs(dx/127.0))+1;
                    int divy=((int)Math.abs(dy/127.0))+1;
                    
                    double div=(divx>divy)?divx:divy;

                    //$div now contains the amount of steps to take.
                    if (first) 
                    {
                        if (dx==0 && dy==0) 
                        {
                            // Continuation of line. Leave out 1st coord

                        } 
                        else 
                        {
                            VPoint retPoint = new VPoint((int)(dx/div), (int)(dy/div)*scaleMode);
                            retPoint.flagSign="c";
                            retPoint.flag = (int) div; // count
                            px+=((int)(dx/div))*div;
                            py+=((int)(dy/div))*div;
                            retPoly.coords.add(retPoint);
                        }
                    } 
                    else 
                    {
                        //Just put multiple jumps in.
                        for (int i=0; i<div; i++) 
                        {
                            VPoint retPoint = new VPoint((int)(dx/div), (int)(dy/div)*scaleMode);
                            px+=((int)(dx/div));
                            py+=((int)(dy/div));
                            retPoint.flagSign="c";
                            retPoly.coords.add(retPoint);
                        }
                    }
                    first=false;                    
                    
                    
                }
                coordsCount++;
                retFeature.poly.add(retPoly);
            }
            retFeatures.feature.add(retFeature);
        }
        return retFeatures;
    }
    
    double calcAngle(int x1, int y1, int x2, int y2, int x3, int y3)
    {
	double dv1x=x2-x1; 
        double dv1y=y2-y1;
        
	double dv2x=x2-x3; 
        double dv2y=y2-y3;
        
	double n1=Math.sqrt((dv1x*dv1x)+(dv1y*dv1y));
	double n2=Math.sqrt((dv2x*dv2x)+(dv2y*dv2y));

        double np=n1*n2;
        
	double dp=(dv1x*dv2x)+(dv1y*dv2y);
        
	if (Math.abs(np)<0.0001) 
            return Math.PI/2;
	return Math.acos(dp/np);
    }
    // helper class to get messages from exec commands
    class StreamGobbler extends Thread
    {
        InputStream is;
        String type;

        StreamGobbler(InputStream is, String type)
        {
            this.is = is;
            this.type = type;
            if (type.equals("OUTPUT"))
                outGobblerString = new StringBuilder();
        }

        public void run()
        {
            try
            {
                InputStreamReader isr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(isr);
                String line=null;
                while ( (line = br.readLine()) != null)
                {
                    if (type.equals("ERROR"))
                    {
                        if (tinyLog != null)
                            tinyLog.printError(line);
                        log.addLog(line, WARN);
                    }
                    else// (type.equals("OUTPUT"))
                    {
                        if (tinyLog != null)
                            tinyLog.printMessage(line);
                        log.addLog(line, INFO);
                        outGobblerString.append(line+"\n");
                    }
                }
            } 
            catch (IOException ioe)
            {
                ioe.printStackTrace();  
            }
        }
    }
    static boolean isMac = Global.getOSName().toUpperCase().contains("MAC");
    static boolean isWin = Global.getOSName().toUpperCase().contains("WIN");
    static boolean isLinux = Global.getOSName().toUpperCase().contains("LIN");
    
    // excelent articel on exec:
    //see : http://www.javaworld.com/article/2071275/core-java/when-runtime-exec---won-t.html
    public boolean executePoTrace(String filename, String outFilename)
    {
        if (isMac)
        {
            return executePoTraceMac( filename, outFilename);
        }
        if (isWin)
        {
            return executePoTraceWin( filename, outFilename);
        }
        if (isLinux)
        {
            return executePoTraceLin( filename, outFilename);
        }
        return false;
    }
    public boolean executePoTraceMac(String filename, String outFilename)
    {
        int bits = Global.getOSBit();
        String osDir = "mac"+bits;
        String filepath = Global.mainPathPrefix+"externalTools"+File.separator+"potrace"+File.separator+osDir+File.separator+"potrace";
        
        String [] cmd = new String[6];
        cmd[0] = filepath;
        cmd[1] = "-a0";   
        cmd[2] = "-O1";   
        cmd[3] = "-bgeojson";   
        cmd[4] = "-o"+outFilename;   
        cmd[5] = filename;   
        
        log.addLog("Starting Mac potrace...", INFO);
        return executeOSCommand(cmd);
    }
    public boolean executePoTraceWin(String filename, String outFilename)
    {
        int bits = Global.getOSBit();
        String osDir = "win"+bits;
        String filepath = Global.mainPathPrefix+"externalTools"+File.separator+"potrace"+File.separator+osDir+File.separator+"potrace.exe";
        
        String [] cmd = new String[6];
        cmd[0] = filepath;
        cmd[1] = "-a0";   
        cmd[2] = "-O1";   
        cmd[3] = "-bgeojson";   
        cmd[4] = "-o"+outFilename;   
        cmd[5] = filename;   
        
        log.addLog("Starting Win potrace...", INFO);
        return executeOSCommand(cmd);
    }
    public boolean executePoTraceLin(String filename, String outFilename)
    {
        int bits = Global.getOSBit();
        String osDir = "linux"+bits;
        String filepath = Global.mainPathPrefix+"externalTools"+File.separator+"potrace"+File.separator+osDir+File.separator+"potrace";
        
        String [] cmd = new String[6];
        cmd[0] = filepath;
        cmd[1] = "-a0";   
        cmd[2] = "-O1";   
        cmd[3] = "-bgeojson";   
        cmd[4] = "-o"+outFilename;   
        cmd[5] = filename;   
        
        log.addLog("Starting Linux potrace...", INFO);
        return executeOSCommand(cmd);
    }
    boolean executeOSCommand(String [] cmd)
    {
        try
        {
            Process p = Runtime.getRuntime().exec(cmd);

            // any errors
            StreamGobbler errorGobbler = new  StreamGobbler(p.getErrorStream(), "ERROR");            
            // any output?
            StreamGobbler outputGobbler = new StreamGobbler(p.getInputStream(), "OUTPUT");
                
            // kick them off
            errorGobbler.start();
            outputGobbler.start();          
 
            p.waitFor();
        }
        catch (Throwable e)
        {
            log.addLog(e, WARN);
            return false;
        }        
        return true;
        
    }
    
    //In: array of polys with abs coordinates
    ArrayList<GFXVectorList> generateGFXVectorList(Features in) 
    {
        int scaleMode= 1;
        if (!jRadioButtonPotrace.isSelected()) scaleMode = -1;
        ArrayList<GFXVectorList> vListList = new ArrayList<GFXVectorList>();
        for (Feature feature : in.feature) 
        {
            for(Poly poly: feature.poly) 
            {
                GFXVectorList vList = new GFXVectorList();
                GFXVector lastVector = null;
                for (VPoint coord: poly.coords)
                {
                    GFXVector thisVector = new GFXVector();
                    int x= coord.x-128;
                    int y= coord.y-128;
                    
                    x = (int) (((double)x)*xFactor);
                    y = (int) (((double)y)*yFactor)*scaleMode;
                    
                    if (lastVector == null)
                    {
                        thisVector.end.x(x);
                        thisVector.end.y(y);
                    }
                    else
                    {
                        thisVector.start=lastVector.end;
                        thisVector.end.x(x);
                        thisVector.end.y(y);
                        vList.list.add(thisVector);
                    }
                    lastVector = thisVector;
                }
                if (vList.list.size()>0)
                {
//                    vList.list.remove(vList.list.size()-1); // drop last element, since it only contains the last endpoint
                    vListList.add(vList);
                }
            }
        }
        return vListList;
    }
    // build GFXVectorList
    GFXVectorList concat(ArrayList<GFXVectorList> vList)
    {
        GFXVectorList ret = new GFXVectorList();
        for (GFXVectorList vl: vList)
        {
            for (GFXVector vl2: vl.list)
            {
                ret.list.add(vl2);
            }
            
        }
        return ret;
    }
    public void deIconified()  {}

    

	
	
    public boolean executeAutotrace(String filename)
    {
        boolean b = false;
        if (isMac)
        {
            b = executeAutotraceMac( filename);
        }
        if (isWin)
        {
            b = executeAutotraceWin( filename);
        }
        if (isLinux)
        {
            b = executeAutotraceLin( filename);
        }
        return b;
    }
    public boolean executeAutotraceMac(String filename)
    {
        int bits = Global.getOSBit();
        String osDir = "mac"+bits;
        String filepath = Global.mainPathPrefix+"externalTools"+File.separator+"autotrace"+File.separator+osDir+File.separator+"MacOS"+File.separator+"autotrace";
        
        String [] cmd = new String[8];
        cmd[0] = filepath;
        if (jComboBox1.getSelectedIndex()==0)
            cmd[1] = "-background-color=000000";   
        else
            cmd[1] = "-background-color=ffffff";   
        cmd[2] = "-error-threshold="+jTextField4.getText();   
        cmd[3] = "-centerline";   
        cmd[4] = "-line-reversion-threshold=1000";   
        cmd[5] = "-line-threshold=1000";   
        cmd[6] = "-output-format=svg";   

        cmd[7] = filename;   

        
        // output is written to stdio
		// must be gotten from "gobbler"
		
        log.addLog("Starting Mac autotrace...", INFO);
        return executeOSCommand(cmd);
    }
    public boolean executeAutotraceWin(String filename)
    {
        int bits = Global.getOSBit();
        String osDir = "win"+bits;
        String filepath = Global.mainPathPrefix+"externalTools"+File.separator+"autotrace"+File.separator+osDir+File.separator+"autotrace.exe";
        

        String [] cmd = new String[8];
        cmd[0] = filepath;
        if (jComboBox1.getSelectedIndex()==0)
            cmd[1] = "-background-color=000000";   
        else
            cmd[1] = "-background-color=ffffff";   
        cmd[2] = "-error-threshold="+jTextField4.getText();   
        cmd[3] = "-centerline";   
        cmd[4] = "-line-reversion-threshold=1000";   
        cmd[5] = "-line-threshold=1000";   
        cmd[6] = "-output-format=svg";   

        cmd[7] = filename;   

        
        log.addLog("Starting Win autotrace...", INFO);
        return executeOSCommand(cmd);
    }
    public boolean executeAutotraceLin(String filename)
    {
        int bits = Global.getOSBit();
        String osDir = "linux"+bits;
        String filepath = Global.mainPathPrefix+"externalTools"+File.separator+"autotrace"+File.separator+osDir+File.separator+"autotrace";
        
        String [] cmd = new String[8];
        cmd[0] = filepath;
        if (jComboBox1.getSelectedIndex()==0)
            cmd[1] = "-background-color=000000";   
        else
            cmd[1] = "-background-color=ffffff";   
        cmd[2] = "-error-threshold="+jTextField4.getText();   
        cmd[3] = "-centerline";   
        cmd[4] = "-line-reversion-threshold=1000";   
        cmd[5] = "-line-threshold=1000";   
        cmd[6] = "-output-format=svg";   

        cmd[7] = filename;   

        
        log.addLog("Starting Linux autotrace...", INFO);
        return executeOSCommand(cmd);
    }
	
    class SVGStream
    {
        String err="";
        String s;
        String work;
        int pos;
        String mode="";
        SVGStream(String ss)
        {
            s= ss;
            work= ss;
            pos = 0;
        }
        void error(String s)
        {
            err=err+"("+pos+"): "+s+"\n";
        }
        boolean toNextPath()
        {
            int p = work.indexOf("d=\"");
            if (p <0) return false;
            work = work.substring(p+3);
            this.pos = this.pos +p+3;
            return true;
        }

        void skipSpaces()
        {
            char m;
            int p = 0;
            do
            {
                m = work.substring(p,p+1).charAt(0);
                p++;
                pos++;
            } while (m == ' ');
            pos--; // correct pos, last found was NO space
            p--;
            if (p > 0)
                work = work.substring(p);
        }

        // advances 1 char if mode was found
        // does not advance when no mode was found
        // mode is returned, either the last (when none found) or new mode
        String nextMode()
        {
            skipSpaces();
            char m = peekChar();

            // finish upon unkown mode!
            if ((m != 'L') && (m != 'l') && (m != 'M') && (m != 'm'))
            {
                mode="x";
                return mode;
            }

            mode = ""+getChar();
            return mode;
        }
        char peekChar()
        {
            if (work.length() == 0)
            {
                error("stream end");
                return 0;
            }
            return work.substring(0,1).charAt(0);
        }
        char getChar()
        {
            if (work.length() == 0)
            {
                error("stream end");
                return 0;
            }
            char m = work.substring(0,1).charAt(0);
            pos++;
            work = work.substring(1);
            return m;
        }
        int nextIntNumber()
        {
            int ret = 0;
            skipSpaces();

            char m = peekChar();
            while ((m>='0') && (m<='9'))
            {
                m = getChar();
                ret*=10;
                ret+=m-'0';
                m = peekChar();
            } 
            if (m == '.')
            {
                m = getChar(); // skip '.'
                // skip to end of decimal
                m = peekChar();
                while ((m>='0') && (m<='9'))
                {
                    m = getChar();
                    m = peekChar();
                } 
            }
            return ret;
        }
    };
	
    // only reads Paths
    // ignores curves, h, v, z
    Features readSVGData(String data, int imageWidth, int imageHeight)
    {
        Features features = new Features();
        Feature feature = new Feature();
        features.feature.add(feature);
        int globalX = 0;
        int globalY = 0;
        int oldMoveX = 0;
        int oldMoveY = 0;
        try
        {
            SVGStream svg = new SVGStream(data);
            String mode = "";
            String nextMode = "";

            while (svg.toNextPath())
            {
                // following only does ONE
                // path
                Poly poly = null;
                while (!mode.equals("x"))
                {
                    nextMode = svg.nextMode();
                    int x= svg.nextIntNumber();
                    int y= svg.nextIntNumber();

                    if ((nextMode.equals("L")) || (nextMode.equals("M")))
                    {
                        globalX = x;
                        globalY = y;
                    }
                    if ((nextMode.equals("l")) || (nextMode.equals("m")))
                    {
                        globalX += x;
                        globalY += y;
                    }
                    nextMode = nextMode.toLowerCase();
                    if ((mode.equals("l")) && (!nextMode.equals("l")))
                    {
                        // from line mode to something else
                        // finish Poly
                        feature.poly.add(poly);
                        poly = null;
                    }
                    else if ((!mode.equals("l")) && (nextMode.equals("l")))
                    {
                        // from something else to line
                        // create new poly
                        poly = new Poly();
                        
                        if (mode.equals("m"))
                        {
                            // last mode was a move, so add the first coordinate, so we can draw a single line
                            // and add one coordinate pair
                            double val0 = oldMoveX;
                            double val1 = oldMoveY;

                            val0 = val0*255; // x
                            val1 = val1*255; // y

                            val0 = val0/imageWidth;
                            val1 = val1/imageHeight;

                            VPoint point = new VPoint((int)val0, (int)val1);
                            poly.coords.add(point);
                            
                        }
                        
                        // and add one coordinate pair
                        double val0 = globalX;
                        double val1 = globalY;

                        val0 = val0*255; // x
                        val1 = val1*255; // y

                        val0 = val0/imageWidth;
                        val1 = val1/imageHeight;

                        VPoint point = new VPoint((int)val0, (int)val1);
                        poly.coords.add(point);
                    }
                    else if (nextMode.equals("l"))
                    {
                        // staying in line mode
                        // add one coordinate pair
                        double val0 = globalX;
                        double val1 = globalY;

                        val0 = val0*255; // x
                        val1 = val1*255; // y

                        val0 = val0/imageWidth;
                        val1 = val1/imageHeight;

                        VPoint point = new VPoint((int)val0, (int)val1);
                        poly.coords.add(point);
                    }
                    mode = nextMode;
                    if (mode.equals("m"))
                    {
                        oldMoveX = globalX;
                        oldMoveY = globalY;
                    }
                } // path while
                if (poly != null)
                    feature.poly.add(poly);
            } // svg path while
        }
        catch (Throwable e)
        {
            e.printStackTrace();
            return null;
        }
        return features;
    }
	
	
}

