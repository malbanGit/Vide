    package de.malban.vide.vedi.raster;


import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.graphics.GFXVector;
import de.malban.gui.CSAMainFrame;
import de.malban.gui.ImageCache;
import de.malban.gui.Windowable;
import de.malban.gui.components.CSAView;
import de.malban.gui.components.ModalInternalFrame;
import de.malban.gui.dialogs.InternalFrameFileChoser;
import de.malban.vide.vedi.VediPanel;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

public class RasterPanel extends javax.swing.JPanel implements 
         Windowable
{
    
    boolean modal = true;
    public void setModal(boolean b)
    {
        modal = b;
        jPanel1.setVisible(!modal);
        jButtonCancel.setVisible(modal);
    }
    String orgName = "";

    private int mClassSetting=0;

    private CSAView mParent = null;
    private javax.swing.JMenuItem mParentMenuItem = null;
    @Override public boolean isIcon()
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return false;
        return frame.getInternalFrame(this).isIcon();
    }
    @Override public void setIcon(boolean b)
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return;
        try
        {
            frame.getInternalFrame(this).setIcon(b);
        }
        catch (Throwable e){}
    }
    @Override
    public void closing()
    {
        deinit();
    }
    @Override
    public void setParentWindow(CSAView jpv)
    {
        mParent = jpv;
    }
    @Override
    public void setMenuItem(javax.swing.JMenuItem item)
    {
        mParentMenuItem = item;
        mParentMenuItem.setText("Raster Panels");

    }
    @Override
    public javax.swing.JMenuItem getMenuItem()
    {
        return mParentMenuItem;
    }
    @Override
    public javax.swing.JPanel getPanel()
    {
        return this;
    }
    public void deinit()
    {
    }

    /** Creates new form ProjectPropertiesPanel */
    public RasterPanel() {
        mClassSetting++;
        initComponents();
       
        
        mClassSetting--;

    }
    public void setImage(String filename)
    {
        orgName = filename;
        singleImagePanel1.setImage(orgName);
        
        if ((singleImagePanel1.getSourceWidth()>320) || (singleImagePanel1.getSourceHeight()>320))
            singleImagePanel1.scaleToFit();
        
        jTextFieldWidth.setText(""+singleImagePanel1.getSourceWidth());
        jTextFieldHeight.setText(""+singleImagePanel1.getSourceHeight());
        
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            jTextFieldVectorWitdh.setText(""+singleImagePanel1.getSourceWidth());
            jTextFieldVectorHeight.setText(""+singleImagePanel1.getSourceHeight());
        }
        jSliderSourceScaleStateChanged(null);
        buildVectors();
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jRadioButtonHorizontalVectors = new javax.swing.JRadioButton();
        jRadioButtonVertical = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButtonAlphaAsGrayscale = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldWidth = new javax.swing.JTextField();
        jTextFieldHeight = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldVectorWitdh = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldVectorHeight = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        singleImagePanel1 = new de.malban.graphics.SingleImagePanel();
        jSliderThreshold = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        singleVectorPanel1 = new de.malban.graphics.SingleVectorPanel();
        jSliderSourceScale = new javax.swing.JSlider();
        jCheckBoxGenerateData = new javax.swing.JCheckBox();
        jCheckBoxGenerateExampleCode = new javax.swing.JCheckBox();
        jCheckBoxIncludeBrightness = new javax.swing.JCheckBox();
        jCheckBoxAssume9Bit = new javax.swing.JCheckBox();
        jCheckBoxBiDirectionalData = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldStartX = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldStartY = new javax.swing.JTextField();
        jCheckBoxInvert = new javax.swing.JCheckBox();
        jCheckBoxFix = new javax.swing.JCheckBox();
        jCheckBoxXMirror = new javax.swing.JCheckBox();
        jCheckBoxYMirror = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButtonCreate = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jSliderGridSize = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldMultiplyBits = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButtonLoad = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 600));

        buttonGroup1.add(jRadioButtonHorizontalVectors);
        jRadioButtonHorizontalVectors.setSelected(true);
        jRadioButtonHorizontalVectors.setText("horizontal vectors");
        jRadioButtonHorizontalVectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonHorizontalVectorsActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonVertical);
        jRadioButtonVertical.setText("vertical vectors");
        jRadioButtonVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonVerticalActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("colors as grayscale");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButtonAlphaAsGrayscale);
        jRadioButtonAlphaAsGrayscale.setText("alpha as grayscale");
        jRadioButtonAlphaAsGrayscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAlphaAsGrayscaleActionPerformed(evt);
            }
        });

        jLabel1.setText("size");

        jTextFieldWidth.setEditable(false);

        jTextFieldHeight.setEditable(false);

        jLabel2.setText("x");

        jLabel3.setText("vector \"size\"");

        jTextFieldVectorWitdh.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldVectorWitdhFocusLost(evt);
            }
        });
        jTextFieldVectorWitdh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldVectorWitdhActionPerformed(evt);
            }
        });

        jLabel4.setText("x");

        jTextFieldVectorHeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldVectorHeightFocusLost(evt);
            }
        });
        jTextFieldVectorHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldVectorHeightActionPerformed(evt);
            }
        });

        jScrollPane1.setMaximumSize(new java.awt.Dimension(320, 320));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(320, 320));

        singleImagePanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                singleImagePanel1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                singleImagePanel1MouseMoved(evt);
            }
        });
        singleImagePanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                singleImagePanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout singleImagePanel1Layout = new javax.swing.GroupLayout(singleImagePanel1);
        singleImagePanel1.setLayout(singleImagePanel1Layout);
        singleImagePanel1Layout.setHorizontalGroup(
            singleImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        singleImagePanel1Layout.setVerticalGroup(
            singleImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(singleImagePanel1);

        jSliderThreshold.setMajorTickSpacing(50);
        jSliderThreshold.setMaximum(255);
        jSliderThreshold.setMinorTickSpacing(5);
        jSliderThreshold.setPaintLabels(true);
        jSliderThreshold.setPaintTicks(true);
        jSliderThreshold.setValue(60);
        jSliderThreshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderThresholdStateChanged(evt);
            }
        });

        jLabel5.setText("threshold");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(320, 320));

        singleVectorPanel1.setPreferredSize(new java.awt.Dimension(318, 318));

        javax.swing.GroupLayout singleVectorPanel1Layout = new javax.swing.GroupLayout(singleVectorPanel1);
        singleVectorPanel1.setLayout(singleVectorPanel1Layout);
        singleVectorPanel1Layout.setHorizontalGroup(
            singleVectorPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        singleVectorPanel1Layout.setVerticalGroup(
            singleVectorPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(singleVectorPanel1);

        jSliderSourceScale.setMajorTickSpacing(1);
        jSliderSourceScale.setMaximum(25);
        jSliderSourceScale.setMinimum(1);
        jSliderSourceScale.setMinorTickSpacing(1);
        jSliderSourceScale.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderSourceScale.setPaintTicks(true);
        jSliderSourceScale.setSnapToTicks(true);
        jSliderSourceScale.setValue(20);
        jSliderSourceScale.setPreferredSize(new java.awt.Dimension(39, 292));
        jSliderSourceScale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSourceScaleStateChanged(evt);
            }
        });

        jCheckBoxGenerateData.setSelected(true);
        jCheckBoxGenerateData.setText("generate data file");

        jCheckBoxGenerateExampleCode.setSelected(true);
        jCheckBoxGenerateExampleCode.setText("example code file");

        jCheckBoxIncludeBrightness.setText("include brightness data");
        jCheckBoxIncludeBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxIncludeBrightnessActionPerformed(evt);
            }
        });

        jCheckBoxAssume9Bit.setSelected(true);
        jCheckBoxAssume9Bit.setText("assume 9 bit shift");
        jCheckBoxAssume9Bit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAssume9BitActionPerformed(evt);
            }
        });

        jCheckBoxBiDirectionalData.setSelected(true);
        jCheckBoxBiDirectionalData.setText("generate bi directional data");
        jCheckBoxBiDirectionalData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBiDirectionalDataActionPerformed(evt);
            }
        });

        jLabel6.setText("start");

        jTextFieldStartX.setEditable(false);
        jTextFieldStartX.setText("0");

        jLabel7.setText(",");

        jTextFieldStartY.setEditable(false);
        jTextFieldStartY.setText("0");

        jCheckBoxInvert.setText("invert");
        jCheckBoxInvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxInvertActionPerformed(evt);
            }
        });

        jCheckBoxFix.setText("fix");

        jCheckBoxXMirror.setText("xMirror");
        jCheckBoxXMirror.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxXMirrorActionPerformed(evt);
            }
        });

        jCheckBoxYMirror.setText("yMirror");
        jCheckBoxYMirror.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxYMirrorActionPerformed(evt);
            }
        });

        jButton1.setText(">");
        jButton1.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<");
        jButton2.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(">");
        jButton3.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("<");
        jButton4.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText(">");
        jButton5.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("<");
        jButton6.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText(">");
        jButton7.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("<");
        jButton8.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButtonCreate.setText("create");
        jButtonCreate.setName("create"); // NOI18N
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });

        jButtonCancel.setText("cancel");
        jButtonCancel.setName("cancel"); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jSliderGridSize.setMajorTickSpacing(5);
        jSliderGridSize.setMaximum(20);
        jSliderGridSize.setMinorTickSpacing(1);
        jSliderGridSize.setPaintTicks(true);
        jSliderGridSize.setValue(10);
        jSliderGridSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderGridSizeStateChanged(evt);
            }
        });

        jLabel9.setText("grid");

        jTextFieldMultiplyBits.setText("1");
        jTextFieldMultiplyBits.setToolTipText("not with brightnessdata included");

        jLabel10.setText("multiply bits");
        jLabel10.setToolTipText("only with vertical switch");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jCheckBoxGenerateData)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxBiDirectionalData))
                            .addComponent(jCheckBoxGenerateExampleCode))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCancel)
                        .addGap(86, 86, 86)
                        .addComponent(jButtonCreate))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(3, 3, 3)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jButton2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton1))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jTextFieldStartX, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel7)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jButton4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton3))
                                            .addComponent(jTextFieldStartY, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jTextFieldWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel2))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jButton6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton5)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jButton8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton7))
                                            .addComponent(jTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSliderSourceScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jRadioButtonHorizontalVectors)
                                                    .addComponent(jRadioButtonVertical)
                                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                                        .addComponent(jTextFieldMultiplyBits, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jLabel10)))
                                                .addGap(39, 39, 39)
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jCheckBoxYMirror, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jCheckBoxXMirror))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jRadioButtonAlphaAsGrayscale)
                                                    .addComponent(jRadioButton3)))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jCheckBoxIncludeBrightness)
                                                            .addComponent(jCheckBoxAssume9Bit))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel9))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                                .addComponent(jLabel3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jTextFieldVectorWitdh, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel4)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jTextFieldVectorHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addComponent(jCheckBoxInvert))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jCheckBoxFix)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSliderGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(jSliderThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderSourceScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jTextFieldStartX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldStartY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextFieldVectorWitdh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldVectorHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel1)
                        .addComponent(jTextFieldWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jCheckBoxFix)))
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxGenerateData)
                            .addComponent(jCheckBoxBiDirectionalData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxGenerateExampleCode)
                            .addComponent(jTextFieldMultiplyBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jCheckBoxIncludeBrightness)
                                            .addComponent(jButton2)
                                            .addComponent(jButton1)
                                            .addComponent(jButton4)
                                            .addComponent(jButton3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBoxAssume9Bit))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButton8)
                                                .addComponent(jButton7))
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButton6)
                                                .addComponent(jButton5)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxInvert)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioButtonHorizontalVectors)
                                    .addComponent(jRadioButton3)
                                    .addComponent(jCheckBoxXMirror)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel9))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jSliderGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonVertical)
                            .addComponent(jRadioButtonAlphaAsGrayscale)
                            .addComponent(jCheckBoxYMirror))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCancel)
                            .addComponent(jButtonCreate))))
                .addGap(0, 0, 0))
        );

        jTabbedPane1.addTab("image settings", jPanel3);

        jLabel8.setText("load image file");

        jButtonLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_go.png"))); // NOI18N
        jButtonLoad.setToolTipText("load YM");
        jButtonLoad.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButton9.setText("jButton9");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLoad)
                .addGap(71, 71, 71)
                .addComponent(jButton9)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButtonLoad)
                        .addComponent(jLabel8))
                    .addComponent(jButton9))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
        createASMFile();
        buildVectors();
    }//GEN-LAST:event_jButtonCreateActionPerformed

    private void jSliderSourceScaleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSourceScaleStateChanged
        int value = jSliderSourceScale.getValue();
        int max = jSliderSourceScale.getMaximum();

        double scale = value - ((max-1)/2);

        if (value <((max/2)+1))
        {
            int invScale = ((max/2)+2)-value;
            scale = 1.0/invScale;
        }
        singleVectorPanel1.setScale(scale);
        
    }//GEN-LAST:event_jSliderSourceScaleStateChanged

    private void jSliderThresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderThresholdStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderThresholdStateChanged

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        buildVectors();
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButtonAlphaAsGrayscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAlphaAsGrayscaleActionPerformed
        buildVectors();
    }//GEN-LAST:event_jRadioButtonAlphaAsGrayscaleActionPerformed

    private void jRadioButtonHorizontalVectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonHorizontalVectorsActionPerformed
        jCheckBoxBiDirectionalData.setEnabled(true);
        jCheckBoxIncludeBrightness.setEnabled(true);
        buildVectors();
    }//GEN-LAST:event_jRadioButtonHorizontalVectorsActionPerformed

    private void jRadioButtonVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonVerticalActionPerformed
        jCheckBoxBiDirectionalData.setEnabled(false);
        jCheckBoxIncludeBrightness.setEnabled(false);
        buildVectors();
    }//GEN-LAST:event_jRadioButtonVerticalActionPerformed

    private void jTextFieldVectorWitdhFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldVectorWitdhFocusLost
        buildVectors();
    }//GEN-LAST:event_jTextFieldVectorWitdhFocusLost

    private void jTextFieldVectorHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldVectorHeightFocusLost
        buildVectors();
    }//GEN-LAST:event_jTextFieldVectorHeightFocusLost

    private void jCheckBoxIncludeBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxIncludeBrightnessActionPerformed
        buildVectors();
        jButtonCreate.setEnabled(!jCheckBoxIncludeBrightness.isSelected());
    }//GEN-LAST:event_jCheckBoxIncludeBrightnessActionPerformed

    private void jCheckBoxAssume9BitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAssume9BitActionPerformed
        buildVectors();
    }//GEN-LAST:event_jCheckBoxAssume9BitActionPerformed

    private void jCheckBoxBiDirectionalDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBiDirectionalDataActionPerformed
    }//GEN-LAST:event_jCheckBoxBiDirectionalDataActionPerformed

    private void singleImagePanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_singleImagePanel1MouseDragged
        BufferedImage orgImage = singleImagePanel1.getImage();
        if (orgImage == null) return;
        int x = ((int)((double)((double)evt.getX())/1));
        int y = ((int)((double)((double)evt.getY())/1));
        
        int sX = singleImagePanel1.getPressedStartX();
        int sY = singleImagePanel1.getPressedStartY();
        
        if (x<0) x = 0;
        if (sX<0) sX = 0;
        if (y<0) y = 0;
        if (sY<0) sY = 0;
        
        if (x>orgImage.getWidth()) x = orgImage.getWidth();
        if (sX>orgImage.getWidth()) sX = orgImage.getWidth();
        if (y>orgImage.getHeight()) y = orgImage.getHeight();
        if (sY>orgImage.getHeight()) sY = orgImage.getHeight();
        
        if (x < sX)
        {
            int tmp = sX;
            sX = x;
            x = tmp;
        }
        if (y < sY)
        {
            int tmp = sY;
            sY = y;
            y = tmp;
        }
        
        int w = x-sX;
        int h = y-sY;
        
        jTextFieldStartX.setText(""+sX);
        jTextFieldStartY.setText(""+sY);
        jTextFieldWidth.setText(""+w);
        jTextFieldHeight.setText(""+h);
        if (!jCheckBoxFix.isSelected())
        {
            jTextFieldVectorWitdh.setText(""+w);
            jTextFieldVectorHeight.setText(""+h);
        }
        buildVectors();
        
    }//GEN-LAST:event_singleImagePanel1MouseDragged

    private void singleImagePanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_singleImagePanel1MouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_singleImagePanel1MouseMoved

    private void singleImagePanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_singleImagePanel1MouseReleased

    }//GEN-LAST:event_singleImagePanel1MouseReleased

    String lastImagePath = Global.mainPathPrefix;
    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed

        InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();
        fc.setMultiSelectionEnabled(true);
        if (lastImagePath.length()==0)
        {
        }
        else
        {
            fc.setCurrentDirectory(new java.io.File(lastImagePath));
        }
        FileNameExtensionFilter  filter = new  FileNameExtensionFilter("Images", "jpg", "jpeg", "png", "bmp", "gif");
        fc.setFileFilter(filter);
        int r = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
        if (r != InternalFrameFileChoser.APPROVE_OPTION) return;
        File[] files = fc.getSelectedFiles();
        String fullPath;
        if ((files == null) || (files.length == 1))
        {
            fullPath = fc.getSelectedFile().getAbsolutePath();
        }
        else // add multiple images
        {
            fullPath = files[0].getAbsolutePath();
        }
        lastImagePath =fullPath;
        setImage(fullPath);
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        
        
        
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jCheckBoxInvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxInvertActionPerformed
                buildVectors();
    }//GEN-LAST:event_jCheckBoxInvertActionPerformed

    private void jTextFieldVectorWitdhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldVectorWitdhActionPerformed
        buildVectors();
    }//GEN-LAST:event_jTextFieldVectorWitdhActionPerformed

    private void jTextFieldVectorHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldVectorHeightActionPerformed
        buildVectors();
    }//GEN-LAST:event_jTextFieldVectorHeightActionPerformed

    private void jCheckBoxXMirrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxXMirrorActionPerformed
        buildVectors();
    }//GEN-LAST:event_jCheckBoxXMirrorActionPerformed

    private void jCheckBoxYMirrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxYMirrorActionPerformed
        buildVectors();
    }//GEN-LAST:event_jCheckBoxYMirrorActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int startX = de.malban.util.UtilityString.IntX(jTextFieldStartX.getText(), 0);
        if (startX == 0) return;
        startX--;
        jTextFieldStartX.setText(""+startX);
        buildVectors();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        BufferedImage orgImage = singleImagePanel1.getImage();
        if (orgImage == null) return;
        int startX = de.malban.util.UtilityString.IntX(jTextFieldStartX.getText(), 0);
        if (startX >= orgImage.getWidth()) return;
        startX++;
        jTextFieldStartX.setText(""+startX);
        buildVectors();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int startY = de.malban.util.UtilityString.IntX(jTextFieldStartY.getText(), 0);
        if (startY == 0) return;
        startY--;
        jTextFieldStartY.setText(""+startY);
        buildVectors();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        BufferedImage orgImage = singleImagePanel1.getImage();
        if (orgImage == null) return;
        int startY = de.malban.util.UtilityString.IntX(jTextFieldStartY.getText(), 0);
        if (startY >= orgImage.getHeight()) return;
        startY++;
        jTextFieldStartY.setText(""+startY);
        buildVectors();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int width = de.malban.util.UtilityString.IntX(jTextFieldWidth.getText(), 0);
        if (width == 0) return;
        width--;
        jTextFieldWidth.setText(""+width);
        if (!jCheckBoxFix.isSelected())
        {
            jTextFieldVectorWitdh.setText(""+width);
        }

        buildVectors();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        BufferedImage orgImage = singleImagePanel1.getImage();
        if (orgImage == null) return;
        int width = de.malban.util.UtilityString.IntX(jTextFieldWidth.getText(), 0);
        int startX = de.malban.util.UtilityString.IntX(jTextFieldStartX.getText(), 0);
        if (width+startX >= orgImage.getWidth()) return;
        width++;
        jTextFieldWidth.setText(""+width);
        if (!jCheckBoxFix.isSelected())
        {
            jTextFieldVectorWitdh.setText(""+width);
        }
        buildVectors();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        int height = de.malban.util.UtilityString.IntX(jTextFieldHeight.getText(), 0);
        if (height == 0) return;
        height--;
        jTextFieldHeight.setText(""+height);
        if (!jCheckBoxFix.isSelected())
        {
            jTextFieldVectorHeight.setText(""+height);
        }
        buildVectors();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        BufferedImage orgImage = singleImagePanel1.getImage();
        if (orgImage == null) return;
        int height = de.malban.util.UtilityString.IntX(jTextFieldHeight.getText(), 0);
        int startY = de.malban.util.UtilityString.IntX(jTextFieldStartY.getText(), 0);
        if (height+startY >= orgImage.getHeight()) return;
        height++;
        jTextFieldHeight.setText(""+height);
        if (!jCheckBoxFix.isSelected())
        {
            jTextFieldVectorHeight.setText(""+height);
        }
        buildVectors();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jSliderGridSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderGridSizeStateChanged
        int gridSize = jSliderGridSize.getValue();
        singleVectorPanel1.setGrid(gridSize!=0, gridSize);
        buildVectors();
    }//GEN-LAST:event_jSliderGridSizeStateChanged

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        
                createASMFile();
        buildVectors();

        
        
        
    }//GEN-LAST:event_jButton9ActionPerformed

    
   // boolean wasMainSetManually = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JCheckBox jCheckBoxAssume9Bit;
    private javax.swing.JCheckBox jCheckBoxBiDirectionalData;
    private javax.swing.JCheckBox jCheckBoxFix;
    private javax.swing.JCheckBox jCheckBoxGenerateData;
    private javax.swing.JCheckBox jCheckBoxGenerateExampleCode;
    private javax.swing.JCheckBox jCheckBoxIncludeBrightness;
    private javax.swing.JCheckBox jCheckBoxInvert;
    private javax.swing.JCheckBox jCheckBoxXMirror;
    private javax.swing.JCheckBox jCheckBoxYMirror;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButtonAlphaAsGrayscale;
    private javax.swing.JRadioButton jRadioButtonHorizontalVectors;
    private javax.swing.JRadioButton jRadioButtonVertical;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSliderGridSize;
    private javax.swing.JSlider jSliderSourceScale;
    private javax.swing.JSlider jSliderThreshold;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextFieldHeight;
    private javax.swing.JTextField jTextFieldMultiplyBits;
    private javax.swing.JTextField jTextFieldStartX;
    private javax.swing.JTextField jTextFieldStartY;
    private javax.swing.JTextField jTextFieldVectorHeight;
    private javax.swing.JTextField jTextFieldVectorWitdh;
    private javax.swing.JTextField jTextFieldWidth;
    private de.malban.graphics.SingleImagePanel singleImagePanel1;
    private de.malban.graphics.SingleVectorPanel singleVectorPanel1;
    // End of variables declaration//GEN-END:variables

    
    // returns new Properties, not saved yet!
    ModalInternalFrame modelDialog;
    public static boolean showRasterPanel(String fileName)
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        RasterPanel panel = new RasterPanel();
        panel.setImage(fileName);
        ArrayList<JButton> eb= new ArrayList<JButton>();
        eb.add(panel.jButtonCreate);
        eb.add(panel.jButtonCancel);
        ModalInternalFrame modal = new ModalInternalFrame("Raster image", frame.getRootPane(), frame, panel,null, null , eb);
        modal.setResizable(true);
        panel.modelDialog = modal;
        modal.setVisible(true);
        String result = modal.getNamedExit();
        if (result.equals("create"))
        {
            return true;
        }
        
        return false;
    }    
    
    public static void showModPanelNoModal()
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        RasterPanel panel = new RasterPanel();
        panel.setModal(false);
        ((CSAMainFrame)Configuration.getConfiguration().getMainFrame()).addAsWindow(panel,  1080, 800, "Raster Panels");
        
//       ((CSAMainFrame)Configuration.getConfiguration().getMainFrame()).addPanel(panel);
//       ((CSAMainFrame)Configuration.getConfiguration().getMainFrame()).windowMe(panel, 1080, 800, panel.getMenuItem().getText());
    }        
    
    
    
    ArrayList<Integer>[] shiftRegRows= new ArrayList[0];
    ArrayList<GFXVector>[] vectorRows= new ArrayList[0];
    ArrayList<Integer>[] shiftRegCols= new ArrayList[0];
    ArrayList<GFXVector>[] vectorCols= new ArrayList[0];
    void buildVectors()
    {
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            buildHorizontal();
        }
        else
        {
            buildVertical();
        }
        displayVectors();
    }

    boolean buildHorizontal()
    {
        BufferedImage orgImage = singleImagePanel1.getImage();
        int targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
        int targetHeight = de.malban.util.UtilityString.IntX(jTextFieldVectorHeight.getText(), orgImage.getHeight());

        int startX = de.malban.util.UtilityString.IntX(jTextFieldStartX.getText(), 0);
        int startY = de.malban.util.UtilityString.IntX(jTextFieldStartY.getText(), 0);
        int width = de.malban.util.UtilityString.IntX(jTextFieldWidth.getText(), orgImage.getWidth()-startX);
        int height = de.malban.util.UtilityString.IntX(jTextFieldHeight.getText(), orgImage.getHeight()-startY);
        
        
        if (jCheckBoxAssume9Bit.isSelected())
        {
            if (!jCheckBoxFix.isSelected())
            {
                jTextFieldVectorWitdh.setText(""+(width+(width/8)));
                targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
            }
            else
            {
                int shift9 = targetWidth /8;
                targetWidth -= shift9;
            }
        }
        else
        {
            if (!jCheckBoxFix.isSelected())
            {
                jTextFieldVectorWitdh.setText(""+width);
                targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
            }
        }
        
        orgImage = singleImagePanel1.getSelection(startX, startY, width, height).image;
        
        
        // only bytes in the image above a threshold are
        // counted as pixels
        int threshold = jSliderThreshold.getValue();
        
        BufferedImage scaledImage = ImageCache.getImageCache().getDerivatScale(orgImage, targetWidth, targetHeight);
        if (scaledImage == null) return false;
        
        shiftRegRows= new ArrayList[targetHeight];
        vectorRows= new ArrayList[targetHeight];

        int rowWidth = 0;
        if (!jCheckBoxIncludeBrightness.isSelected())
        {
            for (int y=0;y<targetHeight;y++)
            {
                rowWidth = 0;
                ArrayList<Integer> shiftRegRow = new ArrayList<Integer>();

                // next shift reg value - 8 bit = 8 pixels of image
                int shiftReg = 0;

                // only pixels above the threshold count to average brightness
                // brightness can only be set every 8 "pixels" -> one shift reg!
                int bitCount = 0;
                for (int x=0;x<targetWidth;x++)
                {
                    int rgba;
                    int usedX =x;
                    int usedY =y;
                    if (jCheckBoxXMirror.isSelected())
                        usedX = targetWidth-1-x;
                    if (jCheckBoxYMirror.isSelected())
                        usedY = targetHeight-1-y;

                    rgba =scaledImage.getRGB(usedX, usedY);
                    boolean bit= getBitFromColor(rgba);
                    
                    int mulValue = de.malban.util.UtilityString.IntX(jTextFieldMultiplyBits.getText(),1);
                    
                    for (int ttt = 0; ttt<mulValue;ttt++)
                    {
                        if (bit) shiftReg++;
                        bitCount++;
                        if (bitCount == 8)
                        {
                            shiftRegRow.add(shiftReg);
                            rowWidth++;
                            shiftReg = 0;
                            bitCount = 0;
                        }
                        shiftReg = shiftReg << 1;
                    }
                    
                    
                }
                while (bitCount<8)
                {
                    bitCount++;
                    if (bitCount == 8)
                    {
                        shiftRegRow.add(shiftReg);
                        rowWidth++;
                    }
                    shiftReg = shiftReg << 1;
                }
                shiftRegRows[y] = shiftRegRow;
            }
        }
        else
        {
            for (int y=0;y<targetHeight;y++)
            {
                rowWidth = 0;
                ArrayList<GFXVector> vectorRow = new ArrayList<GFXVector>();
                vectorRows[y] = vectorRow;
                int oldGrayscale = -1;
                boolean oldShown = false;
                int xStart = 0;
                int yStart = y;
                for (int x=0;x<targetWidth;x++)
                {
                    int rgba =scaledImage.getRGB(x, y);
                    Color c = new Color(rgba);
                    boolean shown = false;
                    int grayscale = 0;
                    if (jRadioButtonAlphaAsGrayscale.isSelected())
                    {
                        // get alpha value
                        int A = (rgba >> 24) & 0xFF;
                        if (A>threshold)
                        {
                            grayscale = A;
                            shown = true;
                        }
                    }
                    else
                    {
                        // get color average as brightness
                        int R = c.getRed();
                        int G = c.getGreen();
                        int B = c.getBlue();
                        int brightness = (R+G+B)/3;
                        if (brightness>threshold)
                        {
                            grayscale = brightness;
                            shown = true;
                        }
                    }
                    boolean forced = false;
                    if (x-xStart>126) forced = true; // maximal size of a vector!

                    if ((forced) || (((oldShown != shown) || (oldGrayscale != grayscale)) && (oldGrayscale != -1))) // add old only if not first vector
                    {
                        // add old vector
                        GFXVector v = new GFXVector();
                        v.start.x(xStart-(targetWidth/2));
                        v.start.y(-yStart+(targetHeight/2));
                        v.end.x(x-1-(targetWidth/2));
                        v.end.y(-yStart+(targetHeight/2));
                        v.pattern = 0xff;
                        v.setIntensity(oldGrayscale);
                        xStart = x-1;
                        vectorRow.add(v);
                    }
                    oldShown = shown;
                    oldGrayscale = grayscale;
                }

                // add old vector - allways!
                GFXVector v = new GFXVector();
                v.start.x(xStart-(targetWidth/2));
                v.start.y(-yStart+(targetHeight/2));
                v.end.x(targetWidth-1-(targetWidth/2));
                v.end.y(-yStart+(targetHeight/2));
                v.pattern = 0xff;
                v.setIntensity(oldGrayscale);
                vectorRow.add(v);
            }
        }
        return true;
    }

    void buildVertical()
    {
        BufferedImage orgImage = singleImagePanel1.getImage();
        int targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
        int targetHeight = de.malban.util.UtilityString.IntX(jTextFieldVectorHeight.getText(), orgImage.getHeight());

        int startX = de.malban.util.UtilityString.IntX(jTextFieldStartX.getText(), 0);
        int startY = de.malban.util.UtilityString.IntX(jTextFieldStartY.getText(), 0);
        int width = de.malban.util.UtilityString.IntX(jTextFieldWidth.getText(), orgImage.getWidth()-startX);
        int height = de.malban.util.UtilityString.IntX(jTextFieldHeight.getText(), orgImage.getHeight()-startY);
        
        orgImage = singleImagePanel1.getSelection(startX, startY, width, height).image;
        
        
        // only bytes in the image above a threshold are
        // counted as pixels
        
        BufferedImage scaledImage = ImageCache.getImageCache().getDerivatScale(orgImage, targetWidth, targetHeight);
        
        shiftRegCols= new ArrayList[targetWidth];
        vectorCols= new ArrayList[targetWidth];

        int colHeight = 0;
        if (!jCheckBoxIncludeBrightness.isSelected())
        {
            for (int x=0;x<targetWidth;x++)
            {
                colHeight = 0;
                ArrayList<Integer> shiftRegCol = new ArrayList<Integer>();

                // next shift reg value - 8 bit = 8 pixels of image
                int shiftReg = 0;

                // only pixels above the threshold count to average brightness
                // brightness can only be set every 8 "pixels" -> one shift reg!
                int bitCount = 0;
                for (int y=0;y<targetHeight;y++)
                {
                    int rgba;
                    int usedX =x;
                    int usedY =y;
                    if (jCheckBoxXMirror.isSelected())
                        usedX = targetWidth-1-x;
                    if (jCheckBoxYMirror.isSelected())
                        usedY = targetHeight-1-y;

                    rgba =scaledImage.getRGB(usedX, usedY);
                    boolean bit= getBitFromColor(rgba);

                    int mulValue = de.malban.util.UtilityString.IntX(jTextFieldMultiplyBits.getText(),1);

                    for (int ttt = 0; ttt<mulValue;ttt++)
                    {
                        if (bit) shiftReg++;
                        bitCount++;
                        if (bitCount == 8)
                        {
                            shiftRegCol.add(shiftReg);
                            colHeight++;
                            shiftReg = 0;
                            bitCount = 0;

                            if (jCheckBoxAssume9Bit.isSelected())
                            {
                                // simple overstep one pixel
                                // the last pixel from above will be repeated 
                                y++;
                            }
                        }
                        shiftReg = shiftReg << 1;
                    }
                }
                while (bitCount<8)
                {
                    bitCount++;
                    if (bitCount == 8)
                    {
                        shiftRegCol.add(shiftReg);
                        colHeight++;
                    }
                    shiftReg = shiftReg << 1;
                }
                shiftRegCols[x] = shiftRegCol;
            }
        }
    }

    boolean getBitFromColor(int rgba)
    {
        int threshold = jSliderThreshold.getValue();
        boolean bit = false;
        Color c = new Color(rgba);
        if (jRadioButtonAlphaAsGrayscale.isSelected())
        {
            // get alpha value
            int A = (rgba >> 24) & 0xFF;
            if (A>threshold)
            {
                bit = true;
            }
        }
        else
        {
            // get color average as brightness
            int R = c.getRed();
            int G = c.getGreen();
            int B = c.getBlue();
            int brightness = (R+G+B)/3;
            if (brightness>threshold)
            {
                bit = true;
            }
        }
        if (jCheckBoxInvert.isSelected())
            bit = !bit;
        return bit;
    }



    void displayVectors()
    {
        singleVectorPanel1.setSharedRepaint(false);
        singleVectorPanel1.setDrawVectorEnds(false);
        BufferedImage orgImage = singleImagePanel1.getImage();
        int targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
        int targetHeight = de.malban.util.UtilityString.IntX(jTextFieldVectorHeight.getText(), orgImage.getHeight());
        singleVectorPanel1.clearVectors();
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            if (!jCheckBoxIncludeBrightness.isSelected())
            {
                int vy = 0 +(targetHeight/2);  
                for (int y=0; y<targetHeight; y++)
                {
                    int vx = 0 -(targetWidth/2);             
                    ArrayList<Integer> shiftRegRow = shiftRegRows[y];
                    for (int x=0; x<shiftRegRow.size(); x++)
                    {
                        int brightness = 255;
                        int shiftreg = shiftRegRow.get(x);
                        for (int b=0; b<8; b++)
                        {
                            boolean bit = ((shiftreg&0x80)!=0);
                            shiftreg = shiftreg<<1;
                            int pattern = bit?255:0;

                            GFXVector v = new GFXVector();
                            v.start.x(vx);
                            v.start.y(vy);
                            v.end.x(vx+1);
                            v.end.y(vy);
                            v.pattern = pattern;
                            v.setIntensity(brightness);
                            singleVectorPanel1.addForegroundVector(v);
                            vx+=1;

                            if (jCheckBoxAssume9Bit.isSelected())
                            {
                                if (b == 7)
                                {
                                    v = new GFXVector();
                                    v.start.x(vx);
                                    v.start.y(vy);
                                    v.end.x(vx+1);
                                    v.end.y(vy);
                                    v.pattern = pattern;
                                    v.setIntensity(brightness);
                                    singleVectorPanel1.addForegroundVector(v);
                                    vx+=1;
                                }
                            }
                        }
                    }
                    vy--;
                }                
            }
            else
            {
                for (int y=0; y<targetHeight; y++)
                {
                    ArrayList<GFXVector> vectorRow = vectorRows[y];
                    for (GFXVector v: vectorRow)
                    {
                        singleVectorPanel1.addForegroundVector(v);
                    }
                }                
            }
        }
        else
        {
            if (!jCheckBoxIncludeBrightness.isSelected())
            {
                int vx = 0 -(targetWidth/2);             
                for (int x=0; x<targetWidth; x++)
                {
                    ArrayList<Integer> shiftRegCol = shiftRegCols[x];
                    int vy = 0 +(targetHeight/2);  
                    for (int y=0; y<shiftRegCol.size(); y++)
                    {
                        int brightness = 255;
                        int shiftreg = shiftRegCol.get(y);
                        for (int b=0; b<8; b++)
                        {
                            boolean bit = ((shiftreg&0x80)!=0);
                            shiftreg = shiftreg<<1;
                            int pattern = bit?255:0;

                            GFXVector v = new GFXVector();
                            v.start.x(vx);
                            v.start.y(vy);
                            v.end.x(vx);
                            v.end.y(vy+1);
                            v.pattern = pattern;
                            v.setIntensity(brightness);
                            singleVectorPanel1.addForegroundVector(v);
                            vy+=1;

                            if (jCheckBoxAssume9Bit.isSelected())
                            {
                                if (b == 7)
                                {
                                    v = new GFXVector();
                                    v.start.x(vx);
                                    v.start.y(vy);
                                    v.end.x(vx);
                                    v.end.y(vy+1);
                                    v.pattern = pattern;
                                    v.setIntensity(brightness);
                                    singleVectorPanel1.addForegroundVector(v);
                                    vy+=1;
                                }
                            }
                        }
                    }
                    vx++;
                }                
            }
        }
            
        singleVectorPanel1.setSharedRepaint(true);
    }
    void createASMFile()
    {
        if (orgName == null) return;
        if (orgName.length() == 0) return;

   
        
        if (!modal)
        {
            // ask where to save!
            InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();
            fc.setDialogTitle("Select save directory");
            fc.setCurrentDirectory(new java.io.File(Global.mainPathPrefix));
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int r = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
            if (r != InternalFrameFileChoser.APPROVE_OPTION) return;
            String lastPath = fc.getSelectedFile().getAbsolutePath();

            Path p = Paths.get(lastPath);
            String newName = p.toString();
            if (!newName.endsWith(File.separator)) newName+=File.separator;
            File f = new File(orgName);
            String nameOnly = f.getName();
            newName = newName + nameOnly;
            orgName = newName;
        }
        
        
        String baseName = orgName;
        int li = baseName.lastIndexOf(".");
        if (li>=0) 
            baseName = baseName.substring(0,li);

        String basebaseName = baseName;
        if (basebaseName.contains(File.separator))
        {
            basebaseName = basebaseName.substring(basebaseName.lastIndexOf(File.separator)+1);
        }
        
        StringBuffer out=new StringBuffer();
        BufferedImage orgImage = singleImagePanel1.getImage();
        int targetHeight = de.malban.util.UtilityString.IntX(jTextFieldVectorHeight.getText(), orgImage.getHeight());
        int targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
        if (targetHeight == 0) return;
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            singleVectorPanel1.clearVectors();
            if (jCheckBoxIncludeBrightness.isSelected())
            {
                out.append("; format:\n");
                out.append("; brightness, deltx, brightness, deltx...brightness, deltx,  -Value [negative brightness]\n");
                out.append("; ....\n");
                out.append("; brightness, deltx, brightness, deltx...brightness, deltx,  -Value [negative brightness]\n");
                out.append("; -Value [negative brightness]\n");
                out.append("; every second row is a 'backward' row\n");
                out.append("; backward rows have the direction reversed!\n");
                out.append("VScale equ 1\n");
                String vScaleString = "*VScale";
                out.append(basebaseName+"_data:\n");
              
                for (int y=0; y<targetHeight; y++)
                {
                    ArrayList<GFXVector> vectorRow = vectorRows[y];
                    out.append(" db ");
                    boolean start = true;
                    if ((y%2) == 0)
                    {
                        for (GFXVector v: vectorRow)
                        {
                            if (!start)
                                out.append(", ");
                            out.append(String.format("$%02X", v.getIntensity()/2));
                            int xvalue = (int)(v.end.x()-v.start.x()) &0xff;
                            if (xvalue >127)
                            {
                                xvalue -= 256;
                                out.append(", -"+  String.format("$%02X", -xvalue)+vScaleString);
                            }
                            else
                            {
                                out.append(",  "+  String.format("$%02X", xvalue)+vScaleString);
                            }
                            start = false;
                        }
                        out.append(", $ff ; one row of forward data\n");
                    }
                    else
                    {
                        for (int i=vectorRow.size()-1; i>=0; i--)
                        {
                            GFXVector v = vectorRow.get(i);
                            if (!start)
                                out.append(", ");
                            out.append(String.format("$%02X", v.getIntensity()/2));
                            int xvalue = (((int)(v.start.x()-v.end.x())) & 0xff );
                            if (xvalue >127)
                            {
                                xvalue -= 256;
                                out.append(", -"+  String.format("$%02X", -xvalue)+vScaleString);
                            }
                            else
                            {
                                out.append(",  "+  String.format("$%02X", xvalue)+vScaleString);
                            }
                            start = false;
                        }
                        out.append(", $ff ; one row of backward data\n");
                    }
                }                
                out.append(" db $ff ; end of data \n");
                
            }
            else
            {
                out.append("; format:\n");
                out.append("; height, width\n");
                out.append("; shiftreg, ...,  shiftreg\n");
                out.append("; ....\n");
                out.append("; shiftreg, ...,  shiftreg\n");
                out.append("; \n");
                if (jCheckBoxBiDirectionalData.isSelected())
                {
                    out.append("; every second row is a 'backward' row\n");
                    out.append("; backward rows have the direction AND the bits reversed!\n");
                }
                
                out.append(basebaseName+"_data:\n");
                out.append(" db "+String.format("$%02X", targetHeight)+", "+ String.format("$%02X ", shiftRegRows[0].size()) +"\n");
                for (int y=0; y<targetHeight; y++)
                {
                    if (jCheckBoxBiDirectionalData.isSelected())
                    {
                        if ((y%2) == 0)
                        {
                            out.append(" db ");
                            ArrayList<Integer> shiftRegRow = shiftRegRows[y];
                            for (int x=0; x<shiftRegRow.size(); x++)
                            {
                                int shiftreg = shiftRegRow.get(x);
//System.out.print(""+shiftreg);

                                if (x!=0) out.append(", ");
                                out.append("%"+String.format("%8s", Integer.toBinaryString(shiftreg)).replace(" ", "0"));
                            }
                            out.append("; forward\n");
                        }
                        else
                        {
                            out.append(" db ");
                            ArrayList<Integer> shiftRegRow = shiftRegRows[y];
                            for (int x=shiftRegRow.size()-1; x>=0; x--)
                            {
                                int shiftreg = shiftRegRow.get(x);
                                shiftreg = bitReverse8(shiftreg);
                                if (x!=(shiftRegRow.size()-1)) out.append(", ");
                                out.append("%"+String.format("%8s", Integer.toBinaryString(shiftreg)).replace(" ", "0"));

                            }
                            out.append("; backward\n");
                        }
                    }
                    else
                    {
                        out.append(" db ");
                        ArrayList<Integer> shiftRegRow = shiftRegRows[y];
                        for (int x=0; x<shiftRegRow.size(); x++)
                        {
                            int shiftreg = shiftRegRow.get(x);
//System.out.print(""+shiftreg);
                            if (x!=0) out.append(", ");
                            out.append("%"+String.format("%8s", Integer.toBinaryString(shiftreg)).replace(" ", "0"));
                        }
                        out.append("; forward\n");
                    }
//System.out.println("");

                }
                
                
            }
        }
        else
        {
            singleVectorPanel1.clearVectors();
            out.append("; format:\n");
            out.append("; height, width\n");
            out.append("; shiftreg, ...,  shiftreg\n");
            out.append("; ....\n");
            out.append("; shiftreg, ...,  shiftreg\n");
            out.append("; \n");
//            if (jCheckBoxBiDirectionalData.isSelected())
//            {
//                out.append("; every second row is a 'backward' row\n");
//                out.append("; backward rows have the direction AND the bits reversed!\n");
//            }

            out.append(basebaseName+"_data:\n");
            out.append(" db "+String.format("$%02X", targetWidth)+", "+ String.format("$%02X ", shiftRegCols[0].size()) +"\n");
            for (int x=0; x<targetWidth; x++)
            {
/*                
                if (jCheckBoxBiDirectionalData.isSelected())
                {
                    if ((x%2) == 0)
                    {
                        out.append(" db ");
                        ArrayList<Integer> shiftRegCol = shiftRegCols[x];
                        for (int y=0; y<shiftRegCol.size(); y++)
                        {
                            int shiftreg = shiftRegCol.get(y);

                            if (y!=0) out.append(", ");
                            out.append("%"+String.format("%8s", Integer.toBinaryString(shiftreg)).replace(" ", "0"));
                        }
                        out.append("; forward\n");
                    }
                    else
                    {
                        out.append(" db ");
                        ArrayList<Integer> shiftRegCol = shiftRegCols[x];
                        for (int y=shiftRegCol.size()-1; y>=0; y--)
                        {
                            int shiftreg = shiftRegCol.get(y);
                            shiftreg = bitReverse8(shiftreg);
                            if (y!=(shiftRegCol.size()-1)) out.append(", ");
                            out.append("%"+String.format("%8s", Integer.toBinaryString(shiftreg)).replace(" ", "0"));
                        }
                        out.append("; backward\n");
                    }
                }
                else
*/
                {
                    out.append(" db ");
                    ArrayList<Integer> shiftRegCol = shiftRegCols[x];
                    for (int y=0; y<shiftRegCol.size(); y++)
                    {
                        int shiftreg = shiftRegCol.get(y);

                        if (y!=0) out.append(", ");
                        out.append("%"+String.format("%8s", Integer.toBinaryString(shiftreg)).replace(" ", "0"));
                    }
                    out.append("; forward\n");
                }
            }
        }









        String asm = out.toString();
        
        String fileNameData = baseName + ".asm";
        String dataLabel = basebaseName+"_data";
        
        String pathName = Paths.get(fileNameData).getParent().toString();
        
        if (jCheckBoxGenerateData.isEnabled())
        {
            de.malban.util.UtilityFiles.createTextFile(fileNameData, asm);
        }
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            if (jCheckBoxGenerateExampleCode.isEnabled())
            {
                Path template;
                if (!jCheckBoxBiDirectionalData.isSelected())
                {
                    template = Paths.get(Global.mainPathPrefix, "template", "rasterDrawUni.template");
                    de.malban.util.UtilityFiles.copyOneFile(template.toString(), pathName+File.separator+"rasterDraw.asm");

                    Path include = Paths.get(Global.mainPathPrefix, "template", "VECTREX.I");
                    de.malban.util.UtilityFiles.copyOneFile(include.toString(), pathName+File.separator+ "VECTREX.I");

                    template = Paths.get(Global.mainPathPrefix, "template", "rasterExampleMainUni.template");            
                }
                else
                {
                    template = Paths.get(Global.mainPathPrefix, "template", "rasterDraw.template");
                    de.malban.util.UtilityFiles.copyOneFile(template.toString(), pathName+File.separator+"rasterDraw.asm");

                    Path include = Paths.get(Global.mainPathPrefix, "template", "VECTREX.I");
                    de.malban.util.UtilityFiles.copyOneFile(include.toString(), pathName+File.separator+ "VECTREX.I");

                    template = Paths.get(Global.mainPathPrefix, "template", "rasterExampleMain.template");            
                }

                String exampleMain = de.malban.util.UtilityString.readTextFileToOneString(new File(template.toString()));

                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#DATAFILE#", basebaseName + ".asm");
                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#RASTERDATA#", dataLabel);

                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#WIDTH#", "$40");
                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#HEIGHT#", "10");
                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#XPOS#", "-$40");
                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#YPOS#", "10");
                de.malban.util.UtilityFiles.createTextFile(pathName+File.separator+basebaseName+"Main.asm", exampleMain);
            }
        }
        else
        {
            if (jCheckBoxGenerateExampleCode.isEnabled())
            {
                Path template;
//                if (!jCheckBoxBiDirectionalData.isSelected())
//                {
//                    template = Paths.get(".", "template", "rasterDrawUni.template");
//                    de.malban.util.UtilityFiles.copyOneFile(template.toString(), pathName+File.separator+"rasterDraw.asm");
//
//                    Path include = Paths.get(".", "template", "VECTREX.I");
//                    de.malban.util.UtilityFiles.copyOneFile(include.toString(), pathName+File.separator+ "VECTREX.I");
//
//                    template = Paths.get(".", "template", "rasterExampleMainUni.template");            
//                }
//                else
                {
                    template = Paths.get(Global.mainPathPrefix, "template", "rasterDrawVertical.template");
                    de.malban.util.UtilityFiles.copyOneFile(template.toString(), pathName+File.separator+"rasterDrawVertical.asm");

                    Path include = Paths.get(Global.mainPathPrefix, "template", "VECTREX.I");
                    de.malban.util.UtilityFiles.copyOneFile(include.toString(), pathName+File.separator+ "VECTREX.I");

                    template = Paths.get(Global.mainPathPrefix, "template", "rasterExampleVerticalMain.template");            
                }

                String exampleMain = de.malban.util.UtilityString.readTextFileToOneString(new File(template.toString()));

                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#DATAFILE#", basebaseName + ".asm");
                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#RASTERDATA#", dataLabel);

                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#WIDTH#", "$40");
                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#HEIGHT#", "120");
                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#XPOS#", "-$70");
                exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#YPOS#", "10");
                de.malban.util.UtilityFiles.createTextFile(pathName+File.separator+basebaseName+"Main.asm", exampleMain);
            }
        }

        if (!modal)
        {
            VediPanel.openInVedi(pathName+File.separator+basebaseName+"Main.asm");
        }
        
    }
    int bitReverse8(int shiftreg)
    {
        int ret = 0;
        for (int b = 0; b<8; b++)
        {
            ret = ret >>1;
            if ((shiftreg & 0x80) != 0) ret = ret | 0x80;
            shiftreg = shiftreg <<1;
        }
        return ret;
    }
    public void deIconified()  {}
















    
}
