/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.vide.vedi.peeper;

import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.gui.CSAMainFrame;
import de.malban.gui.Windowable;
import de.malban.gui.components.CSAView;
import de.malban.gui.components.ModalInternalFrame;
import static de.malban.vide.vedi.peeper.FilePeeper.peepers;
import de.muntjak.tinylookandfeel.Theme;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author malban
 */
public class PeepJPanel extends javax.swing.JPanel implements 
         Windowable{
    private int mClassSetting=0;
    PeepTableModel model = new PeepTableModel();

    private CSAView mParent = null;
    private javax.swing.JMenuItem mParentMenuItem = null;
    @Override
    public void closing()
    {
        deinit();
    }
    @Override
    public void setParentWindow(CSAView jpv)
    {
        mParent = jpv;
    }
    @Override public boolean isIcon()
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return false;
        return frame.getInternalFrame(this).isIcon();
    }
    @Override public void setIcon(boolean b)
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return;
        try
        {
            frame.getInternalFrame(this).setIcon(b);
        }
        catch (Throwable e){}
    }
    @Override
    public void setMenuItem(javax.swing.JMenuItem item)
    {
        mParentMenuItem = item;
        mParentMenuItem.setText("C: Peephole config");

    }
    @Override
    public javax.swing.JMenuItem getMenuItem()
    {
        return mParentMenuItem;
    }
    @Override
    public javax.swing.JPanel getPanel()
    {
        return this;
    }
    public void deinit()
    {
        removeUIListerner();
    }
    public void removeUIListerner()
    {
        UIManager.removePropertyChangeListener(pListener);
    }
    private PropertyChangeListener pListener = new PropertyChangeListener()
    {
        public void propertyChange(PropertyChangeEvent evt)
        {
            updateMyUI();
        }
    };
    void updateMyUI()
    {
        //SwingUtilities.updateComponentTreeUI(jPopupMenu1);
        //SwingUtilities.updateComponentTreeUI(jPopupMenuTree);
        //SwingUtilities.updateComponentTreeUI(jPopupMenuProjectProperties);
        int fontSize = Theme.textFieldFont.getFont().getSize();
        int rowHeight = fontSize+2;
        jTable1.setRowHeight(rowHeight);
    }
    public void deIconified()  {}
    /**
     * Creates new form PeepJPanel
     */
    public PeepJPanel() {
        initComponents();
        FilePeeper fp = new FilePeeper(); // init static
        jTable1.setModel(model);
        UIManager.addPropertyChangeListener(pListener);
        updateMyUI(); 
        
        ListSelectionModel peeperSelectionModel = jTable1.getSelectionModel();
        peeperSelectionModel.addListSelectionListener(new ListSelectionListener() 
        {
              public void valueChanged(ListSelectionEvent e) {
                peeperSelectionChanged();
              }
        }); 
        peepEditJPanel1.setParent(this);
        SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                clearFields();
            }
        } );
        
    }
    void refreshTable()
    {
        mClassSetting++;
        FilePeeper.reorder();
        jTable1.tableChanged(null);
        mClassSetting--;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonOk = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        peepEditJPanel1 = new de.malban.vide.vedi.peeper.PeepEditJPanel();
        jButtonSave1 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 45, Short.MAX_VALUE))
        );

        jButtonOk.setText("Ok");
        jButtonOk.setName("ok"); // NOI18N

        jButton1.setText("delete");
        jButton1.setToolTipText("delete selcted table entry");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("add");
        jButton2.setToolTipText("add one rule");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButtonSave1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_save.png"))); // NOI18N
        jButtonSave1.setToolTipText("save peepHole list");
        jButtonSave1.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSave1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSave1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOk))
            .addComponent(peepEditJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peepEditJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSave1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonOk)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSave1ActionPerformed
        FilePeeper.saveAsXML();
    }//GEN-LAST:event_jButtonSave1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selected = jTable1.getSelectedRow();
        if (selected != -1) 
        {
            peepers.remove(selected);
        }
        clearFields();
        refreshTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        PeepRule newRule = new PeepRule(peepers.size(), "","",0, new ArrayList<CombinedPeepRule>(), new ArrayList<OneResult>() );
        peepers.add(newRule);
        currentPeeper = newRule;
        setFields();
        refreshTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    ModalInternalFrame modelDialog;
    public static boolean showEditPeepProperties()
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        PeepJPanel panel = new PeepJPanel();
        
        
        
        ArrayList<JButton> eb= new ArrayList<JButton>();
        eb.add(panel.jButtonOk);
        ModalInternalFrame modal = new ModalInternalFrame("C: Peephole config", frame.getRootPane(), frame, panel,null, null , eb);

        
        panel.modelDialog = modal;
        modal.setVisible(true);
        String result = modal.getNamedExit();
        
        if (result.equals("ok"))
        {
            panel.saveChanges();
            return true;
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonSave1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private de.malban.vide.vedi.peeper.PeepEditJPanel peepEditJPanel1;
    // End of variables declaration//GEN-END:variables
    void saveChanges()
    {
        String filename =Global.mainPathPrefix+"xml"+File.separator+"VidePeepholes.xml";
        FilePeeper.saveAsXML(filename);
    }
    class PeepTableModel extends AbstractTableModel
    {
        private PeepTableModel()
        {
        }

        public int getRowCount()
        {
            if (peepers == null) return 0;
            return peepers.size();
        }
        public int getColumnCount()
        {
            return 4;
        }
        public Object getValueAt(int row, int col)
        {
            if (col == 0) 
            {
                return peepers.get(row).order;
            }
            if (col == 1) 
            {
                return ""+peepers.get(row).name;
            }
            if (col == 2) 
            {
                return ""+peepers.get(row).longName;
            }
            if (col == 3) 
            {
                return peepers.get(row).active;
            }
            return "";
        }
        public String getColumnName(int column) {

            if (column ==0) return "#";
            if (column ==1) return "short";
            if (column ==2) return "long";
            if (column ==3) return "active";
            return "";
        }
        // input data column
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex ==0) return Integer.class;
            if (columnIndex ==3) return Boolean.class;
            return String.class;
        }
        // input data column
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex == 3) return true;
            return false;
        }
        // input data column
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 3)
            {
                peepers.get(rowIndex).active = (Boolean)aValue;
            }
        }
    }        

    PeepRule currentPeeper = null;
    void peeperSelectionChanged()
    {
        if (mClassSetting>0) return;
        // select vertice
        int selected = jTable1.getSelectedRow();
        if (selected == -1) 
        {
            clearFields();
            return;
        }
        currentPeeper = peepers.get(selected);
        setFields();
    }
    void clearFields()
    {
        currentPeeper = null;
        setFields();
    }
    void setFields()
    {
        peepEditJPanel1.setPeepRule(currentPeeper);
    }

}
