package de.malban.vide.veccy;


import java.util.*;
import static de.malban.util.UtilityString.Int0;
import static de.malban.util.UtilityString.IntX;

public class LevelObjectDataPanel extends javax.swing.JPanel {
    private LevelObjectData mLevelObjectData = new LevelObjectData();
    private int mClassSetting=0;

    private GamePanel parent;
    
    public LevelObjectData getLevelObject()
    {
        return mLevelObjectData;
    }
    /** Creates new form LevelObjectDataPanel */
    public LevelObjectDataPanel(GamePanel p, LevelObjectData o) 
    {
        parent = p;
        mLevelObjectData = o;
        initComponents();
        setAllFromCurrent();
    }

    private void setAllFromCurrent() /* allneeded*/
    {
        mClassSetting++;
        jTextFieldName.setText(mLevelObjectData.mName);

        if ((mLevelObjectData.mType != null) && (mLevelObjectData.mType.length()>0))
            jComboBoxObjectType.setSelectedItem(mLevelObjectData.mType);
        updateObjectComboBox(mLevelObjectData.mType);

        jTextFieldposX.setText(""+mLevelObjectData.mxPos);
        jTextFieldposY.setText(""+mLevelObjectData.myPos);

        if (mLevelObjectData.mType.equals(ABORT))
        jComboBoxLevelObject.setSelectedItem(mLevelObjectData.mSpriteID);
//        jTextFieldVectorlistFile.setText(mLevelObjectData.mScene);
        
        jTextFieldMaxLifeInstances.setText(""+mLevelObjectData.mMaxLiveObjects);
        jCheckBoxLiveOnStart.setSelected(mLevelObjectData.mLiveOnInit);
        boolean enabled = true;
        if (mLevelObjectData.mType.equals("Background Scene")) enabled = false;
                
        jTextFieldposY.setEnabled(enabled);
        jTextFieldposX.setEnabled(enabled);
        jTextFieldMaxLifeInstances.setEnabled(enabled);
        jCheckBoxLiveOnStart.setEnabled(enabled);
        jLabel7.setEnabled(enabled);
        jLabel1.setEnabled(enabled);
                
                
        mClassSetting--;
    }

    private void readAllToCurrent() /* allneeded*/
    {
        mLevelObjectData.mName = jTextFieldName.getText();
        mLevelObjectData.mType = "Sprite";
        if (jComboBoxObjectType.getSelectedItem() != null)
            mLevelObjectData.mType = jComboBoxObjectType.getSelectedItem().toString();

        mLevelObjectData.mxPos = jTextFieldposX.getText();
        mLevelObjectData.myPos = jTextFieldposY.getText();

        mLevelObjectData.mMaxLiveObjects = IntX(jTextFieldMaxLifeInstances.getText(),1);
        mLevelObjectData.mLiveOnInit = jCheckBoxLiveOnStart.isSelected();
        
        mLevelObjectData.mSpriteID = "";
        if (jComboBoxLevelObject.getSelectedItem() != null)
        {
            mLevelObjectData.mSpriteID = jComboBoxLevelObject.getSelectedItem().toString();
            mLevelObjectData.mScene = jComboBoxLevelObject.getSelectedItem().toString();
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxObjectType = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldposY = new javax.swing.JTextField();
        jTextFieldposX = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButtonLoad2 = new javax.swing.JButton();
        jTextFieldVectorlistFile = new javax.swing.JTextField();
        jComboBoxLevelObject = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldMaxLifeInstances = new javax.swing.JTextField();
        jCheckBoxLiveOnStart = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Name");

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(19, 19, 19)
                .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSave)
                .addGap(31, 31, 31)
                .addComponent(jButtonDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3)
                .addComponent(jButtonSave)
                .addComponent(jButtonDelete))
        );

        jLabel6.setText("type");

        jComboBoxObjectType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sprite", "Background Scene", "YM File (not done)", "Arkos Tracker 1 (bin) (not done)", "Arkos Tracker 2 (aky asm) (not done)", "Foreground VList (not done)", "Global variable (not done)" }));
        jComboBoxObjectType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxObjectTypeActionPerformed(evt);
            }
        });

        jLabel7.setText("y, x");

        jTextFieldposY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldposY.setText("0");
        jTextFieldposY.setToolTipText("csv start positions y");
        jTextFieldposY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldposYFocusLost(evt);
            }
        });
        jTextFieldposY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldposYActionPerformed(evt);
            }
        });

        jTextFieldposX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldposX.setText("0");
        jTextFieldposX.setToolTipText("csv start positions x");
        jTextFieldposX.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldposXFocusLost(evt);
            }
        });
        jTextFieldposX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldposXActionPerformed(evt);
            }
        });

        jLabel8.setText("ID/Name/File");

        jButtonLoad2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_go.png"))); // NOI18N
        jButtonLoad2.setToolTipText("load animation");
        jButtonLoad2.setEnabled(false);
        jButtonLoad2.setMargin(new java.awt.Insets(0, 1, 0, -1));

        jTextFieldVectorlistFile.setEnabled(false);

        jComboBoxLevelObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLevelObjectActionPerformed(evt);
            }
        });

        jLabel1.setText("max life instances");

        jTextFieldMaxLifeInstances.setText("-1");
        jTextFieldMaxLifeInstances.setToolTipText("This is only check if >0!");

        jCheckBoxLiveOnStart.setText("live on start");
        jCheckBoxLiveOnStart.setToolTipText("");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jComboBoxObjectType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8))
                            .addComponent(jTextFieldposY, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jComboBoxLevelObject, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldVectorlistFile, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonLoad2))
                            .addComponent(jTextFieldposX)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMaxLifeInstances, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxLiveOnStart)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jComboBoxObjectType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(jComboBoxLevelObject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldVectorlistFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonLoad2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldposX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldposY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldMaxLifeInstances, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxLiveOnStart)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        readAllToCurrent();
        mClassSetting++;
        parent.saveLevelObject(mLevelObjectData);
        mClassSetting--;
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        readAllToCurrent();
        mClassSetting++;
        parent.removeLevelObject(mLevelObjectData);
        mLevelObjectData = null;
        parent = null;
        mClassSetting--;
}//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jComboBoxObjectTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxObjectTypeActionPerformed
        
        if (mClassSetting>0) return;
        mClassSetting++;
        if (jComboBoxObjectType.getSelectedItem() != null)
        {
            if (jComboBoxObjectType.getSelectedItem().toString().equals("Sprite"))
            {
                updateObjectComboBox(jComboBoxObjectType.getSelectedItem().toString());
                jTextFieldposY.setEnabled(true);
                jTextFieldposX.setEnabled(true);
                jTextFieldMaxLifeInstances.setEnabled(true);
                jCheckBoxLiveOnStart.setEnabled(true);
                jLabel7.setEnabled(true);
                jLabel1.setEnabled(true);
            }
            else if (jComboBoxObjectType.getSelectedItem().toString().equals("Background Scene"))
            {
                updateObjectComboBox(jComboBoxObjectType.getSelectedItem().toString());
                jTextFieldposY.setEnabled(false);
                jTextFieldposX.setEnabled(false);
                jTextFieldMaxLifeInstances.setEnabled(false);
                jCheckBoxLiveOnStart.setEnabled(false);
                jLabel7.setEnabled(false);
                jLabel1.setEnabled(false);
            }
        }
        else
        {
        }
        mClassSetting--;
    }//GEN-LAST:event_jComboBoxObjectTypeActionPerformed

    private void jTextFieldposYFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldposYFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldposYFocusLost

    private void jTextFieldposYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldposYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldposYActionPerformed

    private void jTextFieldposXFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldposXFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldposXFocusLost

    private void jTextFieldposXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldposXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldposXActionPerformed

    private void jComboBoxLevelObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLevelObjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxLevelObjectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonLoad2;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxLiveOnStart;
    private javax.swing.JComboBox jComboBoxLevelObject;
    private javax.swing.JComboBox<String> jComboBoxObjectType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextFieldMaxLifeInstances;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldVectorlistFile;
    private javax.swing.JTextField jTextFieldposX;
    private javax.swing.JTextField jTextFieldposY;
    // End of variables declaration//GEN-END:variables

    public void updateObjectComboBox(String type)
    {
        if (mLevelObjectData.mType == null) return;
        
        mClassSetting++;
        if (type.equals("Background Scene"))
        {
            BackGroundScenePool sceneDataPool = new BackGroundScenePool();
            Collection<String> collectionKlasse = sceneDataPool.getKlassenHashMap().values();
            Iterator<String> iterKlasse = collectionKlasse.iterator();
            int i = 0;
            String klasse = "AllScenes";

            Collection<BackGroundScene> colC = sceneDataPool.getMapForKlasse(klasse).values();
            Iterator<BackGroundScene> iterC = colC.iterator();
            String oldValue = "";
            
            if (jComboBoxLevelObject.getSelectedItem() != null)
                oldValue = jComboBoxLevelObject.getSelectedItem().toString();
            
            if (oldValue.length()==0)
                oldValue = mLevelObjectData.mScene;

            jComboBoxLevelObject.removeAllItems();


            ArrayList items = new ArrayList();
            boolean found=false;
            while (iterC.hasNext())
            {
                BackGroundScene item = iterC.next();
                items.add(item.mName);
            }
            Collections.sort(items, new Comparator<String>()
            {
               public int compare(String o1, String o2)
               {
                  return o1.compareToIgnoreCase(o2);
               }
            } );        
            for (int ii=0;ii<items.size(); ii++)
            {
                String item = (String) items.get(ii);
                jComboBoxLevelObject.addItem(item);
                if (item.equals(oldValue)) found = true;
            }




            if ((oldValue.length() >0) && (found))
            {
                jComboBoxLevelObject.setSelectedItem(oldValue);
            }
        }
        else //if (type.equals("Sprite")) 
        {
            SpriteDataPool spriteDataPool = new SpriteDataPool();
            Collection<String> collectionKlasse = spriteDataPool.getKlassenHashMap().values();
            Iterator<String> iterKlasse = collectionKlasse.iterator();
            int i = 0;
            String klasse = "AllSprites";

            Collection<SpriteData> colC = spriteDataPool.getMapForKlasse(klasse).values();
            Iterator<SpriteData> iterC = colC.iterator();
            String oldValue = "";
            if (jComboBoxLevelObject.getSelectedItem() != null)
                oldValue = jComboBoxLevelObject.getSelectedItem().toString();
            if (oldValue.length()==0)
                oldValue = mLevelObjectData.mSpriteID;


            jComboBoxLevelObject.removeAllItems();
            
            
            
            ArrayList items = new ArrayList();
            boolean found=false;
            while (iterC.hasNext())
            {
                SpriteData item = iterC.next();
                items.add(item.mName);
            }
            Collections.sort(items, new Comparator<String>()
            {
               public int compare(String o1, String o2)
               {
                  return o1.compareToIgnoreCase(o2);
               }
            } );        
            for (int ii=0;ii<items.size(); ii++)
            {
                String item = (String) items.get(ii);
                jComboBoxLevelObject.addItem(item);
                if (item.equals(oldValue)) found = true;
            }
            
            if ((oldValue.length() >0) && (found))
            {
                jComboBoxLevelObject.setSelectedItem(oldValue);
            }
        }
        mClassSetting--;
    }
    
}
