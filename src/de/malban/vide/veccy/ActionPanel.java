/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package de.malban.vide.veccy;

import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.graphics.GFXVector;
import de.malban.graphics.GFXVectorAnimation;
import de.malban.graphics.GFXVectorList;
import de.malban.graphics.Vertex;
import de.malban.gui.dialogs.InternalFrameFileChoser;
import static de.malban.gui.panels.LogPanel.WARN;
import static de.malban.util.UtilityString.IntX;
import static de.malban.util.UtilityString.Int0;
import static de.malban.util.UtilityString.replace;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.Vector;
import javax.swing.AbstractCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author salchr
 */
public class ActionPanel extends javax.swing.JPanel {

    ActionTriggerDataPool mTriggerPool = new ActionTriggerDataPool();
    ActionResultDataPool mResultPool = new ActionResultDataPool();

    private ActionNewData data = new ActionNewData();
    private ActionTriggerData triggers = new ActionTriggerData();
    private ActionResultData results = new ActionResultData();
    private SpriteData sprite = new SpriteData();

    private GFXVectorAnimation currentAnimation = new GFXVectorAnimation();
    private int inGuiUpdate=0;
    int currentEventRow = -1;
    /**
     * Creates new form ActionPanel
     */
    public ActionPanel() {
        initComponents();
        actionAnimation.setSingleRepaint(true);
        actionAnimation.setScale(40);
        actionAnimation.setAngleX(0);
        actionAnimation.setAngleY(0);
        actionAnimation.setAngleZ(0);
        actionAnimation.setAxisAngleX(0);
        actionAnimation.setAxisAngleY(0);
        actionAnimation.setAxisAngleZ(0);
        actionBoundingBox.setSingleRepaint(true);
        actionBoundingBox.setScale(40);
        actionBoundingBox.setAngleX(0);
        actionBoundingBox.setAngleY(0);
        actionBoundingBox.setAngleZ(0);
        actionBoundingBox.setAxisAngleX(0);
        actionBoundingBox.setAxisAngleY(0);
        actionBoundingBox.setAxisAngleZ(0);
        jSliderSourceScaleStateChanged(null);
        
        tableSetup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jCheckBox1 = new javax.swing.JCheckBox();
        actionAnimation = new de.malban.graphics.Single3dDisplayPanel();
        jTextFieldAnimationName = new javax.swing.JTextField();
        jButtonLoad2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSliderSourceScale = new javax.swing.JSlider();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldActionId = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldWhileActiveChangeY = new javax.swing.JTextField();
        jTextFieldWhileActiveChangeX = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jCheckBoxSoundLoop = new javax.swing.JCheckBox();
        jTextFieldSoundName = new javax.swing.JTextField();
        jButtonLoad3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jComboBoxBehaviour = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePositioningTable = new javax.swing.JTable();
        jButtonDeleteLastPosRow = new javax.swing.JButton();
        jButtonNewPosRow = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEventTable = new javax.swing.JTable();
        jButtonAddEvent = new javax.swing.JButton();
        jButtonRemoveEvent = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        actionBoundingBox = new de.malban.graphics.Single3dDisplayPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextFieldBoundingBoxOffsetY = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableDeltaTable = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxTextType = new javax.swing.JComboBox<>();
        jTextFieldtextHeight = new javax.swing.JTextField();
        jTextFieldtextWidth = new javax.swing.JTextField();
        jTextFieldBoundingBoxOffsetX = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldIntensity = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaText = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        jButtonAddTrigger = new javax.swing.JButton();
        jButtonRemoveTrigger = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableTriggerTable = new javax.swing.JTable();
        jButtonAddResult = new javax.swing.JButton();
        jButtonRemoveResult = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableResultTable = new javax.swing.JTable();

        jCheckBox1.setText("jCheckBox1");

        actionAnimation.setMaximumSize(new java.awt.Dimension(150, 150));
        actionAnimation.setMinimumSize(new java.awt.Dimension(150, 150));

        javax.swing.GroupLayout actionAnimationLayout = new javax.swing.GroupLayout(actionAnimation);
        actionAnimation.setLayout(actionAnimationLayout);
        actionAnimationLayout.setHorizontalGroup(
            actionAnimationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        actionAnimationLayout.setVerticalGroup(
            actionAnimationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTextFieldAnimationName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAnimationNameActionPerformed(evt);
            }
        });

        jButtonLoad2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_go.png"))); // NOI18N
        jButtonLoad2.setToolTipText("load animation");
        jButtonLoad2.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonLoad2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoad2ActionPerformed(evt);
            }
        });

        jLabel3.setText("animation file");

        jSliderSourceScale.setMajorTickSpacing(1);
        jSliderSourceScale.setMaximum(50);
        jSliderSourceScale.setMinimum(1);
        jSliderSourceScale.setMinorTickSpacing(1);
        jSliderSourceScale.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderSourceScale.setValue(20);
        jSliderSourceScale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSourceScaleStateChanged(evt);
            }
        });

        jLabel13.setText("ID");

        jLabel14.setText("delta: y, x");
        jLabel14.setToolTipText("while the action is active change y and x position");

        jTextFieldWhileActiveChangeY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldWhileActiveChangeY.setText("0");
        jTextFieldWhileActiveChangeY.setToolTipText("update position y while active");
        jTextFieldWhileActiveChangeY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldWhileActiveChangeYFocusLost(evt);
            }
        });
        jTextFieldWhileActiveChangeY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldWhileActiveChangeYActionPerformed(evt);
            }
        });

        jTextFieldWhileActiveChangeX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldWhileActiveChangeX.setText("0");
        jTextFieldWhileActiveChangeX.setToolTipText("update position x while active");
        jTextFieldWhileActiveChangeX.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldWhileActiveChangeXFocusLost(evt);
            }
        });
        jTextFieldWhileActiveChangeX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldWhileActiveChangeXActionPerformed(evt);
            }
        });

        jLabel16.setText("sound (afx)");

        jCheckBoxSoundLoop.setText("loop");

        jTextFieldSoundName.setToolTipText("ym\naks (from arkos tracker 1)\n??? (universal arkos tracker 2)\nafx \n\n");
        jTextFieldSoundName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSoundNameActionPerformed(evt);
            }
        });

        jButtonLoad3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_go.png"))); // NOI18N
        jButtonLoad3.setToolTipText("load animation");
        jButtonLoad3.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonLoad3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoad3ActionPerformed(evt);
            }
        });

        jButton1.setText("play");
        jButton1.setEnabled(false);

        jComboBoxBehaviour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "player 1 controlled", "player 2 controlled", "fixed position", "fixed movement (not done)", "parent direction", "target player 1", "track player 1 (not done)", "follow sprite", "sprite", "patrol", "text", "trigger only" }));

        jLabel17.setText("behaviour");

        jLabel18.setText("positioning");

        jTablePositioningTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTablePositioningTable);

        jButtonDeleteLastPosRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/delete.png"))); // NOI18N
        jButtonDeleteLastPosRow.setToolTipText("Removes the last row of the positions table");
        jButtonDeleteLastPosRow.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonDeleteLastPosRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteLastPosRowActionPerformed(evt);
            }
        });

        jButtonNewPosRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/add.png"))); // NOI18N
        jButtonNewPosRow.setToolTipText("add one row to positions table");
        jButtonNewPosRow.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonNewPosRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewPosRowActionPerformed(evt);
            }
        });

        jTableEventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableEventTable.setToolTipText("<html>\nFor -> y, x<bR>\na value is possible<bR>\n++, -- is possible <bR>\n+=x, -=x is possible for x < 10<bR>\nx is possible - no change <bR>\n=xxx is possible - a global 8 bit variable<bR>\n</html>");
        jTableEventTable.getTableHeader().setResizingAllowed(false);
        jTableEventTable.getTableHeader().setReorderingAllowed(false);
        jTableEventTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableEventTableMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTableEventTable);

        jButtonAddEvent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/add.png"))); // NOI18N
        jButtonAddEvent.setToolTipText("add one trigger");
        jButtonAddEvent.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonAddEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEventActionPerformed(evt);
            }
        });

        jButtonRemoveEvent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/delete.png"))); // NOI18N
        jButtonRemoveEvent.setToolTipText("remove the selected  trigger");
        jButtonRemoveEvent.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonRemoveEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveEventActionPerformed(evt);
            }
        });

        jLabel19.setText("event");

        actionBoundingBox.setMaximumSize(new java.awt.Dimension(150, 150));
        actionBoundingBox.setMinimumSize(new java.awt.Dimension(150, 150));

        javax.swing.GroupLayout actionBoundingBoxLayout = new javax.swing.GroupLayout(actionBoundingBox);
        actionBoundingBox.setLayout(actionBoundingBoxLayout);
        actionBoundingBoxLayout.setHorizontalGroup(
            actionBoundingBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        actionBoundingBoxLayout.setVerticalGroup(
            actionBoundingBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel15.setText("bounding box");

        jLabel20.setText("offset");

        jTextFieldBoundingBoxOffsetY.setText("0");
        jTextFieldBoundingBoxOffsetY.setToolTipText("bounding box manual delta Y");
        jTextFieldBoundingBoxOffsetY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldBoundingBoxOffsetYFocusLost(evt);
            }
        });
        jTextFieldBoundingBoxOffsetY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBoundingBoxOffsetYActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);

        buttonGroup1.add(jRadioButton2);

        jTableDeltaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTableDeltaTable);

        jLabel21.setText("(per step)");
        jLabel21.setToolTipText("while the action is active change y and x position");

        jLabel1.setText("text");

        jComboBoxTextType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5 font", "standard font", "vector (not done)" }));

        jTextFieldtextHeight.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldtextHeight.setText("2");
        jTextFieldtextHeight.setToolTipText("text height");
        jTextFieldtextHeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldtextHeightFocusLost(evt);
            }
        });
        jTextFieldtextHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldtextHeightActionPerformed(evt);
            }
        });

        jTextFieldtextWidth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldtextWidth.setText("50");
        jTextFieldtextWidth.setToolTipText("text width");
        jTextFieldtextWidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldtextWidthFocusLost(evt);
            }
        });
        jTextFieldtextWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldtextWidthActionPerformed(evt);
            }
        });

        jTextFieldBoundingBoxOffsetX.setText("0");
        jTextFieldBoundingBoxOffsetX.setToolTipText("bounding box manual delta X");
        jTextFieldBoundingBoxOffsetX.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldBoundingBoxOffsetXFocusLost(evt);
            }
        });
        jTextFieldBoundingBoxOffsetX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBoundingBoxOffsetXActionPerformed(evt);
            }
        });

        jLabel2.setText("intensity ");

        jTextFieldIntensity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldIntensity.setToolTipText("if empty -> intensity will not be used especially for this action");
        jTextFieldIntensity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldIntensityFocusLost(evt);
            }
        });
        jTextFieldIntensity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIntensityActionPerformed(evt);
            }
        });

        jTextAreaText.setColumns(20);
        jTextAreaText.setRows(5);
        jScrollPane4.setViewportView(jTextAreaText);

        jLabel22.setText("trigger");

        jButtonAddTrigger.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/add.png"))); // NOI18N
        jButtonAddTrigger.setToolTipText("add one trigger");
        jButtonAddTrigger.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonAddTrigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTriggerActionPerformed(evt);
            }
        });

        jButtonRemoveTrigger.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/delete.png"))); // NOI18N
        jButtonRemoveTrigger.setToolTipText("remove the selected  trigger");
        jButtonRemoveTrigger.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonRemoveTrigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveTriggerActionPerformed(evt);
            }
        });

        jTableTriggerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableTriggerTable.setToolTipText("<html>\nFor -> y, x<bR>\na value is possible<bR>\n++, -- is possible <bR>\n+=x, -=x is possible for x < 10<bR>\nx is possible - no change <bR>\n=xxx is possible - a global 8 bit variable<bR>\n</html>");
        jTableTriggerTable.getTableHeader().setResizingAllowed(false);
        jTableTriggerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTableTriggerTable);

        jButtonAddResult.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/add.png"))); // NOI18N
        jButtonAddResult.setToolTipText("add one trigger");
        jButtonAddResult.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonAddResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddResultActionPerformed(evt);
            }
        });

        jButtonRemoveResult.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/delete.png"))); // NOI18N
        jButtonRemoveResult.setToolTipText("remove the selected  trigger");
        jButtonRemoveResult.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonRemoveResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveResultActionPerformed(evt);
            }
        });

        jLabel23.setText("results");

        jTableResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableResultTable.setToolTipText("<html>\nFor -> y, x<bR>\na value is possible<bR>\n++, -- is possible <bR>\n+=x, -=x is possible for x < 10<bR>\nx is possible - no change <bR>\n=xxx is possible - a global 8 bit variable<bR>\n</html>");
        jTableResultTable.getTableHeader().setResizingAllowed(false);
        jTableResultTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(jTableResultTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(actionBoundingBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(actionAnimation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldBoundingBoxOffsetX, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldActionId))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldBoundingBoxOffsetY, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderSourceScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonRemoveEvent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddEvent))
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel3)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonDeleteLastPosRow)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonNewPosRow))
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRemoveTrigger)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonAddTrigger)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonRemoveResult)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonAddResult)
                                .addContainerGap(232, Short.MAX_VALUE))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRadioButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldWhileActiveChangeY, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldWhileActiveChangeX, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jComboBoxBehaviour, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextFieldAnimationName, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonLoad2)))
                                .addGap(0, 340, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jTextFieldSoundName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonLoad3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCheckBoxSoundLoop)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBoxTextType, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldtextHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldtextWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldAnimationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                            .addComponent(jButtonLoad2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldWhileActiveChangeY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldWhileActiveChangeX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(jRadioButton1)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel21)
                                .addComponent(jRadioButton2))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jComboBoxBehaviour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAddEvent)
                            .addComponent(jButtonRemoveEvent)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButtonAddTrigger)
                                        .addComponent(jButtonRemoveTrigger))
                                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButtonAddResult)
                                        .addComponent(jButtonRemoveResult))
                                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonDeleteLastPosRow)
                                    .addComponent(jButtonNewPosRow)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel16)
                                        .addComponent(jTextFieldSoundName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButtonLoad3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jCheckBoxSoundLoop))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxTextType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldtextHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldtextWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(actionAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSliderSourceScale, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jTextFieldActionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionBoundingBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(jTextFieldBoundingBoxOffsetY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldBoundingBoxOffsetX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(133, 133, 133))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldAnimationNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAnimationNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAnimationNameActionPerformed

    private void jButtonLoad2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoad2ActionPerformed
        loadAnimation();
    }//GEN-LAST:event_jButtonLoad2ActionPerformed

    private void jSliderSourceScaleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSourceScaleStateChanged
        int value = jSliderSourceScale.getValue();
        int max = jSliderSourceScale.getMaximum();

        double scale = value - ((max-1)/2);
        if (value <((max/2)+1))
        {
            value--;
            int invScale = ((max/2))-value;
            if (invScale == 0)
            scale = 1;
            else
            scale = 1.0/invScale;
        }
        // smooth out "big steps"
//        if (scale<1) scale += 0.25;
        if (scale>1) scale -= 0.75;
        if (scale>2) scale -= 0.5;
        if (scale>2.5) scale -= 0.25;
        if (scale>2.75) scale -= 0.5;
        actionAnimation.setScale(scale);
        actionBoundingBox.setScale(scale);
    }//GEN-LAST:event_jSliderSourceScaleStateChanged

    private void jTextFieldWhileActiveChangeYFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldWhileActiveChangeYFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldWhileActiveChangeYFocusLost

    private void jTextFieldWhileActiveChangeYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldWhileActiveChangeYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldWhileActiveChangeYActionPerformed

    private void jTextFieldWhileActiveChangeXFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldWhileActiveChangeXFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldWhileActiveChangeXFocusLost

    private void jTextFieldWhileActiveChangeXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldWhileActiveChangeXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldWhileActiveChangeXActionPerformed

    private void jTextFieldSoundNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSoundNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSoundNameActionPerformed

    String lastPath =Global.mainPathPrefix;
    private void jButtonLoad3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoad3ActionPerformed

        InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();

        if (lastPath.length()==0)
        {
            lastPath = Global.mainPathPrefix;
            fc.setCurrentDirectory(new java.io.File(lastPath));
        }
        else
        {
            fc.setCurrentDirectory(new java.io.File(lastPath));
        }
        FileNameExtensionFilter filter = new FileNameExtensionFilter("afx", "afx");
        fc.setFileFilter(filter);

        int re = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
        if (fc == null) return;
        if (fc.getSelectedFile() == null) return;
        lastPath = fc.getSelectedFile().getAbsolutePath();

        File file = new File(lastPath);
        if (!lastPath.toLowerCase().endsWith(".afx"))
            return;

        byte[] data = null;
        Path path = Paths.get(lastPath);
     
        String nameOnly = path.getFileName().toString();
        String barenameOnly = nameOnly.substring(0, nameOnly.length()-4); // is a ".afx", tehrefor a -4 must work!
        jTextFieldSoundName.setText(path.toString());
        return ;
        
    }//GEN-LAST:event_jButtonLoad3ActionPerformed

    private void jButtonDeleteLastPosRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteLastPosRowActionPerformed
        if (data == null) return;
        if (data.mpositioning == null) return;

        if (data.mpositioning.size() != 0) data.mpositioning.remove(data.mpositioning.size()-1);
        if (data.mpositioning.size() != 0) data.mpositioning.remove(data.mpositioning.size()-1);
        if (data.mpositioning.size() != 0) data.mpositioning.remove(data.mpositioning.size()-1);
        resetPosTable();
        
    }//GEN-LAST:event_jButtonDeleteLastPosRowActionPerformed

    private void jButtonNewPosRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewPosRowActionPerformed
        if (data == null) return;
        if (data.mpositioning == null) 
        {
            data.mpositioning = new Vector<Integer>();
        }
        data.mpositioning.addElement(0);
        data.mpositioning.addElement(0);
        data.mpositioning.addElement(0);
        resetPosTable();
    }//GEN-LAST:event_jButtonNewPosRowActionPerformed

    private void jButtonAddEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEventActionPerformed
        if (data == null) return;
        if (data.meventName == null) data.meventName = new Vector<String>();
        if (data.mtriggerName == null) data.mtriggerName = new Vector<String>();
        if (data.mresultName == null) data.mresultName = new Vector<String>();
        if (data.meventUID == null) data.meventUID = new Vector<String>();

        data.meventName.addElement("");
        data.mtriggerName.addElement("");
        data.mresultName.addElement("");
        data.meventUID.addElement(UUID.randomUUID().toString());
        resetEventTable();
    }//GEN-LAST:event_jButtonAddEventActionPerformed

    private void jButtonRemoveEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveEventActionPerformed
        if (data == null) return;

        int row = jTableEventTable.getSelectedRow();

        
        if (data.meventName != null) if (data.meventName.size()>row) 
        {
            String eventBaseName = getEventBaseName(row);
            data.meventName.remove(row);
            if (data.mtriggerName != null) if (data.mtriggerName.size()>row) data.mtriggerName.remove(row);
            if (data.mresultName != null) if (data.mresultName.size()>row) data.mresultName.remove(row);
            if (data.meventUID != null) if (data.meventUID.size()>row) data.meventUID.remove(row);
            if (eventBaseName != null)
            {
                removeTrigger(eventBaseName);
                removeResult(eventBaseName);
            }
        }
        
        resetEventTable();
    }//GEN-LAST:event_jButtonRemoveEventActionPerformed

    private void jTextFieldBoundingBoxOffsetYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBoundingBoxOffsetYActionPerformed
        data.mboundingBoxOffsetY = jTextFieldBoundingBoxOffsetY.getText();
        computeBoundingBox();

    }//GEN-LAST:event_jTextFieldBoundingBoxOffsetYActionPerformed

    private void jTextFieldBoundingBoxOffsetYFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldBoundingBoxOffsetYFocusLost
        data.mboundingBoxOffsetY = jTextFieldBoundingBoxOffsetY.getText();
        computeBoundingBox();
    }//GEN-LAST:event_jTextFieldBoundingBoxOffsetYFocusLost

    private void jTextFieldtextHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldtextHeightFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldtextHeightFocusLost

    private void jTextFieldtextHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldtextHeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldtextHeightActionPerformed

    private void jTextFieldtextWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldtextWidthFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldtextWidthFocusLost

    private void jTextFieldtextWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldtextWidthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldtextWidthActionPerformed

    private void jTextFieldBoundingBoxOffsetXFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldBoundingBoxOffsetXFocusLost
        data.mboundingBoxOffsetX = jTextFieldBoundingBoxOffsetX.getText();
        computeBoundingBox();
    }//GEN-LAST:event_jTextFieldBoundingBoxOffsetXFocusLost

    private void jTextFieldBoundingBoxOffsetXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBoundingBoxOffsetXActionPerformed
        data.mboundingBoxOffsetX = jTextFieldBoundingBoxOffsetX.getText();
        computeBoundingBox();
    }//GEN-LAST:event_jTextFieldBoundingBoxOffsetXActionPerformed

    private void jTextFieldIntensityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldIntensityFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIntensityFocusLost

    private void jTextFieldIntensityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIntensityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIntensityActionPerformed

    private void jButtonAddTriggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTriggerActionPerformed

        String uid = getCurrentEventUID();
        if (uid == null) return;
        if (triggers == null) return;
        if (triggers.mtriggerByCause == null) triggers.mtriggerByCause = new Vector<String>();
        if (triggers.mtriggerBySpriteID == null) triggers.mtriggerBySpriteID = new Vector<String>();
        if (triggers.mtriggerByY == null) triggers.mtriggerByY = new Vector<Integer>();
        if (triggers.mtriggerByX == null) triggers.mtriggerByX = new Vector<Integer>();
        if (triggers.mtriggerByTicks == null) triggers.mtriggerByTicks = new Vector<String>();

        triggers.mtriggerByCause.addElement("");
        triggers.mtriggerBySpriteID.addElement("");
        triggers.mtriggerByY.addElement(0);
        triggers.mtriggerByX.addElement(0);
        triggers.mtriggerByTicks.addElement("");
        triggers.mClass = uid;
        triggers.mName = uid;

        resetTriggerTable();
    }//GEN-LAST:event_jButtonAddTriggerActionPerformed

    private void jButtonRemoveTriggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveTriggerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonRemoveTriggerActionPerformed

    private void jButtonAddResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddResultActionPerformed
        String uid = getCurrentEventUID();
        if (uid == null) return;
        if (results == null) return;
        if (results.mresultType == null) results.mresultType = new Vector<String>();
        if (results.mresultActionID == null) results.mresultActionID = new Vector<String>();
        if (results.mresultSpriteID == null) results.mresultSpriteID = new Vector<String>();
        if (results.mresultY == null) results.mresultY = new Vector<String>();
        if (results.mresultX == null) results.mresultX = new Vector<String>();

        results.mresultType.addElement("");
        results.mresultActionID.addElement("");
        results.mresultSpriteID.addElement("");
        results.mresultY.addElement("");
        results.mresultX.addElement("");
        results.mClass = uid;
        results.mName = uid;

        resetTriggerTable();

    }//GEN-LAST:event_jButtonAddResultActionPerformed

    private void jButtonRemoveResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonRemoveResultActionPerformed

    private void jTableEventTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEventTableMousePressed
        JTable table = (JTable)evt.getSource();

        int rowAtPoint = table.rowAtPoint(evt.getPoint());
        int columnAtPoint = table.columnAtPoint(evt.getPoint());
        if (rowAtPoint != -1) 
        {
            changeEventSelection(rowAtPoint);
        }
    }//GEN-LAST:event_jTableEventTableMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.malban.graphics.Single3dDisplayPanel actionAnimation;
    private de.malban.graphics.Single3dDisplayPanel actionBoundingBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAddEvent;
    private javax.swing.JButton jButtonAddResult;
    private javax.swing.JButton jButtonAddTrigger;
    private javax.swing.JButton jButtonDeleteLastPosRow;
    private javax.swing.JButton jButtonLoad2;
    private javax.swing.JButton jButtonLoad3;
    private javax.swing.JButton jButtonNewPosRow;
    private javax.swing.JButton jButtonRemoveEvent;
    private javax.swing.JButton jButtonRemoveResult;
    private javax.swing.JButton jButtonRemoveTrigger;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBoxSoundLoop;
    private javax.swing.JComboBox<String> jComboBoxBehaviour;
    private javax.swing.JComboBox<String> jComboBoxTextType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSlider jSliderSourceScale;
    private javax.swing.JTable jTableDeltaTable;
    private javax.swing.JTable jTableEventTable;
    private javax.swing.JTable jTablePositioningTable;
    private javax.swing.JTable jTableResultTable;
    private javax.swing.JTable jTableTriggerTable;
    private javax.swing.JTextArea jTextAreaText;
    private javax.swing.JTextField jTextFieldActionId;
    private javax.swing.JTextField jTextFieldAnimationName;
    private javax.swing.JTextField jTextFieldBoundingBoxOffsetX;
    private javax.swing.JTextField jTextFieldBoundingBoxOffsetY;
    private javax.swing.JTextField jTextFieldIntensity;
    private javax.swing.JTextField jTextFieldSoundName;
    private javax.swing.JTextField jTextFieldWhileActiveChangeX;
    private javax.swing.JTextField jTextFieldWhileActiveChangeY;
    private javax.swing.JTextField jTextFieldtextHeight;
    private javax.swing.JTextField jTextFieldtextWidth;
    // End of variables declaration//GEN-END:variables
    boolean loadAnimation()
    {
        String filename =Global.mainPathPrefix+"xml"+File.separator+"vectoranimation";
        filename = VectorListFileChoserJPanel.showSavePanel(filename, "Load Vector-Animation", true);
        return loadAnimationFromElement(filename);
    }
    boolean loadAnimationFromElement(String loadName)
    {
        boolean ok = false;
        if (loadName != null)
        {
            if (!loadName.toUpperCase().endsWith(".XML"))
            {
                loadName+= ".xml";
            }
            setCurrentAnimation(new GFXVectorAnimation());
            ok = getCurrentAnimation().loadFromXML(loadName);
            if (ok)
            {
                if (getCurrentAnimation().size()>0)
                {
                    if (inGuiUpdate == 0)
                        updateActionData();
                }
                else
                {
                    return false;
                }
            }
            loadName = de.malban.util.Utility.makeVideRelative(loadName);
        }
        
        jTextFieldAnimationName.setText(loadName);
        return ok;
    }
    /**
     * @return the currentAnimation
     */
    public GFXVectorAnimation getCurrentAnimation() {
        return currentAnimation;
    }

    /**
     * @param currentAnimation the currentAnimation to set
     */
    public void setCurrentAnimation(GFXVectorAnimation currentAnimation) {
        this.currentAnimation = currentAnimation;
        actionAnimation.setAnimation(currentAnimation);
        actionAnimation.setDelay(5*10);
    }

    // data changed in gui -> transport it to data layer
    void updateActionData()
    {
        data.mName = jTextFieldActionId.getText();
        data.manimationFile = jTextFieldAnimationName.getText();
        data.mchangeWhileActiveY = jTextFieldWhileActiveChangeY.getText();
        data.mchangeWhileActiveX = jTextFieldWhileActiveChangeX.getText();
        data.msoundLoop = jCheckBoxSoundLoop.isSelected();
        data.msoundFile = jTextFieldSoundName.getText();
        data.mboundingBoxOffsetY = jTextFieldBoundingBoxOffsetY.getText();
        data.mboundingBoxOffsetX = jTextFieldBoundingBoxOffsetX.getText();
        data.mbehaviour = jComboBoxBehaviour.getSelectedItem().toString();
        data.mtext = jTextAreaText.getText();
        data.mtextType = jComboBoxTextType.getSelectedItem().toString();
        data.mtextHeight = Int0(jTextFieldtextHeight.getText());
        data.mtextWidth = Int0(jTextFieldtextWidth.getText());
        data.mintensity = jTextFieldIntensity.getText();
    }

    // load data into gui reprensetation
    void readActionData()
    {
        inGuiUpdate++;
        jTextFieldActionId.setText(data.mName);
        jTextFieldAnimationName.setText(data.manimationFile);

        jTextFieldWhileActiveChangeY.setText(""+data.mchangeWhileActiveY);
        if (jTextFieldWhileActiveChangeY.getText().length()==0)
            jTextFieldWhileActiveChangeY.setText("0");
        jTextFieldWhileActiveChangeX.setText(""+data.mchangeWhileActiveX);
        if (jTextFieldWhileActiveChangeX.getText().length()==0)
            jTextFieldWhileActiveChangeX.setText("0");

        jCheckBoxSoundLoop.setSelected(data.msoundLoop);
        jTextFieldSoundName.setText(data.msoundFile);
        jTextFieldBoundingBoxOffsetY.setText(""+data.mboundingBoxOffsetY);
        jTextFieldBoundingBoxOffsetX.setText(""+data.mboundingBoxOffsetX);
        jComboBoxBehaviour.setSelectedItem(data.mbehaviour);
        jTextFieldIntensity.setText(data.mintensity);
        jTextFieldtextHeight.setText(""+data.mtextHeight);
        jTextFieldtextWidth.setText(""+data.mtextWidth);
        
        jTextAreaText.setText(data.mtext);
        jComboBoxTextType.setSelectedItem(data.mtextType);
        
        loadAnimationFromElement(data.manimationFile);
        computeBoundingBox();
        inGuiUpdate--;
    }
    public void setActionData(ActionNewData d, SpriteData s)
    {
        data = d;
        sprite = s;
        readActionData();
        tableSetup();
        resetTrigger();
    }

    public ActionNewData getActionData()
    {
        updateActionData();
        return data;
    }
    public class PosModel extends AbstractTableModel
    {
        public final String[] NAMES = new String[] {"count","speedY", "speedX"};
        @Override
        public int getColumnCount() { return 3;}
        @Override
        public int getRowCount() { 
            if (data == null) return 0;
            if (data.mpositioning == null) return 0;
            return data.mpositioning.size()/3;
        }
        @Override
        public Object getValueAt(int row, int col) { 
            if (data == null) return 0;
            if (data.mpositioning == null) return 0;
            if (row*3+col >= data.mpositioning.size()) return 0;
          return data.mpositioning.elementAt(row*3+col);
        }
        
        @Override
        public boolean isCellEditable(int row, int col) {
            return true;
        }
        
        @Override
        public Class<?> getColumnClass(int col) 
        {
            return Integer.class;
        }
        
        public void setValueAt(Object aValue, int row, int col)
        {
            if (data == null) return;
            if (data.mpositioning == null) return;
            if (row*3+col >= data.mpositioning.size()) return;
            Integer V = (Integer) aValue;
            data.mpositioning.setElementAt(V, row*3+col);
        }
        
        public String getColumnName(int col) 
        {
          return NAMES[col];
        }
    };    
    void resetPosTable()
    {
        jTablePositioningTable.tableChanged(null);
        jTablePositioningTable.repaint();
    }
    void resetEventTable()
    {
        int widthAll = jTableEventTable.getWidth();
        jTableEventTable.tableChanged(null);
/*        
        jTableEventTable.getColumnModel().getColumn(0).setMinWidth(120);
        jTableEventTable.getColumnModel().getColumn(1).setMinWidth(50);
        jTableEventTable.getColumnModel().getColumn(2).setMinWidth(50);
        jTableEventTable.getColumnModel().getColumn(3).setMinWidth(50);
        jTableEventTable.getColumnModel().getColumn(4).setMinWidth(100);
        jTableEventTable.getColumnModel().getColumn(5).setMinWidth(100);
        jTableEventTable.getColumnModel().getColumn(6).setMinWidth(100);
        jTableEventTable.getColumnModel().getColumn(7).setMinWidth(100);
        jTableEventTable.getColumnModel().getColumn(8).setMinWidth(100);
*/        
        jTableEventTable.repaint();

        resetTriggerTable();
        resetResultTable();
    }
  
    
    class CostumCellRenderer extends DefaultTableCellRenderer 
    {
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
                if (value != null)
                    setText(value.toString());
                else
                    setText("");

            if (isSelected) {
                setBackground(table.getSelectionBackground());
            } else {
                setBackground(table.getBackground());
            }

            return this;
        }

    }    
    class Cause {public String c; Cause(String cc){c=cc;} public String toString(){return c;}}
    class Target {public String c; Target(String cc){c=cc;}public String toString(){return c;}}
    class ActionID {public String c; ActionID(String cc){c=cc;}public String toString(){return c;}}
    class SpriteID {public String c; SpriteID(String cc){c=cc;}public String toString(){return c;}}
    public class EventModel extends AbstractTableModel
    {
//        public final String[] NAMES = new String[] {"cause","target","action", "Y", "X", "ticks", "sprite"};
        public final String[] NAMES = new String[] {"Name", "Trigger", "Result"};
        @Override
        public int getColumnCount() { return NAMES.length;}
        @Override
        public int getRowCount() { 
            if (data == null) return 0;
            if (data.meventUID == null) return 0;
            return data.meventUID.size();
        }
        @Override
        public Object getValueAt(int row, int col) { 
            if (col == 0)
            {
                if (data == null) return new Cause("");
                if (data.meventName == null) return new Cause("");
                if (data.meventName.size()<= row) return new Cause("");
                return data.meventName.elementAt(row);
            }
            if (col == 1)
            {
                if (data == null) return 0;
                if (data.mtriggerName == null) return 0;
                if (data.mtriggerName.size()<= row) return 0;
                return data.mtriggerName.elementAt(row);
            }
            if (col == 2)
            {
                if (data == null) return 0;
                if (data.mresultName == null) return 0;
                if (data.mresultName.size()<= row) return 0;
                return data.mresultName.elementAt(row);
            }
            return null;
        }
        
        @Override
        public boolean isCellEditable(int row, int col) {
            return true;
        }
        
        @Override
        public Class<?> getColumnClass(int col) 
        {
            return String.class;
        }
        
        public void setValueAt(Object aValue, int row, int col)
        {
            if (data == null) return;
            if (aValue == null) return;
            
            if (col == 0)
            {
                if (data.meventName == null) return;
                if (row >= data.meventName.size()) return;
                String V = (String) aValue;
                data.meventName.setElementAt(V, row);
            }
            if (col == 1)
            {
                if (data.mtriggerName == null) return;
                if (row >= data.mtriggerName.size()) return;
                String V = (String) aValue;
                data.mtriggerName.setElementAt(V, row);
            }
            if (col == 2)
            {
                if (data.mresultName == null) return;
                if (row >= data.mresultName.size()) return;
                String V = (String) aValue;
                data.mresultName.setElementAt(V, row);
            }
        }
        
        public String getColumnName(int col) 
        {
          return NAMES[col];
        }
    };    

    public class TriggerModel extends AbstractTableModel
    {
//        public final String[] NAMES = new String[] {"cause","target","action", "Y", "X", "ticks", "sprite"};
        public final String[] NAMES = new String[] {"cause", "Y", "X", "ticks","sprite"};
        @Override
        public int getColumnCount() { return NAMES.length;}
        @Override
        public int getRowCount() { 
            if (triggers == null) return 0;
            if (triggers.mtriggerByCause == null) return 0;
            return triggers.mtriggerByCause.size();
        }
        @Override
        public Object getValueAt(int row, int col) { 
            if (col == 0)
            {
                if (triggers == null) return new Cause("");
                if (triggers.mtriggerByCause == null) return new Cause("");
                if (triggers.mtriggerByCause.size()<= row) return new Cause("");
                return new Cause(triggers.mtriggerByCause.elementAt(row));
            }
            if (col == 1)
            {
                if (triggers == null) return 0;
                if (triggers.mtriggerByY == null) return 0;
                if (triggers.mtriggerByY.size()<= row) return 0;
                return triggers.mtriggerByY.elementAt(row);
            }
            if (col == 2)
            {
                if (triggers == null) return 0;
                if (triggers.mtriggerByX == null) return 0;
                if (triggers.mtriggerByX.size()<= row) return 0;
                return triggers.mtriggerByX.elementAt(row);
            }
            if (col == 3)
            {
                if (triggers == null) return 0;
                if (triggers.mtriggerByTicks == null) return 0;
                if (triggers.mtriggerByTicks.size()<= row) return 0;
                return triggers.mtriggerByTicks.elementAt(row);
            }

            if (col == 4)
            {
                if (triggers == null) return new SpriteID("");
                if (triggers.mtriggerBySpriteID == null) return new SpriteID("");
                if (triggers.mtriggerBySpriteID.size()<= row) return new SpriteID("");
                return new SpriteID(triggers.mtriggerBySpriteID.elementAt(row));
            }

            return null;
        }
        
        @Override
        public boolean isCellEditable(int row, int col) {
            return true;
        }
        
        @Override
        public Class<?> getColumnClass(int col) 
        {
            if (col == 0) return Cause.class;
            if (col == 3) return String.class;
            if (col == 4) return SpriteID.class;
            return Integer.class;
        }
        
        public void setValueAt(Object aValue, int row, int col)
        {
            if (triggers == null) return;
            if (aValue == null) return;
            
            if (col == 0)
            {
                if (triggers.mtriggerByCause == null) return;
                if (row >= triggers.mtriggerByCause.size()) return;
                Cause V = (Cause) aValue;
                triggers.mtriggerByCause.setElementAt(V.c, row);
            }
            if (col == 1)
            {
                if (triggers.mtriggerByY == null) return;
                if (row >= triggers.mtriggerByY.size()) return;
                Integer V = (Integer) aValue;
                triggers.mtriggerByY.setElementAt(V, row);
            }
            if (col == 2)
            {
                if (triggers.mtriggerByX == null) return;
                if (row >= triggers.mtriggerByX.size()) return;
                Integer V = (Integer) aValue;
                triggers.mtriggerByX.setElementAt(V, row);
            }
            if (col == 3)
            {
                if (triggers.mtriggerByTicks == null) return;
                if (row >= triggers.mtriggerByTicks.size()) return;
                String V = (String) aValue;
                triggers.mtriggerByTicks.setElementAt(V, row);
            }
            if (col == 4)
            {
                if (triggers.mtriggerBySpriteID == null) return;
                if (row >= triggers.mtriggerBySpriteID.size()) return;
                SpriteID V = (SpriteID) aValue;
                triggers.mtriggerBySpriteID.setElementAt(V.c, row);
            }
        }
        
        public String getColumnName(int col) 
        {
          return NAMES[col];
        }
    };    
    public class ResultModel extends AbstractTableModel
    {
//        public final String[] NAMES = new String[] {"cause","target","action", "Y", "X", "ticks", "sprite"};
        public final String[] NAMES = new String[] {"->target","->action", "->sprite", "->Y", "->X"};
        @Override
        public int getColumnCount() { return NAMES.length;}
        @Override
        public int getRowCount() { 
            if (results == null) return 0;
            if (results.mresultType == null) return 0;
            return results.mresultType.size();
        }
        @Override
        public Object getValueAt(int row, int col) { 
            if (col == 0)
            {
                if (results == null) return new Target("");
                if (results.mresultType == null) return new Target("");
                if (results.mresultType.size()<= row) return new Target("");
                return new Target(results.mresultType.elementAt(row));
            }
            if (col == 1)
            {
                if (results == null) return new ActionID("");
                if (results.mresultActionID == null) return new ActionID("");
                if (results.mresultActionID.size()<= row) return new ActionID("");
                return new Target(results.mresultActionID.elementAt(row));
            }
            if (col == 2)
            {
                if (results == null) return new SpriteID("");
                if (results.mresultSpriteID == null) return new SpriteID("");
                if (results.mresultSpriteID.size()<= row) return new SpriteID("");
                return new SpriteID(results.mresultSpriteID.elementAt(row));
            }
            if (col == 3)
            {
                if (results == null) return 0;
                if (results.mresultY == null) return 0;
                if (results.mresultY.size()<= row) return 0;
                return results.mresultY.elementAt(row);
            }
            if (col == 4)
            {
                if (results == null) return 0;
                if (results.mresultX == null) return 0;
                if (results.mresultX.size()<= row) return 0;
                return results.mresultX.elementAt(row);
            }

            return null;
        }
        
        @Override
        public boolean isCellEditable(int row, int col) {
            return true;
        }
        
        @Override
        public Class<?> getColumnClass(int col) 
        {
            if (col == 0) return Target.class;
            if (col == 1) return ActionID.class;
            if (col == 2) return SpriteID.class;
            return String.class;
        }
        
        public void setValueAt(Object aValue, int row, int col)
        {
            if (results == null) return;
            if (aValue == null) return;
            
            if (col == 0)
            {
                if (results.mresultType == null) return;
                if (row >= results.mresultType.size()) return;
                Target V = (Target) aValue;
                results.mresultType.setElementAt(V.c, row);
            }
            if (col == 1)
            {
                if (results.mresultActionID == null) return;
                if (row >= results.mresultActionID.size()) return;
                ActionID V = (ActionID) aValue;
                results.mresultActionID.setElementAt(V.c, row);
            }
            if (col == 2)
            {
                if (results.mresultSpriteID == null) return;
                if (row >= results.mresultSpriteID.size()) return;
                SpriteID V = (SpriteID) aValue;
                results.mresultSpriteID.setElementAt(V.c, row);
            }
            if (col == 3)
            {
                if (results.mresultY == null) return;
                if (row >= results.mresultY.size()) return;
                String V = (String) aValue;
                results.mresultY.setElementAt(V, row);
            }
            if (col == 4)
            {
                if (results.mresultX == null) return;
                if (row >= results.mresultX.size()) return;
                String V = (String) aValue;
                results.mresultX.setElementAt(V, row);
            }
        }
        
        public String getColumnName(int col) 
        {
          return NAMES[col];
        }
    };    

    class CauseCellEditor extends AbstractCellEditor implements TableCellEditor, ActionListener 
    {
        private Cause value;
        private List<Cause> listString;

        public CauseCellEditor(List<Cause> l) 
        {
            this.listString = l;
            
            Collections.sort(listString, new Comparator<Cause>()
            {
               public int compare(Cause o1, Cause o2)
               {
                  return o1.c.compareToIgnoreCase(o2.c);
               }
            } );        
            
            
        }

        @Override
        public Object getCellEditorValue() 
        {
            return this.value;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) 
        {
            if (value instanceof Cause) 
            {
                this.value = (Cause) value;
            }

            JComboBox<Cause> comboCountry = new JComboBox<Cause>();

            for (Cause aCountry : listString) 
            {
                comboCountry.addItem(aCountry);
            }

            comboCountry.setSelectedItem(value);
            comboCountry.addActionListener(this);

            if (isSelected) 
            {
                comboCountry.setBackground(table.getSelectionBackground());
            } 
            else 
            {
                comboCountry.setBackground(table.getBackground());
            }

            return comboCountry;
        }

        @Override
        public void actionPerformed(ActionEvent event) 
        {
            JComboBox<Cause> comboCountry = (JComboBox<Cause>) event.getSource();
            this.value = (Cause) comboCountry.getSelectedItem();
        }
    }
    class TargetCellEditor extends AbstractCellEditor implements TableCellEditor, ActionListener 
    {
        private Target value;
        private List<Target> listString;

        public TargetCellEditor(List<Target> l) 
        {
            this.listString = l;
            Collections.sort(listString, new Comparator<Target>()
            {
               public int compare(Target o1, Target o2)
               {
                  return o1.c.compareToIgnoreCase(o2.c);
               }
            } );        
        }

        @Override
        public Object getCellEditorValue() 
        {
            return this.value;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) 
        {
            if (value instanceof Target) 
            {
                this.value = (Target) value;
            }

            JComboBox<Target> comboCountry = new JComboBox<Target>();

            for (Target aCountry : listString) 
            {
                comboCountry.addItem(aCountry);
            }

            comboCountry.setSelectedItem(value);
            comboCountry.addActionListener(this);

            if (isSelected) 
            {
                comboCountry.setBackground(table.getSelectionBackground());
            } 
            else 
            {
                comboCountry.setBackground(table.getBackground());
            }

            return comboCountry;
        }

        @Override
        public void actionPerformed(ActionEvent event) 
        {
            JComboBox<Target> comboCountry = (JComboBox<Target>) event.getSource();
            this.value = (Target) comboCountry.getSelectedItem();
        }
    }
    class ActionIDCellEditor extends AbstractCellEditor implements TableCellEditor, ActionListener 
    {
        private ActionID value;
        private List<ActionID> listString;

        public ActionIDCellEditor(List<ActionID> l) 
        {
            this.listString = l;
            Collections.sort(listString, new Comparator<ActionID>()
            {
               public int compare(ActionID o1, ActionID o2)
               {
                  return o1.c.compareToIgnoreCase(o2.c);
               }
            } );        
        }

        @Override
        public Object getCellEditorValue() 
        {
            return this.value;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) 
        {
            if (value instanceof ActionID) 
            {
                this.value = (ActionID) value;
            }

            JComboBox<ActionID> comboCountry = new JComboBox<ActionID>();

            for (ActionID aCountry : listString) 
            {
                comboCountry.addItem(aCountry);
            }

            comboCountry.setSelectedItem(value);
            comboCountry.addActionListener(this);

            if (isSelected) 
            {
                comboCountry.setBackground(table.getSelectionBackground());
            } 
            else 
            {
                comboCountry.setBackground(table.getBackground());
            }

            return comboCountry;
        }

        @Override
        public void actionPerformed(ActionEvent event) 
        {
            JComboBox<ActionID> comboCountry = (JComboBox<ActionID>) event.getSource();
            this.value = (ActionID) comboCountry.getSelectedItem();
        }
    }
    
    
    class SpriteIDCellEditor extends AbstractCellEditor implements TableCellEditor, ActionListener 
    {
        private SpriteID value;
        private List<SpriteID> listString;

        public SpriteIDCellEditor(List<SpriteID> l) 
        {
            this.listString = l;
            Collections.sort(listString, new Comparator<SpriteID>()
            {
               public int compare(SpriteID o1, SpriteID o2)
               {
                  return o1.c.compareToIgnoreCase(o2.c);
               }
            } );        
        }

        @Override
        public Object getCellEditorValue() 
        {
            return this.value;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) 
        {
            if (value instanceof SpriteID) 
            {
                this.value = (SpriteID) value;
            }

            JComboBox<SpriteID> comboCountry = new JComboBox<SpriteID>();

            for (SpriteID aCountry : listString) 
            {
                comboCountry.addItem(aCountry);
            }

            comboCountry.setSelectedItem(value);
            comboCountry.addActionListener(this);

            if (isSelected) 
            {
                comboCountry.setBackground(table.getSelectionBackground());
            } 
            else 
            {
                comboCountry.setBackground(table.getBackground());
            }

            return comboCountry;
        }

        @Override
        public void actionPerformed(ActionEvent event) 
        {
            JComboBox<SpriteID> comboCountry = (JComboBox<SpriteID>) event.getSource();
            this.value = (SpriteID) comboCountry.getSelectedItem();
        }
    }

    
    void tableSetup()
    {
        PosModel posModel = new PosModel();
        if (posModel != null)
        {
            jTablePositioningTable.setModel(posModel);
        }

        EventModel eventModel = new EventModel();
        if (eventModel != null)
        {
            jTableEventTable.setModel(eventModel);
        }
         TriggerModel triggerModel = new TriggerModel();
        if (triggerModel != null)
        {
            jTableTriggerTable.setModel(triggerModel);
        }
         ResultModel resultModel = new ResultModel();
        if (triggerModel != null)
        {
            jTableResultTable.setModel(resultModel);
        }
        
        
        
        
        List<Cause> listCause = new ArrayList<>();
// joystick port is determined by player 1 or player 2

        listCause.add(new Cause("joystick center"));
        listCause.add(new Cause("joystick up left (not done)"));
        listCause.add(new Cause("joystick left down (not done)"));
        listCause.add(new Cause("joystick down right (not done)"));
        listCause.add(new Cause("joystick right up (not done)"));
        listCause.add(new Cause("joystick up"));
        listCause.add(new Cause("joystick left"));
        listCause.add(new Cause("joystick down"));
        listCause.add(new Cause("joystick right"));
        
        listCause.add(new Cause("analog horizontal"));
        listCause.add(new Cause("analog vertical"));

        listCause.add(new Cause("analog delta horizontal (not done)"));
        listCause.add(new Cause("analog delta vertical (not done)"));
        
        listCause.add(new Cause("button down 1")); // continuous
        listCause.add(new Cause("button down 2"));
        listCause.add(new Cause("button down 3"));
        listCause.add(new Cause("button down 4"));
        listCause.add(new Cause("button pressed 1")); // toggled to be down
        listCause.add(new Cause("button pressed 2"));
        listCause.add(new Cause("button pressed 3"));
        listCause.add(new Cause("button pressed 4"));
        listCause.add(new Cause("on creation"));
        listCause.add(new Cause("sprite no collision"));
        listCause.add(new Cause("sprite collision"));
        listCause.add(new Cause("sprite receive collision"));
        listCause.add(new Cause("list collision (not done)"));
        listCause.add(new Cause("timer expired"));
        listCause.add(new Cause("long timer expired"));
        listCause.add(new Cause("position equals"));
        listCause.add(new Cause("position > Y"));
        listCause.add(new Cause("position < Y"));
        listCause.add(new Cause("position > X"));
        listCause.add(new Cause("position < X"));
        listCause.add(new Cause("variable = (not done)"));
        listCause.add(new Cause("variable < (not done)"));
        listCause.add(new Cause("variable > (not done)"));

        List<Target> listTarget = new ArrayList<>();
        listTarget.add(new Target("action change"));
        listTarget.add(new Target("spawn sprite"));
        listTarget.add(new Target("random spawn sprite"));
        listTarget.add(new Target("set position"));
        listTarget.add(new Target("block movement"));
        listTarget.add(new Target("speed change"));
        listTarget.add(new Target("play sfx"));
        listTarget.add(new Target("next level"));
        listTarget.add(new Target("variable change"));
        listTarget.add(new Target("intensity change"));
        listTarget.add(new Target("set level"));
        listTarget.add(new Target("remove"));
        listTarget.add(new Target("remove all"));

        List<ActionID> listActionID = new ArrayList<>();
        
        // -----
        ActionDataPool mActionDataPool = new ActionDataPool();;
        Collection<String> collectionKlasse = mActionDataPool.getKlassenHashMap().values();
        String klasse = sprite.mName+"_Actions";

        Collection<ActionData> colC = mActionDataPool.getMapForKlasse(klasse).values();
        Iterator<ActionData> iterC = colC.iterator();

        listActionID.add(new ActionID(""));
        while (iterC.hasNext())
        {
            ActionData item = iterC.next();
            listActionID.add(new ActionID(item.mName));
        }
        // -----

        // -----
        List<SpriteID> listSpriteID = new ArrayList<>();
        SpriteDataPool mSpriteDataPool = new SpriteDataPool();
        collectionKlasse = mSpriteDataPool.getKlassenHashMap().values();
        klasse = "AllSprites";
        Collection<SpriteData> colCs = mSpriteDataPool.getMapForKlasse(klasse).values();
        Iterator<SpriteData> iterCs = colCs.iterator();
        listSpriteID.add(new SpriteID(""));
        while (iterCs.hasNext())
        {
            SpriteData item = iterCs.next();
            listSpriteID.add(new SpriteID(item.mName));
        }
        // -----

        jTableEventTable.setDefaultEditor(Cause.class, new CauseCellEditor(listCause));
        jTableEventTable.setDefaultEditor(Target.class, new TargetCellEditor(listTarget));
        jTableEventTable.setDefaultEditor(ActionID.class, new ActionIDCellEditor(listActionID));
        jTableEventTable.setDefaultEditor(SpriteID.class, new SpriteIDCellEditor(listSpriteID));
                 
        jTableEventTable.setDefaultRenderer(Cause.class, new CostumCellRenderer());
        jTableEventTable.setDefaultRenderer(Target.class, new CostumCellRenderer());
        jTableEventTable.setDefaultRenderer(ActionID.class, new CostumCellRenderer());
        jTableEventTable.setDefaultRenderer(SpriteID.class, new CostumCellRenderer());


        jTableTriggerTable.setDefaultEditor(Cause.class, new CauseCellEditor(listCause));
        jTableTriggerTable.setDefaultEditor(Target.class, new TargetCellEditor(listTarget));
        jTableTriggerTable.setDefaultEditor(ActionID.class, new ActionIDCellEditor(listActionID));
        jTableTriggerTable.setDefaultEditor(SpriteID.class, new SpriteIDCellEditor(listSpriteID));
                 
        jTableTriggerTable.setDefaultRenderer(Cause.class, new CostumCellRenderer());
        jTableTriggerTable.setDefaultRenderer(Target.class, new CostumCellRenderer());
        jTableTriggerTable.setDefaultRenderer(ActionID.class, new CostumCellRenderer());
        jTableTriggerTable.setDefaultRenderer(SpriteID.class, new CostumCellRenderer());


        jTableResultTable.setDefaultEditor(Cause.class, new CauseCellEditor(listCause));
        jTableResultTable.setDefaultEditor(Target.class, new TargetCellEditor(listTarget));
        jTableResultTable.setDefaultEditor(ActionID.class, new ActionIDCellEditor(listActionID));
        jTableResultTable.setDefaultEditor(SpriteID.class, new SpriteIDCellEditor(listSpriteID));
                 
        jTableResultTable.setDefaultRenderer(Cause.class, new CostumCellRenderer());
        jTableResultTable.setDefaultRenderer(Target.class, new CostumCellRenderer());
        jTableResultTable.setDefaultRenderer(ActionID.class, new CostumCellRenderer());
        jTableResultTable.setDefaultRenderer(SpriteID.class, new CostumCellRenderer());
        
        mTriggerPool = new ActionTriggerDataPool();
        mResultPool = new ActionResultDataPool();
        currentEventRow = -1;
        resetPosTable();
        resetEventTable();
        resetTriggerTable();
        resetResultTable();
    }

    GFXVectorAnimation boundingAnimation =  new GFXVectorAnimation();
    void computeBoundingBox()
    {
        GFXVectorList boundingList = computeBoundingBoxStatic(data);
        boundingAnimation =  new GFXVectorAnimation();
        if (boundingList != null) 
            boundingAnimation.add(boundingList);
        actionBoundingBox.setAnimation(boundingAnimation);
        actionBoundingBox.repaint();
    }
    static int BLOW=10;
    static GFXVectorList computeBoundingBoxStatic(ActionNewData data)
    {
        GFXVectorAnimation currentAnimation = new GFXVectorAnimation();
        String loadName = data.manimationFile;
        if (loadName != null)
        {
            if (!loadName.toUpperCase().endsWith(".XML"))
            {
                loadName+= ".xml";
            }
            if (!currentAnimation.loadFromXML(loadName)) return null;
        }
        
        int xMin = 100000;
        int yMin = 100000;
        int xMax = -100000;
        int yMax = -100000;
        if (currentAnimation==null) return null;
        if (currentAnimation.size()==0) return null;
        
        
        // only testing position 0
        GFXVectorList list =  currentAnimation.get(0);
        xMax = list.getXMax()/BLOW;
        yMax = list.getYMax()/BLOW;
        xMin = list.getXMin()/BLOW;
        yMin = list.getYMin()/BLOW;
        
        if ((xMax == 0) && (list.getXMax()!=0)) if (list.getXMax()>0) xMax = 1; else xMax = -1;
        if ((yMax == 0) && (list.getYMax()!=0)) if (list.getYMax()>0) yMax = 1; else yMax = -1;
        if ((xMin == 0) && (list.getXMin()!=0)) if (list.getXMin()>0) xMin = 1; else xMin = -1;
        if ((yMin == 0) && (list.getYMin()!=0)) if (list.getYMin()>0) yMin = 1; else yMin = -1;
        

        boolean immediateY = data.mboundingBoxOffsetY.startsWith("#");
        boolean immediateX = data.mboundingBoxOffsetX.startsWith("#");

        int by = Int0(replace(data.mboundingBoxOffsetY, "#",""));
        int bx = Int0(replace(data.mboundingBoxOffsetX, "#",""));
        
        if (immediateY)
        {
            yMax = by;
            yMin = -by;
        }
        else
        {
            yMax = yMax+by;
            yMin = yMin-by;
        }
        if (immediateX)
        {
            xMax = bx;
            xMin = -bx;
        }
        else
        {
            xMax = xMax+bx;
            xMin = xMin-bx;
        }
        

        if ((xMax == 0) && (list.getXMax()!=0)) if (list.getXMax()>0) xMax = 1; else xMax = -1;
        if ((yMax == 0) && (list.getYMax()!=0)) if (list.getYMax()>0) yMax = 1; else yMax = -1;
        if ((xMin == 0) && (list.getXMin()!=0)) if (list.getXMin()>0) xMin = 1; else xMin = -1;
        if ((yMin == 0) && (list.getYMin()!=0)) if (list.getYMin()>0) yMin = 1; else yMin = -1;

        GFXVectorList boundingList = new GFXVectorList();
        boundingList.add(new GFXVector(new Vertex(xMax*BLOW, yMax*BLOW, 0), new Vertex(xMin*BLOW, yMax*BLOW, 0)));
        boundingList.add(new GFXVector(new Vertex(xMin*BLOW, yMax*BLOW, 0), new Vertex(xMin*BLOW, yMin*BLOW, 0)));
        boundingList.add(new GFXVector(new Vertex(xMin*BLOW, yMin*BLOW, 0), new Vertex(xMax*BLOW, yMin*BLOW, 0)));
        boundingList.add(new GFXVector(new Vertex(xMax*BLOW, yMin*BLOW, 0), new Vertex(xMax*BLOW, yMax*BLOW, 0)));
        return boundingList;
    }
    void stopEditing()
    {
            if (jTableEventTable.isEditing()) jTableEventTable.getCellEditor().stopCellEditing();        
            if (jTablePositioningTable.isEditing()) jTablePositioningTable.getCellEditor().stopCellEditing();        
            if (jTableTriggerTable.isEditing()) jTableTriggerTable.getCellEditor().stopCellEditing();        
            if (jTableResultTable.isEditing()) jTableResultTable.getCellEditor().stopCellEditing();        
    }










    void resetTriggerTable()
    {
        int widthAll = jTableTriggerTable.getWidth();
        jTableTriggerTable.tableChanged(null);
        jTableTriggerTable.getColumnModel().getColumn(0).setMinWidth(120);
        jTableTriggerTable.getColumnModel().getColumn(1).setMinWidth(50);
        jTableTriggerTable.getColumnModel().getColumn(2).setMinWidth(50);
        jTableTriggerTable.getColumnModel().getColumn(3).setMinWidth(50);
        jTableTriggerTable.getColumnModel().getColumn(4).setMinWidth(100);
        jTableTriggerTable.repaint();
    }
    void resetResultTable()
    {
        int widthAll = jTableResultTable.getWidth();
        jTableResultTable.tableChanged(null);
        jTableResultTable.getColumnModel().getColumn(0).setMinWidth(100);
        jTableResultTable.getColumnModel().getColumn(1).setMinWidth(100);
        jTableResultTable.getColumnModel().getColumn(2).setMinWidth(100);
        jTableResultTable.getColumnModel().getColumn(3).setMinWidth(50);
        jTableResultTable.getColumnModel().getColumn(4).setMinWidth(50);
        jTableResultTable.repaint();
    }
    String getEventBaseName(int row)
    {
        return data.meventUID.elementAt(row);
    }
    void removeTrigger(String n)
    {
        // todo
        // but since they are UID based - they will be zombies for now
    }
    void removeResult(String n)
    {
        // todo
        // but since they are UID based - they will be zombies for now
    }
    void setTrigger(int row)
    {
        String base = getEventBaseName(row);

        Collection<String> collectionKlasse = mTriggerPool.getKlassenHashMap().values();
        String klasse = base;

        Collection<ActionTriggerData> colC = mTriggerPool.getMapForKlasse(klasse).values();
        Iterator<ActionTriggerData> iterC = colC.iterator();

        while (iterC.hasNext())
        {
            ActionTriggerData item = iterC.next();
//            if (item.mName.equals(base))
            {
                triggers = item;
                break;
            }
        }
    }
    void setResults(int row)
    {
        String base = getEventBaseName(row);

        Collection<String> collectionKlasse = mResultPool.getKlassenHashMap().values();
        String klasse = base;

        Collection<ActionResultData> colC = mResultPool.getMapForKlasse(klasse).values();
        Iterator<ActionResultData> iterC = colC.iterator();

        while (iterC.hasNext())
        {
            ActionResultData item = iterC.next();
//            if (item.mName.equals(base))
            {
                results = item;
                break;
            }
        }
    }
    
    // -1 clear
    void changeEventSelection(int row)
    {
    
        if (row == -1)
        {
            triggers = new ActionTriggerData();
            results = new ActionResultData();
            currentEventRow = -1;
        }
        else
        {
            setTrigger(row);
            setResults(row);
            currentEventRow = row;
        }

        jTableTriggerTable.tableChanged(null);
        jTableTriggerTable.repaint();
        jTableResultTable.tableChanged(null);
        jTableResultTable.repaint();
    }
    
    void saveTriggersAndResults()
    {
        mTriggerPool.save();
        mResultPool.save();
    }
    String getCurrentEventUID()
    {
        if (data == null) return null;
        if (currentEventRow == -1 ) return null;
        
        return data.meventUID.elementAt(currentEventRow);
    }
    void resetTrigger()
    {
        changeEventSelection(-1);
    }
    
}
