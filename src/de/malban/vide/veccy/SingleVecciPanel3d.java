/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.vide.veccy;

import de.malban.config.Configuration;
import de.malban.event.EditMouseEvent;
import de.malban.graphics.MouseMovedListener;
import de.malban.graphics.SingleVectorPanel;
import static de.malban.graphics.VectorColors.VECCI_X_AXIS_COLOR;
import static de.malban.graphics.VectorColors.VECCI_Y_AXIS_COLOR;
import static de.malban.graphics.VectorColors.VECCI_Z_AXIS_COLOR;
import de.malban.gui.CSAMainFrame;
import de.malban.gui.Windowable;
import de.malban.gui.components.CSAInternalFrame;
import de.malban.gui.components.CSAView;
import de.malban.gui.panels.LogPanel;
import java.awt.Container;
import java.text.DecimalFormat;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author malban
 */
public class SingleVecciPanel3d extends javax.swing.JPanel implements Windowable, MouseMovedListener{

    LogPanel log = (LogPanel) Configuration.getConfiguration().getDebugEntity();

    
    int selectionRotationX = 0;
    int selectionRotationY = 0;
    int selectionRotationZ = 0;
    
    private int mClassSetting=0;
    private CSAView mParent = null;
    private javax.swing.JMenuItem mParentMenuItem = null;
    VeccyPanel vecci;

    @Override
    public void closing()
    {
        if (vecci != null)
            vecci.closeSingle3dVecciPanel();
    }
    @Override public boolean isIcon()
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return false;
        return frame.getInternalFrame(this).isIcon();
    }
    @Override public void setIcon(boolean b)
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return;
        try
        {
            frame.getInternalFrame(this).setIcon(b);
        }
        catch (Throwable e){}
    }
    @Override
    public void setParentWindow(CSAView jpv)
    {
        mParent = jpv;
    }
    @Override
    public void setMenuItem(javax.swing.JMenuItem item)
    {
        mParentMenuItem = item;
        mParentMenuItem.setText("Vector: Editor 3d");
    }
    @Override
    public javax.swing.JMenuItem getMenuItem()
    {
        return mParentMenuItem;
    }
    @Override
    public javax.swing.JPanel getPanel()
    {
        return this;
    }        
    
    /**
     * Creates new form SingleVecciPanel
     */
    public SingleVecciPanel3d(VeccyPanel v) {
        mClassSetting++;
        initComponents();
        jLabel14.setForeground(VECCI_X_AXIS_COLOR);
        jLabel17.setForeground(VECCI_Y_AXIS_COLOR);
        jLabel18.setForeground(VECCI_Z_AXIS_COLOR);
        vecci = v;
        singleVectorPanel1.setUsePrivateScale(true);
        singleVectorPanel1.setUsePrivateOffset(true);
        singleVectorPanel1.setAxisShown(true);
        jCheckBoxRotateSelection.setVisible(false);
        mClassSetting--;
        updateOutput();
    }
    // otherwise mouse listener is not added to "global" vars
    public void initPart2()
    {
        singleVectorPanel1.addMouseMovedListener(this);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        singleVectorPanel1 = new de.malban.graphics.SingleVector3dPanel();
        jPanelScroller = new javax.swing.JPanel();
        jButtonUp = new javax.swing.JButton();
        jButtonDown = new javax.swing.JButton();
        jButtonLeft = new javax.swing.JButton();
        jButtonRight = new javax.swing.JButton();
        jSliderSourceScale = new javax.swing.JSlider();
        jLabelScale = new javax.swing.JLabel();
        jLabelScale1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jSliderTop1 = new javax.swing.JSlider();
        jSliderSide1 = new javax.swing.JSlider();
        jSliderFront1 = new javax.swing.JSlider();
        jTextFieldTop2 = new javax.swing.JTextField();
        jTextFieldSide2 = new javax.swing.JTextField();
        jTextFieldFront2 = new javax.swing.JTextField();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabelXO = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabelYO = new javax.swing.JLabel();
        jLabelZO = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jCheckBoxRotateSelection = new javax.swing.JCheckBox();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        singleVectorPanel1.setMaximumSize(new java.awt.Dimension(300, 300));
        singleVectorPanel1.setMinimumSize(new java.awt.Dimension(300, 300));
        singleVectorPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                singleVectorPanel1ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout singleVectorPanel1Layout = new javax.swing.GroupLayout(singleVectorPanel1);
        singleVectorPanel1.setLayout(singleVectorPanel1Layout);
        singleVectorPanel1Layout.setHorizontalGroup(
            singleVectorPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        singleVectorPanel1Layout.setVerticalGroup(
            singleVectorPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelScroller.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelScrollerMouseClicked(evt);
            }
        });
        jPanelScroller.setLayout(null);

        jButtonUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/arrow_up.png"))); // NOI18N
        jButtonUp.setToolTipText("select all");
        jButtonUp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonUp.setMargin(new java.awt.Insets(-1, -3, -1, -4));
        jButtonUp.setPreferredSize(new java.awt.Dimension(14, 18));
        jButtonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpActionPerformed(evt);
            }
        });
        jPanelScroller.add(jButtonUp);
        jButtonUp.setBounds(19, 1, 14, 18);

        jButtonDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/arrow_down.png"))); // NOI18N
        jButtonDown.setToolTipText("select all");
        jButtonDown.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonDown.setMargin(new java.awt.Insets(-1, -3, -1, -4));
        jButtonDown.setPreferredSize(new java.awt.Dimension(14, 18));
        jButtonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownActionPerformed(evt);
            }
        });
        jPanelScroller.add(jButtonDown);
        jButtonDown.setBounds(19, 31, 14, 18);

        jButtonLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/arrow_left.png"))); // NOI18N
        jButtonLeft.setToolTipText("select all");
        jButtonLeft.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonLeft.setMargin(new java.awt.Insets(-4, 0, -4, -1));
        jButtonLeft.setPreferredSize(new java.awt.Dimension(65, 19));
        jButtonLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLeftActionPerformed(evt);
            }
        });
        jPanelScroller.add(jButtonLeft);
        jButtonLeft.setBounds(0, 18, 19, 14);

        jButtonRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/arrow_right.png"))); // NOI18N
        jButtonRight.setToolTipText("select all");
        jButtonRight.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonRight.setMargin(new java.awt.Insets(-1, 0, -1, -1));
        jButtonRight.setPreferredSize(new java.awt.Dimension(65, 19));
        jButtonRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRightActionPerformed(evt);
            }
        });
        jPanelScroller.add(jButtonRight);
        jButtonRight.setBounds(33, 18, 19, 14);

        jSliderSourceScale.setMajorTickSpacing(1);
        jSliderSourceScale.setMinimum(1);
        jSliderSourceScale.setMinorTickSpacing(1);
        jSliderSourceScale.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderSourceScale.setPaintTicks(true);
        jSliderSourceScale.setSnapToTicks(true);
        jSliderSourceScale.setValue(21);
        jSliderSourceScale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSourceScaleStateChanged(evt);
            }
        });

        jLabelScale1.setText("Scale:");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Axis");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jSliderTop1.setMajorTickSpacing(30);
        jSliderTop1.setMaximum(360);
        jSliderTop1.setPaintTicks(true);
        jSliderTop1.setValue(0);
        jSliderTop1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderTop1StateChanged(evt);
            }
        });

        jSliderSide1.setMajorTickSpacing(30);
        jSliderSide1.setMaximum(360);
        jSliderSide1.setPaintTicks(true);
        jSliderSide1.setValue(0);
        jSliderSide1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSide1StateChanged(evt);
            }
        });

        jSliderFront1.setMajorTickSpacing(30);
        jSliderFront1.setMaximum(360);
        jSliderFront1.setPaintTicks(true);
        jSliderFront1.setValue(0);
        jSliderFront1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderFront1StateChanged(evt);
            }
        });

        jTextFieldTop2.setText("0");
        jTextFieldTop2.setPreferredSize(new java.awt.Dimension(20, 21));
        jTextFieldTop2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTop2ActionPerformed(evt);
            }
        });

        jTextFieldSide2.setText("0");
        jTextFieldSide2.setPreferredSize(new java.awt.Dimension(20, 21));

        jTextFieldFront2.setText("0");
        jTextFieldFront2.setPreferredSize(new java.awt.Dimension(20, 21));

        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });

        jCheckBox6.setSelected(true);
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });

        jCheckBox5.setSelected(true);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        jLabel14.setForeground(new java.awt.Color(0, 0, 255));
        jLabel14.setText("X-axis");

        jLabel18.setForeground(new java.awt.Color(204, 0, 204));
        jLabel18.setText("Z-axis");

        jLabel17.setForeground(new java.awt.Color(0, 204, 0));
        jLabel17.setText("Y-axis");

        jCheckBox2.setSelected(true);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox3.setSelected(true);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jLabel2.setText("X:");

        jLabel1.setText("Y:");

        jLabel3.setText("Z:");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("Grid");

        jLabel16.setText("Move");

        jCheckBoxRotateSelection.setText("rotate selection");
        jCheckBoxRotateSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRotateSelectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelXO, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelYO, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelZO, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox7))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBoxRotateSelection)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSliderSide1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                            .addComponent(jSliderFront1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSliderTop1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldTop2, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(jTextFieldSide2, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(jTextFieldFront2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxRotateSelection))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelYO, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldFront2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSliderFront1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jCheckBox2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelXO, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jTextFieldSide2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSliderSide1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelZO, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSliderTop1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextFieldTop2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSliderSourceScale, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleVectorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelScale1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabelScale, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanelScroller, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                    .addComponent(jCheckBox1))
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSliderSourceScale, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                    .addComponent(singleVectorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelScale1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabelScale, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanelScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpActionPerformed
        singleVectorPanel1.addYOffset(-singleVectorPanel1.getGridWidth());
        updateOutput();
        
    }//GEN-LAST:event_jButtonUpActionPerformed

    private void jButtonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownActionPerformed
        singleVectorPanel1.addYOffset(singleVectorPanel1.getGridWidth());
        updateOutput();
    }//GEN-LAST:event_jButtonDownActionPerformed

    private void jButtonLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLeftActionPerformed
        singleVectorPanel1.addXOffset(-singleVectorPanel1.getGridWidth());
        updateOutput();
    }//GEN-LAST:event_jButtonLeftActionPerformed

    private void jButtonRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRightActionPerformed
        singleVectorPanel1.addXOffset(singleVectorPanel1.getGridWidth());
        updateOutput();
    }//GEN-LAST:event_jButtonRightActionPerformed

    private void jSliderSourceScaleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSourceScaleStateChanged
        if (mClassSetting>0) return;
        int value = jSliderSourceScale.getValue();
        int max = jSliderSourceScale.getMaximum();

        double scale = value - ((max-1)/2);
        if (value <((max/2)+1))
        {
            value--;
            int invScale = ((max/2))-value;
            if (invScale == 0) 
                scale = 1;
            else
                scale = 1.0/invScale;
        }
        // smooth out "big steps"
        if (scale<1) scale += 0.25;
        if (scale>1) scale -= 0.75;
        if (scale>2) scale -= 0.5;
        if (scale>2.5) scale -= 0.25;
        if (scale>2.75) scale -= 0.5;
        singleVectorPanel1.setScale(scale);
        updateOutput();
    }//GEN-LAST:event_jSliderSourceScaleStateChanged

    private void jPanelScrollerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelScrollerMouseClicked
        if (evt.getClickCount() == 2) 
        {
            singleVectorPanel1.setOffsets(0, 0, 0);
        }
        updateOutput();

    }//GEN-LAST:event_jPanelScrollerMouseClicked

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        Container cc = getParent().getParent().getParent().getParent();
        if (cc instanceof CSAInternalFrame)
        {
            
            xpos = ((CSAInternalFrame)cc).getBounds().x;
            ypos = ((CSAInternalFrame)cc).getBounds().y;
            w = ((CSAInternalFrame)cc).getBounds().width;
            h = ((CSAInternalFrame)cc).getBounds().height;
        }
    }//GEN-LAST:event_formComponentResized

    public int xpos = 0;
    public int ypos = 0;
    public int w = 0;
    public int h = 0;
    
    private void singleVectorPanel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_singleVectorPanel1ComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_singleVectorPanel1ComponentResized

    private void jSliderFront1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderFront1StateChanged
        if (mClassSetting>0) return;
        int value = jSliderFront1.getValue();
        jTextFieldFront2.setText(""+value);
        if (jCheckBoxRotateSelection.isSelected())
        {
            selectionRotationX = value;
            return;
        }
        singleVectorPanel1.disableSingleRepaint();
singleVectorPanel1.enableSingleRepaint();
        singleVectorPanel1.setAxisAngleX(value);
singleVectorPanel1.updateAndRepaint();
        singleVectorPanel1.restoreSingleRepaint();
    }//GEN-LAST:event_jSliderFront1StateChanged

    private void jSliderSide1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSide1StateChanged
        if (mClassSetting>0) return;
        int value = jSliderSide1.getValue();
        jTextFieldSide2.setText(""+value);
        singleVectorPanel1.disableSingleRepaint();
singleVectorPanel1.enableSingleRepaint();
        singleVectorPanel1.setAxisAngleY(value);
singleVectorPanel1.updateAndRepaint();
        singleVectorPanel1.restoreSingleRepaint();
    }//GEN-LAST:event_jSliderSide1StateChanged

    private void jSliderTop1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTop1StateChanged
        if (mClassSetting>0) return;
        int value = jSliderTop1.getValue();
        jTextFieldTop2.setText(""+value);
        singleVectorPanel1.disableSingleRepaint();
singleVectorPanel1.enableSingleRepaint();
        singleVectorPanel1.setAxisAngleZ(value);
singleVectorPanel1.updateAndRepaint();
        singleVectorPanel1.restoreSingleRepaint();
    }//GEN-LAST:event_jSliderTop1StateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        singleVectorPanel1.setAxisShown(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        singleVectorPanel1.setGridx(jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        singleVectorPanel1.setGridy(jCheckBox3.isSelected());
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        singleVectorPanel1.setGridz(jCheckBox4.isSelected());
    }//GEN-LAST:event_jCheckBox4ActionPerformed


    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        singleVectorPanel1.moveXAllowed = jCheckBox5.isSelected();
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        singleVectorPanel1.moveYAllowed = jCheckBox6.isSelected();
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        singleVectorPanel1.moveZAllowed = jCheckBox7.isSelected();
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jTextFieldTop2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTop2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTop2ActionPerformed

    private void jCheckBoxRotateSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRotateSelectionActionPerformed
        if (jCheckBoxRotateSelection.isSelected())
        {
            selectionRotationX = 0;
            selectionRotationY = 0;
            selectionRotationZ = 0;
            mClassSetting++;
            jSliderFront1.setValue(selectionRotationX);
            jSliderSide1.setValue(selectionRotationY);
            jSliderTop1.setValue(selectionRotationZ);
            jTextFieldFront2.setText(""+selectionRotationX);
            jTextFieldSide2.setText(""+selectionRotationY);
            jTextFieldTop2.setText(""+selectionRotationZ);
            mClassSetting--;
        }
        else
        {
            selectionRotationX = 0;
            selectionRotationY = 0;
            selectionRotationZ = 0;
            mClassSetting++;
            
            jSliderFront1.setValue(singleVectorPanel1.getAxisAngleX());
            jSliderSide1.setValue(singleVectorPanel1.getAxisAngleY());
            jSliderTop1.setValue(singleVectorPanel1.getAxisAngleZ());
            jTextFieldFront2.setText(""+singleVectorPanel1.getAxisAngleX());
            jTextFieldSide2.setText(""+singleVectorPanel1.getAxisAngleY());
            jTextFieldTop2.setText(""+singleVectorPanel1.getAxisAngleZ());
            mClassSetting--;
        }
    }//GEN-LAST:event_jCheckBoxRotateSelectionActionPerformed
    public static SingleVecciPanel3d showSingleVecciPanelNoModal(VeccyPanel v)
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        SingleVecciPanel3d panel = new SingleVecciPanel3d(v);
        
        ((CSAMainFrame)Configuration.getConfiguration().getMainFrame()).addAsWindow(panel, 919, 387, "Vector: Editor 3d");
       return panel;
    }        
    public SingleVectorPanel getSVP()
    {
        return singleVectorPanel1;
    }

    void updateOutput()
    {
        if (mClassSetting>0) return;
        mClassSetting++;

        jLabelScale.setText(" "+new DecimalFormat("#.##").format(singleVectorPanel1.getScale()));
        jLabelXO.setText(" "+singleVectorPanel1.getXOffset());
        jLabelYO.setText(" "+singleVectorPanel1.getYOffset());
        jLabelZO.setText(" "+singleVectorPanel1.getZOffset());
        mClassSetting--;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDown;
    private javax.swing.JButton jButtonLeft;
    private javax.swing.JButton jButtonRight;
    private javax.swing.JButton jButtonUp;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBoxRotateSelection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelScale;
    private javax.swing.JLabel jLabelScale1;
    private javax.swing.JLabel jLabelXO;
    private javax.swing.JLabel jLabelYO;
    private javax.swing.JLabel jLabelZO;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelScroller;
    private javax.swing.JSlider jSliderFront1;
    private javax.swing.JSlider jSliderSide1;
    private javax.swing.JSlider jSliderSourceScale;
    private javax.swing.JSlider jSliderTop1;
    private javax.swing.JTextField jTextFieldFront2;
    private javax.swing.JTextField jTextFieldSide2;
    private javax.swing.JTextField jTextFieldTop2;
    private de.malban.graphics.SingleVector3dPanel singleVectorPanel1;
    // End of variables declaration//GEN-END:variables

    void setSettings(VecciSettings settings)
    {
        mClassSetting++;
        Container cc = getParent().getParent().getParent().getParent();
        if (cc instanceof CSAInternalFrame)
        {
            ((CSAInternalFrame)cc).setBounds(settings.singleVecciX, settings.singleVecciY, settings.singleVecciW, settings.singleVecciH);
             xpos = ((CSAInternalFrame)cc).getBounds().x;
             ypos = ((CSAInternalFrame)cc).getBounds().y;
             w = ((CSAInternalFrame)cc).getBounds().width;
             h = ((CSAInternalFrame)cc).getBounds().height;
        }
        jSliderSourceScale.setValue(settings.singleVecciScaleSlider);
        int value = jSliderSourceScale.getValue();
        int max = jSliderSourceScale.getMaximum();
        double scale = value - ((max-1)/2);
        if (value <((max/2)+1))
        {
            int invScale = ((max/2)+2)-value;
            scale = 1.0/invScale;
        }
        jLabelScale.setText("Scale: "+new DecimalFormat("#.##").format(scale));
        final double val = scale;
        SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                singleVectorPanel1.setScale(val);
                singleVectorPanel1.setGrid(settings.isGrid, settings.gridSize);
                singleVectorPanel1.repaint();
                singleVectorPanel1.sharedRepaint();
            }
        });
        
        
        mClassSetting--;
        updateOutput();
    }
    int getScaleSlider()
    {
        return jSliderSourceScale.getValue();
    }
    public void moved(EditMouseEvent evt)
    {
        if (!((evt.dragging) && (evt.ctrlPressed))) return;
        updateOutput();
    }
    public void deIconified() { }
}


