/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.vide.veccy;

import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.graphics.GFXVectorAnimation;
import de.malban.graphics.GFXVectorList;
import de.malban.gui.HotKey;
import de.malban.gui.components.ModalInternalFrame;
import de.muntjak.tinylookandfeel.Theme;
import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author malban
 */
public class VectorListFileChoserJPanel extends javax.swing.JPanel {
    String filePath = "";
    boolean isAnimation = false;
    ArrayList<String> files = new ArrayList<String>();
    String returnText = "";
    public String getStringRepresentation()
    {
        return returnText;
    }
    ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/vector.png"));
    /**
     * Creates new form VectorListFileChooserJPanel
     */
    public VectorListFileChoserJPanel(String filepath, boolean ia) {
        initComponents();
        if (Global.getOSName().toUpperCase().contains("MAC"))
        {
            HotKey.addMacDefaults(jTextFieldFileName);
        }
        isAnimation = ia;
        filePath = filepath;
        initTable();
        singleVectorPanel.setGrid(false, 1);
        if (isAnimation)
        {
            singleVectorPanel.setDelay(80);
            jLabel3.setText("All animations are stored in the directory:");
            jLabel4.setText("%VIDE%/xml/vectoranimation");
        }
        jLabel5.setVisible(isAnimation);
        singleVectorPanel.setByteFrame(false);
        singleVectorPanel.setAxisAngleX(0);
        singleVectorPanel.setAxisAngleY(0);
        singleVectorPanel.setAxisAngleZ(0);
        
        ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() 
        {
              public void valueChanged(ListSelectionEvent e) {
                tableSelectionChanged();
              }
        });        
        
        updateMyUI(); 
    }
    void updateMyUI()
    {
        int fontSize = Theme.textFieldFont.getFont().getSize();
        int rowHeight = fontSize+2;
        jTable1.setRowHeight(rowHeight);
    }
    void setExportTypesVisible(boolean showExportTypes)
    {
        jButtonOk.setVisible(!showExportTypes);
        jPanel2.setVisible(showExportTypes);
     //   singleVectorPanel.setBounds(0,0,200,200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldFileName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        singleVectorPanel = new de.malban.graphics.Single3dDisplayPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButtonMov_Draw_VLc_a = new javax.swing.JButton();
        jButtonDraw_VLc = new javax.swing.JButton();
        jButtonDraw_VLp = new javax.swing.JButton();
        jButtonDraw_VL_mode = new javax.swing.JButton();
        jButtonCodeGen = new javax.swing.JButton();

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonOk.setText("Ok");
        jButtonOk.setName("create"); // NOI18N
        jButtonOk.setPreferredSize(new java.awt.Dimension(0, 21));

        jButtonCancel.setText("Cancel");
        jButtonCancel.setPreferredSize(new java.awt.Dimension(0, 21));

        jLabel1.setText("Filename:");

        jTextFieldFileName.setPreferredSize(new java.awt.Dimension(0, 21));

        jLabel2.setText("Filename:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "XML" }));
        jComboBox1.setEnabled(false);
        jComboBox1.setPreferredSize(new java.awt.Dimension(0, 21));

        jLabel3.setText("All vectorlists are stored in the directory:");

        jLabel4.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel4.setText("%VIDE%/xml/vectorlist");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(5, 5, 5))
        );

        singleVectorPanel.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout singleVectorPanelLayout = new javax.swing.GroupLayout(singleVectorPanel);
        singleVectorPanel.setLayout(singleVectorPanelLayout);
        singleVectorPanelLayout.setHorizontalGroup(
            singleVectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        singleVectorPanelLayout.setVerticalGroup(
            singleVectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        jLabel5.setText("animation");

        jButtonMov_Draw_VLc_a.setText("Mov_Draw_VLc_a");
        jButtonMov_Draw_VLc_a.setToolTipText("<html>\n<B>Mov_Draw_VLc_a</B>        <BR>                                  \n                                                <BR>                            \nThis routine moves to the first location specified in vector list,    <BR>     \nand then draws lines between the rest of coordinates in the list.    <BR>      \nThe number of vectors to draw is specified as the first byte in the   <BR>     \nvector list.  The current scale factor is used.  The vector list has  <BR>     \nthe following format:                                                 <BR>     \n                                       <BR>                                  \n<PRE>\n   count, rel y, rel x, rel y, rel x, ... \n</PRE>\n<BR>     \n</html>");
        jButtonMov_Draw_VLc_a.setEnabled(false);
        jButtonMov_Draw_VLc_a.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonMov_Draw_VLc_a.setName("create"); // NOI18N
        jButtonMov_Draw_VLc_a.setPreferredSize(new java.awt.Dimension(160, 21));
        jButtonMov_Draw_VLc_a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMov_Draw_VLc_aActionPerformed(evt);
            }
        });

        jButtonDraw_VLc.setText("Draw_VLc");
        jButtonDraw_VLc.setToolTipText("<html>\n<B>Draw_VLc</B>        <BR>                                  \n                                                <BR>                            \nThis routine draws vectors between the set of (y,x) points pointed    <BR>     \nto by the X register.  The number of vectors to draw is specified     <BR>     \nas the first byte in the vector list.  The current scale factor is    <BR>     \nused.  The vector list has the following format:                      <BR>  \n<BR>\n<PRE>\n   count, rel y, rel x, rel y, rel x, ... \n</PRE>\n<BR>     \n</html>\n\n\n   \n");
        jButtonDraw_VLc.setEnabled(false);
        jButtonDraw_VLc.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonDraw_VLc.setName("create"); // NOI18N
        jButtonDraw_VLc.setPreferredSize(new java.awt.Dimension(160, 21));
        jButtonDraw_VLc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDraw_VLcActionPerformed(evt);
            }
        });

        jButtonDraw_VLp.setText("Draw_VLp");
        jButtonDraw_VLp.setToolTipText("<html>\n<B>Draw_VLp</B>        <BR>                                  \n                                                <BR>                            \nThis routine draws patterned lines using the vector list pointed to   <BR>\nby the X-register.  The current scale factor is used.  The vector   <BR>\nlist has the following format: <BR>\n<BR>\n<PRE>\n      pattern, rel y, rel x                                           \n      pattern, rel y, rel x                                           \n         .      .      .                                              \n         .      .      .                                              \n      pattern, rel y, rel x                                           \n      0x01 \n</PRE>\n<BR>     \n</html>\n");
        jButtonDraw_VLp.setEnabled(false);
        jButtonDraw_VLp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonDraw_VLp.setName("create"); // NOI18N
        jButtonDraw_VLp.setPreferredSize(new java.awt.Dimension(160, 21));
        jButtonDraw_VLp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDraw_VLpActionPerformed(evt);
            }
        });

        jButtonDraw_VL_mode.setText("Draw_VL_mode");
        jButtonDraw_VL_mode.setToolTipText("<html>\n<B>Draw_VL_mode</B>        <BR>                                  \n                                                <BR>                            \nThis routine processes the vector list pointed to by the X register.  <BR> \nThe current scale factor is used.  The vector list has the following  <BR> \nformat: <BR> \n<BR>\n<PRE>\n     mode, rel y, rel x,                                             \n     mode, rel y, rel x,                                             \n     .      .      .                                                \n     .      .      .                                                \n     mode, rel y, rel x,                                             \n     0x01  \n</PRE>\n<BR>\nwhere mode has the following meaning:         <BR>                        \n                                              <BR>                    \n< 0  use the pattern in $C829        <BR>                           \n= 0  move to specified endpoint      <BR>                           \n= 1  end of list, so return         <BR>                            \n> 1  draw to specified endpoint <BR>\n<BR>     \n</html>\n");
        jButtonDraw_VL_mode.setEnabled(false);
        jButtonDraw_VL_mode.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonDraw_VL_mode.setName("create"); // NOI18N
        jButtonDraw_VL_mode.setPreferredSize(new java.awt.Dimension(160, 21));
        jButtonDraw_VL_mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDraw_VL_modeActionPerformed(evt);
            }
        });

        jButtonCodeGen.setText("Code generation");
        jButtonCodeGen.setToolTipText("");
        jButtonCodeGen.setEnabled(false);
        jButtonCodeGen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonCodeGen.setName("create"); // NOI18N
        jButtonCodeGen.setPreferredSize(new java.awt.Dimension(160, 21));
        jButtonCodeGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCodeGenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonMov_Draw_VLc_a, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButtonDraw_VLc, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButtonDraw_VLp, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButtonDraw_VL_mode, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButtonCodeGen, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButtonMov_Draw_VLc_a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDraw_VLc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDraw_VLp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDraw_VL_mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jButtonCodeGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(singleVectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(singleVectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(jTextFieldFileName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(270, 270, 270))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        JTable table =(JTable) evt.getSource();
        Point p = evt.getPoint();
        int row = table.rowAtPoint(p);
        int col = table.columnAtPoint(p);

        if (evt.getClickCount() == 2) 
        {
            Component c = getParent();
            if (c == null) return;
            Component c2 = c.getParent();
            if (c2 == null) return;
            Component c3 = c2.getParent();
            if (c3 == null) return;
            Component c4 = c3.getParent();
            if (c4 == null) return;
            if (!(c4 instanceof ModalInternalFrame))
            {
                return;
            }
            ModalInternalFrame modal = (ModalInternalFrame) c4;
            modal.modalExit(true);
        }   

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonMov_Draw_VLc_aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMov_Draw_VLc_aActionPerformed
        String name = getChosenFilename();
        if (name.trim().length() == 0) return;
        
        File f = new File(name);
        if (!f.exists()) return;
        if (!f.isFile()) return;
        if (!name.toUpperCase().endsWith(".XML")) return;
        name = f.getName();
        name = name.substring(0, name.length()-4);

        if (isAnimation)
        {   
            GFXVectorAnimation animation = new GFXVectorAnimation(getChosenFilename());
            returnText = animation.createASMMov_Draw_VLc_a(name, false);
            return;
        }
        
        GFXVectorList vl = singleVectorPanel.getForegroundVectorList();
        
        returnText = vl.createASMMov_Draw_VLc_a(true, name, false);

    }//GEN-LAST:event_jButtonMov_Draw_VLc_aActionPerformed

    private void jButtonDraw_VLcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDraw_VLcActionPerformed
        String name = getChosenFilename();
        if (name.trim().length() == 0) return;
        
        File f = new File(name);
        if (!f.exists()) return;
        if (!f.isFile()) return;
        if (!name.toUpperCase().endsWith(".XML")) return;
        name = f.getName();
        name = name.substring(0, name.length()-4);
        
        if (isAnimation)
        {   
            GFXVectorAnimation animation = new GFXVectorAnimation(getChosenFilename());
            returnText = animation.createASMMov_Draw_VLc_a(name, false);
            return;
        }
        
        GFXVectorList vl = singleVectorPanel.getForegroundVectorList();
        returnText = vl.createASMMov_Draw_VLc_a(false, name, false);
        
    }//GEN-LAST:event_jButtonDraw_VLcActionPerformed

    private void jButtonDraw_VLpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDraw_VLpActionPerformed
        String name = getChosenFilename();
        if (name.trim().length() == 0) return;
        
        File f = new File(name);
        if (!f.exists()) return;
        if (!f.isFile()) return;
        if (!name.toUpperCase().endsWith(".XML")) return;
        name = f.getName();
        name = name.substring(0, name.length()-4);
        if (isAnimation)
        {   
            GFXVectorAnimation animation = new GFXVectorAnimation(getChosenFilename());
            returnText = animation.createASMDraw_VLp(name, false);
            return;
        }
        GFXVectorList vl = singleVectorPanel.getForegroundVectorList();
        returnText = vl.createASMDraw_VLp(name, false, false);
        
    }//GEN-LAST:event_jButtonDraw_VLpActionPerformed

    private void jButtonDraw_VL_modeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDraw_VL_modeActionPerformed
        String name = getChosenFilename();
        if (name.trim().length() == 0) return;
        
        File f = new File(name);
        if (!f.exists()) return;
        if (!f.isFile()) return;
        if (!name.toUpperCase().endsWith(".XML")) return;
        name = f.getName();
        name = name.substring(0, name.length()-4);
        if (isAnimation)
        {   
            GFXVectorAnimation animation = new GFXVectorAnimation(getChosenFilename());
            returnText = animation.createASMDraw_VL_mode(name, true, false);
            return;
        }
        GFXVectorList vl = singleVectorPanel.getForegroundVectorList();
        returnText = vl.createASMDraw_VL_mode(name, false, false);
    }//GEN-LAST:event_jButtonDraw_VL_modeActionPerformed

    private void jButtonCodeGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCodeGenActionPerformed
        String name = getChosenFilename();
        if (name.trim().length() == 0) return;
        
        File f = new File(name);
        if (!f.exists()) return;
        if (!f.isFile()) return;
        if (!name.toUpperCase().endsWith(".XML")) return;
        name = f.getName();
        name = name.substring(0, name.length()-4);
        if (isAnimation)
        {   
            GFXVectorAnimation animation = new GFXVectorAnimation(getChosenFilename());
            returnText = animation.createASMCodeGen(name);
            return;
        }
        GFXVectorList vl = singleVectorPanel.getForegroundVectorList();
        returnText = vl.createASMCodeGen(name);
    }//GEN-LAST:event_jButtonCodeGenActionPerformed

    void tableSelectionChanged() 
    {
        singleVectorPanel.clearVectors();
        int row = jTable1.getSelectedRow();
        if (row == -1)
        {
            int[] selectedRow = jTable1.getSelectedRows();
            if (selectedRow.length==0) return;
                row = selectedRow[0];
        }
        if ((row >=0) && (row <files.size()))
        {
            jTextFieldFileName.setText(files.get(row));
            if (isAnimation)
            {
                GFXVectorAnimation animation = new GFXVectorAnimation(getChosenFilename());
                if (animation.isAnimation)
                {
                    
    singleVectorPanel.setAnimation(new GFXVectorAnimation());
    singleVectorPanel.setDelay(-1);
                    
                    
                    singleVectorPanel.setDelay(80);
                    singleVectorPanel.setAnimation(animation);
                    jLabel5.setText("animation");
                }
                else
                {
                    // scenario
                    singleVectorPanel.setAnimation(new GFXVectorAnimation());
                    singleVectorPanel.setDelay(-1);
                    jLabel5.setText("scenario");

                    // build list with all stuff
                    GFXVectorList vl = new GFXVectorList();
                    for (int i=0; i<animation.size(); i++)
                    {
                        vl.add(animation.get(i));
                    }
                    vl.connectWherePossible(false);

                    singleVectorPanel.setForegroundVectorList(vl);
                    
                }
                

                // export Anims
                jButtonMov_Draw_VLc_a.setEnabled(true);
                jButtonDraw_VLc.setEnabled(animation.isAnimation);
                jButtonDraw_VLp.setEnabled(animation.isAnimation);
                jButtonDraw_VL_mode.setEnabled(true);
                jButtonCodeGen.setEnabled(true);


                boolean allSamePattern = animation.isAllSamePattern();
                boolean allContinuous = animation.isCompleteRelative();
                boolean allHighPattern = animation.isAllPatternHigh(true);


                if (!allSamePattern)
                {
                    jButtonMov_Draw_VLc_a.setEnabled(false);
                    jButtonDraw_VLc.setEnabled(false);
                }
                if (!allContinuous)
                {
                    jButtonMov_Draw_VLc_a.setEnabled(false);
                    jButtonDraw_VLc.setEnabled(false);
                    jButtonDraw_VLp.setEnabled(false);
                    jButtonDraw_VL_mode.setEnabled(false);
                    jButtonCodeGen.setEnabled(false);
                }
                if (!allHighPattern)
                {
                    jButtonDraw_VLp.setEnabled(false);
                }                   
                
                
                
                
            }
            else
            {
                singleVectorPanel.addForegroundVectorList(new GFXVectorList(getChosenFilename()));
                Rectangle b = singleVectorPanel.getBounds();
                b.height=200;
                b.width=200;
        singleVectorPanel.setBounds(b);
                
                GFXVectorList vl = singleVectorPanel.getForegroundVectorList();
                
                // export vectorlist
                jButtonMov_Draw_VLc_a.setEnabled(true);
                jButtonDraw_VLc.setEnabled(true);
                jButtonDraw_VLp.setEnabled(true);
                jButtonDraw_VL_mode.setEnabled(true);
                jButtonCodeGen.setEnabled(true);
                if (!vl.isAllSamePattern())
                {
                    jButtonMov_Draw_VLc_a.setEnabled(false);
                    jButtonDraw_VLc.setEnabled(false);
                }
                if (!vl.isCompleteRelative())
                {
                    jButtonMov_Draw_VLc_a.setEnabled(false);
                    jButtonDraw_VLc.setEnabled(false);
                    jButtonDraw_VLp.setEnabled(false);
                    jButtonDraw_VL_mode.setEnabled(false);
                    jButtonCodeGen.setEnabled(false);
                }
                if (!vl.isAllPatternHigh(true))
                {
                    jButtonDraw_VLp.setEnabled(false);
                }
                if ((vl.getXMaxLength()>127) || (vl.getYMaxLength()>127)|| (vl.getZMaxLength()>127))
                {
                    jButtonMov_Draw_VLc_a.setEnabled(false);
                    jButtonDraw_VLc.setEnabled(false);
                    jButtonDraw_VLp.setEnabled(false);
                    jButtonDraw_VL_mode.setEnabled(false);
                    jButtonCodeGen.setEnabled(false);
                }
                
            }
            singleVectorPanel.scaleToFit();
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCodeGen;
    private javax.swing.JButton jButtonDraw_VL_mode;
    private javax.swing.JButton jButtonDraw_VLc;
    private javax.swing.JButton jButtonDraw_VLp;
    private javax.swing.JButton jButtonMov_Draw_VLc_a;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldFileName;
    private de.malban.graphics.Single3dDisplayPanel singleVectorPanel;
    // End of variables declaration//GEN-END:variables


    ModalInternalFrame modelDialog;
    public static String showSavePanel(String fileName, String title, boolean ia)
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        VectorListFileChoserJPanel panel = new VectorListFileChoserJPanel(fileName,ia);
        ArrayList<JButton> eb= new ArrayList<JButton>();
        eb.add(panel.jButtonOk);
        eb.add(panel.jButtonCancel);
        ModalInternalFrame modal = new ModalInternalFrame(title, frame.getRootPane(), frame, panel,null, null , eb);
        
        modal.setResizable(true);
        panel.modelDialog = modal;
        modal.setVisible(true);
        panel.singleVectorPanel.setDelay(-1);
        String result = modal.getNamedExit();
        if ((result.equals("create")) || (modal.isManualOkExit()))
        {
            modal = null;
            String saveName = panel.getChosenFilename();
            panel = null;
            if ((saveName!=null) && (saveName.length()!=0))
                return saveName;
        }
        panel = null;
        modal = null;
        return null;
    }     
    public static String showLoadPanel(String fileName, String title, boolean ia)
    {
        return showLoadPanel( fileName,  title,  ia, false);
    }
    
    
    public static String showLoadPanel(String fileName, String title, boolean ia, boolean showExportTypes)
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        VectorListFileChoserJPanel panel = new VectorListFileChoserJPanel(fileName, ia);
        panel.setExportTypesVisible(showExportTypes);
        ArrayList<JButton> eb= new ArrayList<JButton>();
        eb.add(panel.jButtonOk);
        eb.add(panel.jButtonCancel);
        eb.add(panel.jButtonMov_Draw_VLc_a);
        eb.add(panel.jButtonDraw_VLc);
        eb.add(panel.jButtonDraw_VLp);
        eb.add(panel.jButtonDraw_VL_mode);
        eb.add(panel.jButtonCodeGen);
        ModalInternalFrame modal = new ModalInternalFrame(title, frame.getRootPane(), frame, panel,null, null , eb);
        
        modal.setResizable(true);
        panel.modelDialog = modal;
        panel.jTextFieldFileName.setEnabled(false);
        modal.setVisible(true);
        
        String result = modal.getNamedExit();
        if ((result.equals("create")) || (modal.isManualOkExit()))
        {
            String loadName = panel.getChosenFilename();
            if ((loadName!=null) && (loadName.length()!=0))
            {
                if (showExportTypes)
                    return panel.returnText;
                return loadName;

            }
        }
        
        return null;
    }         
    public class FileTableModel extends AbstractTableModel
    {    
        String[] columns = {"Filename"};

        @Override
        public String getColumnName(int col) {
            return columns[col];
        }
        @Override
        public int getRowCount() {
            return files.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }
        @Override
        public Object getValueAt(int row, int col) {
            return files.get(row);
        }
        public Class<?> getColumnClass(int col) 
        {
            return Object.class;
        }
        public boolean isCellEditable(int row, int col) 
        {
            return false;
        }
    }    
    
    boolean initTable()
    {
        File directory = new File(filePath);
        if (!directory.isDirectory())
        {
            if (directory.getParent()!=null)
                directory = new File(directory.getParent());
            if (!directory.isDirectory()) return false;
        }
        filePath = directory.toString();
        // get all the files from a directory
        File[] fList = directory.listFiles();
        Arrays.sort(fList, new Comparator<File>()
                {
                    @Override
                    public int compare(File f1, File f2)
                    {
                        if (f1 == null) return 1;
                        if (f2 == null) return -1;
                        if ((f1.isDirectory()) && (!f2.isDirectory())) return -1;
                        if ((f2.isDirectory()) && (!f1.isDirectory())) return 1;
                        return f1.getName().toLowerCase().compareTo(f2.getName().toLowerCase());
                    }
                });
        for (File file : fList) 
        {
            if (!file.getName().contains(".xml")) continue;
            files.add(file.getName());
        }
        jTable1.setTableHeader(null);
        jTable1.setModel(new FileTableModel());
        jTable1.setFillsViewportHeight(true);
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer()
        {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) 
            {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                if (table.getModel() instanceof FileTableModel)
                {
                    FileTableModel model = (FileTableModel)table.getModel();
                }
                if (c instanceof JLabel)
                {
                    ((JLabel)c).setIcon(icon);
                }
                return this;
            }   
        });        
        return true;
        
    }
    String getChosenFilename()
    {
        String name = jTextFieldFileName.getText();
        if (name.trim().length() == 0)
        {
            int i = jTable1.getSelectedRow();
            if (i<0) return null;
            name = files.get(i);
        }
        if (!filePath.endsWith(File.separator))
        {
            if (filePath.trim().length() != 0)
                name = filePath + File.separator+name;
            else
                name = filePath + name;            
        }
        else
            name = filePath +name;
        return name;
    }
    
}
