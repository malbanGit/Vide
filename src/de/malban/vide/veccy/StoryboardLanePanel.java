/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.vide.veccy;

import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.graphics.GFXVectorAnimation;
import de.malban.gui.panels.LogPanel;
import static de.malban.gui.panels.LogPanel.WARN;
import de.malban.util.XMLSupport;
import java.awt.Color;
import java.awt.Component;
import java.awt.Rectangle;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author malban
 */
public class StoryboardLanePanel extends javax.swing.JPanel {
    LogPanel log = (LogPanel) Configuration.getConfiguration().getDebugEntity();
    private static int uidcount=0;
    private int uid = (uidcount++);
    ArrayList<StoryboardElement> elements = new ArrayList<StoryboardElement>();
    /**
     * Creates new form StoryboardLanePanel
     */
    StoryboardPanelInterface sb = null;
    public StoryboardLanePanel() {
        initComponents();
    }
   
    public boolean isVersion1()
    {
        for (StoryboardElement element : elements)
        {
            if (element.version == 1) return true;
        }
        return false;
    }
    public StoryboardLanePanel(StoryboardPanelInterface s) {
        initComponents();
        remove(storyelement);
        sb = s;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        storyelement = new de.malban.graphics.Single3dDisplayPanel();
        jButtonOneForward = new javax.swing.JButton();
        jButtonOneBack = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        setLayout(null);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/add.png"))); // NOI18N
        jButton4.setPreferredSize(new java.awt.Dimension(20, 20));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4);
        jButton4.setBounds(1, 1, 20, 20);

        storyelement.setMaximumSize(new java.awt.Dimension(150, 150));
        storyelement.setMinimumSize(new java.awt.Dimension(150, 150));

        javax.swing.GroupLayout storyelementLayout = new javax.swing.GroupLayout(storyelement);
        storyelement.setLayout(storyelementLayout);
        storyelementLayout.setHorizontalGroup(
            storyelementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        storyelementLayout.setVerticalGroup(
            storyelementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        add(storyelement);
        storyelement.setBounds(26, 1, 120, 77);

        jButtonOneForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/arrow_right.png"))); // NOI18N
        jButtonOneForward.setToolTipText("moves one to the right.");
        jButtonOneForward.setPreferredSize(new java.awt.Dimension(20, 20));
        jButtonOneForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOneForwardActionPerformed(evt);
            }
        });
        add(jButtonOneForward);
        jButtonOneForward.setBounds(1, 22, 20, 20);

        jButtonOneBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/arrow_left.png"))); // NOI18N
        jButtonOneBack.setToolTipText("moves one to the left.");
        jButtonOneBack.setPreferredSize(new java.awt.Dimension(20, 20));
        jButtonOneBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOneBackActionPerformed(evt);
            }
        });
        add(jButtonOneBack);
        jButtonOneBack.setBounds(1, 43, 20, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        addStoryelement(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
            sb.setElement(null, this);
    }//GEN-LAST:event_formMousePressed

    private void jButtonOneForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOneForwardActionPerformed
        StoryboardLanePanel lane = sb.getCurrentLane();
        if (lane != this) return;
        StoryboardElement element = sb.getCurrentElement();
        if (element == null) return;
        
        int index = elements.indexOf(element);
        if (index == -1) return;
        if (index == elements.size()-1) return;
        
        
        Component[] cs = this.getComponents();
        int cindex = -1;
        for (int i=0; i< cs.length; i++)
        {
            if (cs[i] == element)
            {
                cindex = i;
                break;
            }
        }
        
        if (cindex == -1) return;
        if (cindex == cs.length-1) return;
        
        elements.remove(index);
        elements.add(index+1, element);

        remove(cindex);
        add(element, cindex+1);
        reorder();

        sb.updateBounds();
        sb.setElement(element, this);
        repaint();
    }//GEN-LAST:event_jButtonOneForwardActionPerformed

    private void jButtonOneBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOneBackActionPerformed
        StoryboardLanePanel lane = sb.getCurrentLane();
        if (lane != this) return;
        StoryboardElement element = sb.getCurrentElement();
        if (element == null) return;
        
        int index = elements.indexOf(element);
        if (index == -1) return;
        if (index == 0) return;
        
        
        Component[] cs = this.getComponents();
        int cindex = -1;
        for (int i=0; i< cs.length; i++)
        {
            if (cs[i] == element)
            {
                cindex = i;
                break;
            }
        }
        
        if (cindex == -1) return;
        if (cindex == 0) return;
        
        elements.remove(index);
        elements.add(index-1, element);

        remove(cindex);
        add(element, cindex-1);
        reorder();
        sb.updateBounds();
        sb.setElement(element, this);
        repaint();
    }//GEN-LAST:event_jButtonOneBackActionPerformed

    private void storyelementMousePressed(java.awt.event.MouseEvent evt) {                                          
        if (evt.getSource() instanceof StoryboardElement)
        {
            sb.setElement((StoryboardElement) evt.getSource(), this);
        }
    }                                         
    StoryboardElement addStoryelement(boolean setIt)
    {
        StoryboardElement se = new StoryboardElement();
        se.setAxisAngleX(0);
        se.setAxisAngleY(0);
        se.setAxisAngleZ(0);

        se.version = sb.getVersion();
        
        se.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                storyelementMousePressed(evt);
            }
        });

        
        add(se);
        se.setBounds(26+elements.size()*130, 1, 120, 77);
         
         
        elements.add(se);
        Rectangle bounds = getBounds();
        bounds.width = bounds.width+130;
        setBounds(bounds);
        sb.updateBounds();
        if (setIt)
            sb.setElement(se, this);
        return se;
    }
    void reorder()
    {
        int width = 26;
        int count = 0;
        for (int i = 0; i< getComponentCount(); i++)
        {
            Component c = getComponent(i);
            if (c instanceof StoryboardElement)
            {
                
                StoryboardElement e = (StoryboardElement)c;
                e.setBounds(26+count*130, 1, 120, 77);
                count++;
                width+=130;
            }
        }
        Rectangle bounds = getBounds();
        bounds.width = width;
        setBounds(bounds);
        sb.updateBounds();

        repaint();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonOneBack;
    private javax.swing.JButton jButtonOneForward;
    private de.malban.graphics.Single3dDisplayPanel storyelement;
    // End of variables declaration//GEN-END:variables

    public boolean toXML(StringBuilder s, String tag)
    {
        s.append("<").append(tag).append(">\n");
        boolean ok = true;
        for(StoryboardElement l: elements)
        {
            ok = ok & l.toXML(s, "SBElement");
        }
        
        s.append("</").append(tag).append(">\n");
        return ok;        
    }
    
    // a xml "list" of an arbitrary number of GFXVectors
    public boolean fromXML(StringBuilder xml, XMLSupport xmlSupport)
    {
        elements = new ArrayList<StoryboardElement>();
        int errorCode = 0;
        StringBuilder xmlBuffer = new StringBuilder(xml);
        StringBuilder oneElement = null;
        do {
            oneElement = xmlSupport.removeTag("SBElement", xmlBuffer);
            if (oneElement==null) break;
            errorCode|=xmlSupport.errorCode;
            
            StoryboardElement se = addStoryelement(false);

            se.fromXML(oneElement, xmlSupport);
            errorCode|=xmlSupport.errorCode;
            
            if (!se.pause)
            {
                GFXVectorAnimation currentAnimation = new GFXVectorAnimation();
                boolean ok = currentAnimation.loadFromXML(Global.mainPathPrefix+se.listName);
                if (ok)
                {
                    se.setAnimation(currentAnimation);
                    se.setDelay(se.delay);
                    sb.setElement(se, this);
                }
                else
                {
                    log.addLog("Storyboard animation could not be loaded: "+se.listName, WARN);
                    continue;
                }
            }
            else
            {
                sb.setElement(se, this);
            }
            
        } while (true);
        
        if (errorCode!= 0) return false;
        return true;
    }    
    public void setLaneSelected(boolean s)
    {
        if (s)
            setBorder(javax.swing.BorderFactory.createLineBorder(Color.GREEN));
        else
            setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
    }
    void removeElement(StoryboardElement element)
    {
        remove(element);
        elements.remove(element);
        reorder();
    }
    void getAnimData(ArrayList<String> animData, HashMap<String, String> noDoubleAnimMap)
    {
        StringBuilder t0 = new StringBuilder();
        for (StoryboardElement element : elements)
        {
            StringBuilder t1 = new StringBuilder();
            if (element.disabled) continue;
            if (element.getAnimation() == null) continue;
            
            if (noDoubleAnimMap.get(element.listName) == null)
            {
                if (element.drawType.equals("synced extended"))
                {
                    // synced extended!
                    String name = "AnimList_"+(uidcount++)+"#_UNIQUE_ID#";
                    noDoubleAnimMap.put(element.listName, name);
                    int resync = element.resyncMax;
                    if (resync == 0) resync = 20;
                    element.getAnimation().createASMDraw_syncList(t1, name, true, resync, true, 127, sb.isNoAdditionalSyncOptimization(), "BLOW_UP_"+uidcount+"#_UNIQUE_ID#");
                    String text = "";
//                    text = de.malban.util.UtilityString.replace(text, "BLOW_UP", "BLOW_UP_"+uidcount);
                    if (element.factor == 0) element.factor = 1;
                    text = "BLOW_UP_"+uidcount+"#_UNIQUE_ID#"+" EQU "+element.factor+"\n\n"+t1.toString();
                    animData.add(text);
                }
                else if (element.drawType.equals("synced"))
                {
                    // synced !
                    String name = "AnimList_"+(uidcount++)+"#_UNIQUE_ID#";
                    noDoubleAnimMap.put(element.listName, name);
                    int resync = element.resyncMax;
                    if (resync == 0) resync = 20;
                    String text = "";
                    element.getAnimation().createASMDraw_syncList(t1, name, true, resync, false, 127, sb.isNoAdditionalSyncOptimization(), "BLOW_UP_"+uidcount+"#_UNIQUE_ID#");
//                    text = de.malban.util.UtilityString.replace(text, "BLOW_UP", "BLOW_UP_"+uidcount);
                    if (element.factor == 0) element.factor = 1;
                    text = "BLOW_UP_"+uidcount+"#_UNIQUE_ID#"+" EQU "+element.factor+"\n\n"+t1.toString();
                    animData.add(text);
                }
                else if (element.drawType.equals("Mov_Draw_VLc_a"))
                    ; //TODO
                else if (element.drawType.equals("Draw_VLc"))
                    ; //TODO
                else if (element.drawType.equals("Draw_VLp"))
                    ; //TODO
                else if (element.drawType.equals("Draw_VL_mode"))
                    ; //TODO
                else if (element.drawType.equals("AnimCodeGen"))
                    ; //TODO
                else 
                    ; //TODO
            }
        }
    }
    void getDrawRoutines(ArrayList<String> routineData, HashMap<String, String> noDoubleRoutineMap)
    {
        for (StoryboardElement element : elements)
        {
            if (element.disabled) continue;
            if (element.getAnimation() == null) continue;
            if (noDoubleRoutineMap.get(element.drawType) == null)
            {
                if (element.drawType.equals("synced extended"))
                {
                    // synced extended!
                    noDoubleRoutineMap.put(element.drawType, element.drawType);
                    Path template = Paths.get(Global.mainPathPrefix, "template", "animationDraw_esync.template");

                    String text = de.malban.util.UtilityString.readTextFileToOneString(new File(template.toString()));

                    text =  de.malban.util.UtilityString.deleteLinesBefore(text,";SUB_START");
                    text =  de.malban.util.UtilityString.deleteLinesAfter(text,";SUB_END");
                    routineData.add(text);
                }
                else if (element.drawType.equals("synced"))
                {
                    // synced !
                    noDoubleRoutineMap.put(element.drawType, element.drawType);
                    Path template = Paths.get(Global.mainPathPrefix, "template", "animationDraw_sync.template");

                    String text = de.malban.util.UtilityString.readTextFileToOneString(new File(template.toString()));

                    text =  de.malban.util.UtilityString.deleteLinesBefore(text,";SUB_START");
                    text =  de.malban.util.UtilityString.deleteLinesAfter(text,";SUB_END");
                    routineData.add(text);
                }
                else if (element.drawType.equals("Mov_Draw_VLc_a"))
                    ; //TODO
                else if (element.drawType.equals("Draw_VLc"))
                    ; //TODO
                else if (element.drawType.equals("Draw_VLp"))
                    ; //TODO
                else if (element.drawType.equals("Draw_VL_mode"))
                    ; //TODO
                else if (element.drawType.equals("AnimCodeGen"))
                    ; //TODO
                else 
                    ; //TODO
                
            }
        }
    }
    void getLaneInit(ArrayList<String> initCode)
    {
        String t = "\n";
        t+= " leau laneData,u \n";
        t+= " ldx #lane"+uid+"Data#_UNIQUE_ID# \n";
        t+= " jsr initLane\n";
        initCode.add(t);
     }
    void getLaneData(ArrayList<String> laneCode, HashMap<String, String> noDoubleAnimMap)
    {
        StringBuilder t = new StringBuilder();
        t.append("\n");
        t.append("lane"+uid+"Data#_UNIQUE_ID#: \n");
        int count = 1;

        for (StoryboardElement element : elements)
        {
            if (element.disabled) continue;
            if (element.getAnimation() == null) continue;
            t.append(" dw element_"+uid+""+(count++)+"#_UNIQUE_ID#\n");
        }
        t.append(" dw 0\n");

        count = 1;
        for (StoryboardElement element : elements)
        {
            if (element.disabled) continue;
            if (element.getAnimation() == null) continue;

            if (element.version == 1)
            {
                getElementDataV1(t, element, count, noDoubleAnimMap);
            }
            else if (element.version == 2)
            {
                getElementDataV2(t, element, count, noDoubleAnimMap);
            }
            count++;
        }
        
        laneCode.add(t.toString());
    }
    void getElementDataV1(StringBuilder t, StoryboardElement element, int count, HashMap<String, String> noDoubleAnimMap)
    {
        t.append("\n");
        t.append("element_"+uid+""+(count)+"#_UNIQUE_ID#:\n");
        if (element.pause)
            t.append(" dw 0\n");
        else
            t.append(" dw "+noDoubleAnimMap.get(element.listName)+"\n");
        t.append(" db "+element.vectrexdelay+"; delay\n");
        t.append(" db "+element.listScaleStart+"; scale start\n");
        t.append(" db "+element.listScaleDelay+"; scale delay\n");
        t.append(" db "+element.listScaleIncrease+"; scale increase\n");

        t.append(" db "+element.intensityStart+"; intensityStart\n");
        t.append(" db "+element.intensityDelay+"; intensityDelay\n");
        t.append(" db "+element.intensityIncrease+"; intensityIncrease\n");

        t.append(" db "+element.positionYStart+", "+element.positionXStart+"; position start (y,x)\n");
        t.append(" db "+element.positionYDelay+", "+element.positionXDelay+"; position delay (y,x)\n");
        t.append(" db "+element.positionYIncrease+", "+element.positionXIncrease+"; position increase (y,x)\n");
        t.append(" db "+element.moveScale+"; move scale\n");
        if (element.pause)
        {
            t.append(" dw draw_pause; draw pause\n");
        }
        else
        {
            if (element.drawType.equals("synced extended"))
                t.append(" dw draw_esynced_list; draw jsr\n");
            else if (element.drawType.equals("synced"))
                t.append(" dw draw_synced_list; draw jsr\n");
            else if (element.drawType.equals("Mov_Draw_VLc_a"))
                t.append(" dw Mov_Draw_VLc_a; draw jsr\n");
            else if (element.drawType.equals("Draw_VLc"))
                t.append(" dw Draw_VLc; draw jsr\n");
            else if (element.drawType.equals("Draw_VLp"))
                t.append(" dw Draw_VLp; draw jsr\n");
            else if (element.drawType.equals("Draw_VL_mode"))
                t.append(" dw Draw_VL_mode; draw jsr\n");
            else if (element.drawType.equals("AnimCodeGen"))
                t.append(" dw AnimCodeGen; draw jsr\n");
            else 
                t.append(" dw 0; draw UNKOWN\n");
        }

        String behaviour ="BEHAVIOUR_NONE";
        if (element.loop)
        {
            behaviour +="+BEHAVIOUR_LOOP";
        }
        if (element.pause)
        {
            behaviour +="+BEHAVIOUR_PAUSE";
        }

        if (element._goto)
        {
            behaviour +="+BEHAVIOUR_GOTO";
        }
        t.append(" db "+behaviour+" ; BEHAVIOUR_LOOP or BEHAVIOUR_GOTO or BEHAVIOUR_LOOP\n");
        t.append(" db "+element.loopCount+"; loop count\n");
        t.append(" db "+element.goto_value+"; goto value\n");

        t.append(" dw "+element.roundCount+"; element end count\n");
        t.append(" db ELEMENT_ANIM ; type of element \n");
    }
    void getElementDataV2(StringBuilder t, StoryboardElement element, int count, HashMap<String, String> noDoubleAnimMap)
    {
        element.calculateV2();
        t.append("\n");
        t.append("element_"+uid+""+(count)+"#_UNIQUE_ID#:\n");
        if (element.pause)
            t.append(" dw 0\n");
        else
            t.append(" dw "+noDoubleAnimMap.get(element.listName)+"\n");
        t.append(" db "+element.vectrexdelay+"; delay\n");
        t.append(" db "+element.listScaleFrom+"; scale from\n");
        t.append(" db "+element.listScaleTo+"; scale to\n");
        t.append(" db "+element.listScaleDelay+"; scale delay\n");
        t.append(" db "+element.listScaleIncrease+"; scale increase\n");

        t.append(" db "+element.intensityFrom+"; intensityFrom\n");
        t.append(" db "+element.intensityTo+"; intensityTo\n");
        t.append(" db "+element.intensityDelay+"; intensityDelay\n");
        t.append(" db "+element.intensityIncrease+"; intensityIncrease\n");

        t.append(" db "+element.positionYFrom+", "+element.positionXFrom+"; position from (y,x)\n");
        t.append(" db "+element.positionYTo+", "+element.positionXTo+"; position to (y,x)\n");
        t.append(" db "+element.positionYDelay+", "+element.positionXDelay+"; position delay (y,x)\n");
        t.append(" db "+element.positionYIncrease+", "+element.positionXIncrease+"; position increase (y,x)\n");
        t.append(" db "+element.moveScale+"; move scale\n");
        if (element.pause)
        {
            t.append(" dw draw_pause; draw pause\n");
        }
        else
        {
            if (element.drawType.equals("synced extended"))
                t.append(" dw draw_esynced_list; draw jsr\n");
            else if (element.drawType.equals("synced"))
                t.append(" dw draw_synced_list; draw jsr\n");
            else if (element.drawType.equals("Mov_Draw_VLc_a"))
                t.append(" dw Mov_Draw_VLc_a; draw jsr\n");
            else if (element.drawType.equals("Draw_VLc"))
                t.append(" dw Draw_VLc; draw jsr\n");
            else if (element.drawType.equals("Draw_VLp"))
                t.append(" dw Draw_VLp; draw jsr\n");
            else if (element.drawType.equals("Draw_VL_mode"))
                t.append(" dw Draw_VL_mode; draw jsr\n");
            else if (element.drawType.equals("AnimCodeGen"))
                t.append(" dw AnimCodeGen; draw jsr\n");
            else 
                t.append(" dw 0; draw UNKOWN\n");
        }
        String behaviour ="BEHAVIOUR_NONE";
        if (element.pause)
        {
            behaviour +="+BEHAVIOUR_PAUSE";
        }
        if (element.animationLoop)
        {
            behaviour +="+BEHAVIOUR_ANIMATION_LOOP";
        }
        t.append(" db "+behaviour+" ; BEHAVIOUR_PAUSE / BEHAVIOUR_ANIMATION_LOOP\n");
        t.append(" dw "+element.roundCount+"; element end count\n");
        t.append(" db ELEMENT_ANIM ; type of element \n");
    }
    
    public int getLengthInRound()
    {
        int ret = 0;
        for (StoryboardElement element : elements)
        {
            if (element.disabled) continue;
            ret += element.roundCount;
        }
        return ret;
    }
}
