/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.vide.vecx.panels;

import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.config.TinyLogInterface;
import de.malban.gui.CSAMainFrame;
import de.malban.gui.Windowable;
import de.malban.gui.components.CSAView;
import de.malban.gui.dialogs.InternalFrameFileChoser;
import de.malban.gui.panels.LogPanel;
import static de.malban.gui.panels.LogPanel.WARN;
import de.malban.vide.vecx.VecXPanel;
import de.muntjak.tinylookandfeel.Theme;
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author malban
 */
public class OverlSwitcherJPanel extends javax.swing.JPanel implements Windowable{

    LogPanel log = (LogPanel) Configuration.getConfiguration().getDebugEntity();
    TinyLogInterface tinyLog = null;
    private int mClassSetting=0;
    private CSAView mParent = null;
    private javax.swing.JMenuItem mParentMenuItem = null;
    
    public static final String SID = "Overlay Switcher";
    @Override public boolean isIcon()
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return false;
        return frame.getInternalFrame(this).isIcon();
    }
    @Override public void setIcon(boolean b)
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return;
        try
        {
            frame.getInternalFrame(this).setIcon(b);
        }
        catch (Throwable e){}
    }
    @Override
    public void closing()
    {
        deinit();
    }
    @Override
    public void setParentWindow(CSAView jpv)
    {
        mParent = jpv;
    }
    @Override
    public void setMenuItem(javax.swing.JMenuItem item)
    {
        mParentMenuItem = item;
        mParentMenuItem.setText(SID);
    }
    @Override
    public javax.swing.JMenuItem getMenuItem()
    {
        return mParentMenuItem;
    }
    @Override
    public javax.swing.JPanel getPanel()
    {
        return this;
    }        
    void deinit()
    {
        removeUIListerner();
    }
    /**
     * Creates new form OverlSwitcherJPanel
     */
    public OverlSwitcherJPanel() {
        initComponents();
        UIManager.addPropertyChangeListener(pListener);
        updateMyUI(); 
        initLister();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButtonLoad = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable3MousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jButtonLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_go.png"))); // NOI18N
        jButtonLoad.setToolTipText("load YM");
        jButtonLoad.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jLabel1.setText("load overlay");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLoad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonLoad)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MousePressed
        tableClicked(evt);
    }//GEN-LAST:event_jTable3MousePressed
    String lastPath = Global.mainPathPrefix+"overlays";
    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed

        InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();

        if (lastPath.length()==0)
        {
            lastPath =  Global.mainPathPrefix+"overlays";
            fc.setCurrentDirectory(new java.io.File(lastPath));
        }
        else
        {
            fc.setCurrentDirectory(new java.io.File(lastPath));
        }
        FileNameExtensionFilter filter = new FileNameExtensionFilter("png", "png");
        fc.setFileFilter(filter);

        int r = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
        if (r != InternalFrameFileChoser.APPROVE_OPTION) return;
        if (fc.getSelectedFile() == null) return;
        
        lastPath = fc.getSelectedFile().getParent();
        initOverlay(fc.getSelectedFile().getAbsolutePath());
        initLister();
    }//GEN-LAST:event_jButtonLoadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables

    public void removeUIListerner()
    {
        UIManager.removePropertyChangeListener(pListener);
    }
    private PropertyChangeListener pListener = new PropertyChangeListener()
    {
        public void propertyChange(PropertyChangeEvent evt)
        {
            updateMyUI();
        }
    };
    void updateMyUI()
    {
        //SwingUtilities.updateComponentTreeUI(jPopupMenu1);
        //SwingUtilities.updateComponentTreeUI(jPopupMenuTree);
        //SwingUtilities.updateComponentTreeUI(jPopupMenuProjectProperties);
        int fontSize = Theme.textFieldFont.getFont().getSize();
        int rowHeight = fontSize+2;
//        jTable1.setRowHeight(rowHeight);
        jTable3.setRowHeight(fontSize+1);
        jTable3.setFont(new java.awt.Font("Courier New", 1, fontSize-1));
    }
    public void deIconified()  {}

    class ListerEntry
    {
        String fileName="";
        String completePath="";
        long size = 0;
    }
    String[] listerColumns = {"Name", "Size"};
    ArrayList<ListerEntry> listerArray = new ArrayList<ListerEntry>();
    ListerTableModel listerModel = new ListerTableModel();
    public class ListerTableModel extends AbstractTableModel
    {    
        @Override
        public String getColumnName(int col) {
            return listerColumns[col];
        }
        @Override
        public int getRowCount() {
            return listerArray.size();
        }

        @Override
        public int getColumnCount() {
            return listerColumns.length;
        }
        @Override
        public Object getValueAt(int row, int col) {
            if (col == 0) return listerArray.get(row).fileName;
            if (col == 1) return listerArray.get(row).size;
            return "";
        }
        @Override
        public Class<?> getColumnClass(int col) 
        {
            if (col == 0) return String.class;
            if (col == 1) return long.class;
            return Object.class;
        }
        @Override
        public boolean isCellEditable(int row, int col) 
        {
            return false;
        }
    }
    void initLister()
    {
        listerArray.clear();

        
        ArrayList<String> filenames = de.malban.util.UtilityFiles.getFilesWith(lastPath, ".png");
        if (lastPath.length()>0) if (!lastPath.endsWith(File.separator)) lastPath+= File.separator;
        for (String f: filenames)
        {
            try
            {
                ListerEntry entry = new ListerEntry();
                entry.fileName = f;
                entry.completePath = lastPath+f;
                File ff = new File(entry.completePath);
                entry.size = ff.length();
                listerArray.add(entry);
            }
            catch (Throwable e)
            {
                
            }
        }
        jTable3.setModel(listerModel);
        jTable3.tableChanged(null);
    }    
    
    private void tableClicked(java.awt.event.MouseEvent evt) 
    {             
        if (evt.getClickCount() == 2) 
        {
            Point p = evt.getPoint();
            int row = jTable3.rowAtPoint(p);
            int col = jTable3.columnAtPoint(p);
            if (row <0) return;
            if (row >listerArray.size()-1) return;

            
            if (listerArray.get(row).completePath.toLowerCase().endsWith("png"))
            {
                String file = listerArray.get(row).completePath;
                 initOverlay( file);
            }            
        }
    }           
    private void initOverlay(String file)
    {
        CSAMainFrame f = Configuration.getConfiguration().getMainFrame();
        VecXPanel vecxy = f.checkVecxy();
        if (vecxy == null) return;
        vecxy.setOverlay(file);
        jLabel2.setText(file);
        
    }
}
