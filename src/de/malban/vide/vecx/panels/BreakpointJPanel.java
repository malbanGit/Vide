/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.vide.vecx.panels;

import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.gui.CSAMainFrame;
import de.malban.vide.vecx.VecXPanel;
import de.malban.gui.Stateable;
import de.malban.gui.Windowable;
import de.malban.gui.components.CSAView;
import de.malban.gui.dialogs.InternalFrameFileChoser;
import de.malban.gui.panels.LogPanel;
import de.malban.vide.dissy.DissiPanel;
import de.malban.vide.vecx.Breakpoint;
import de.malban.vide.vecx.Updatable;
import java.awt.Dimension;
import java.io.File;
import java.io.Serializable;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author malban
 */
public class BreakpointJPanel extends javax.swing.JPanel implements
        Windowable, Stateable, Updatable{
    private CSAView mParent = null;
    public boolean isLoadSettings() { return true; }
    private javax.swing.JMenuItem mParentMenuItem = null;
    private int mClassSetting=0;
    private DissiPanel dissi = null;
    private VecXPanel vecxPanel = null; // needed for vectrex memory access
    public static String SID = "Debug: Breakpoints";
    public String getID()
    {
        return SID;
    }
    @Override public String getFileID()
    {
        return de.malban.util.UtilityString.replace(de.malban.util.UtilityString.replace(de.malban.util.UtilityString.replace(de.malban.util.UtilityString.replaceWhiteSpaces(SID, ""),":",""),"(",""),")","") ;
    }
    public Serializable getAdditionalStateinfo(){return null;}
    public void setAdditionalStateinfo(Serializable ser){}
    
    public void setVecxy(VecXPanel v)
    {
        vecxPanel = v;
        init();
    }
    public void setDissi(DissiPanel v)
    {
        dissi = v;
    }

    @Override public boolean isIcon()
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return false;
        return frame.getInternalFrame(this).isIcon();
    }
    @Override public void setIcon(boolean b)
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return;
        try
        {
            frame.getInternalFrame(this).setIcon(b);
        }
        catch (Throwable e){}
    }
    
    @Override
    public void closing()
    {
        if (vecxPanel != null) vecxPanel.resetBreaki();
        deinit();
    }
    @Override
    public void setParentWindow(CSAView jpv)
    {
        mParent = jpv;
    }
    @Override
    public void setMenuItem(javax.swing.JMenuItem item)
    {
        mParentMenuItem = item;
        mParentMenuItem.setText(SID);
    }
    @Override
    public javax.swing.JMenuItem getMenuItem()
    {
        return mParentMenuItem;
    }
    @Override
    public javax.swing.JPanel getPanel()
    {
        return this;
    }
    public void deinit()
    {
    }
    /**
     * Creates new form BreakpointJPanel
     */
    public BreakpointJPanel() {
        initComponents();
        init();
    }

    long checksum = 0;
    public void init()
    {
        checksum =0;
        jPanel1.removeAll();
        if (vecxPanel == null) return;
        ArrayList<Breakpoint>[] allBreakpoints = vecxPanel.getAllBreakpoints();
        int y = 0;
        ArrayList<Breakpoint> tmp = new ArrayList<Breakpoint>();
        for (ArrayList<Breakpoint> list: allBreakpoints)
        {
            for (Breakpoint bp: list)
            {
                
                checksum += (checksum <<2)+bp.uid;
                OneBreakpointPanel panel = new OneBreakpointPanel();
                panel.setParent(this);
                panel.setBreakpoint(bp);
                panel.setBounds(0, y,453, 99);
                jPanel1.add(panel);
                y += 99+2;
            }
        }
        jPanel1.setSize(jPanel1.getWidth(), y);
        jPanel1.setPreferredSize(new Dimension(jPanel1.getWidth(), y));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton3 = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        oneBreakpointPanel1 = new de.malban.vide.vecx.panels.OneBreakpointPanel();
        oneBreakpointPanel2 = new de.malban.vide.vecx.panels.OneBreakpointPanel();
        jButtonFileSelect10 = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();

        jToggleButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/webcam.png"))); // NOI18N
        jToggleButton3.setToolTipText("Toggle Update (always or only while debug)");
        jToggleButton3.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jToggleButton3.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/webcamSelect.png"))); // NOI18N
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(100, 400));
        jPanel1.setLayout(null);
        jPanel1.add(oneBreakpointPanel1);
        oneBreakpointPanel1.setBounds(0, 0, 455, 103);
        jPanel1.add(oneBreakpointPanel2);
        oneBreakpointPanel2.setBounds(0, 109, 455, 100);

        jScrollPane2.setViewportView(jPanel1);

        jButtonFileSelect10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/add.png"))); // NOI18N
        jButtonFileSelect10.setEnabled(false);
        jButtonFileSelect10.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonFileSelect10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFileSelect10ActionPerformed(evt);
            }
        });

        jButtonLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_go.png"))); // NOI18N
        jButtonLoad.setToolTipText("load breakpoints");
        jButtonLoad.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/malban/vide/images/page_save.png"))); // NOI18N
        jButtonSave.setToolTipText("save breakpoints");
        jButtonSave.setMargin(new java.awt.Insets(0, 1, 0, -1));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonFileSelect10)
                        .addGap(28, 28, 28)
                        .addComponent(jButtonLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSave)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFileSelect10)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        updateEnabled = jToggleButton3.isSelected();
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jButtonFileSelect10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFileSelect10ActionPerformed

        
    }//GEN-LAST:event_jButtonFileSelect10ActionPerformed

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        loadBreakpoints();
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveBreakpoints();
    }//GEN-LAST:event_jButtonSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFileSelect10;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton jToggleButton3;
    private de.malban.vide.vecx.panels.OneBreakpointPanel oneBreakpointPanel1;
    private de.malban.vide.vecx.panels.OneBreakpointPanel oneBreakpointPanel2;
    // End of variables declaration//GEN-END:variables

    private void update()
    {
        long newChecksum = -1;
        ArrayList<Breakpoint>[] allBreakpoints = vecxPanel.getAllBreakpoints();
        for (ArrayList<Breakpoint> list: allBreakpoints)
        {
            for (Breakpoint bp: list)
            {
                if (bp.wasTriggered())
                {
                    init();
                    checksum = -2;
                    return;
                }
                newChecksum += (newChecksum <<2)+bp.uid;
            }
        }
        if (newChecksum != checksum)
            init();
        
    }
    

    private boolean updateEnabled = false;
    public void updateValues(boolean forceUpdate)
    {
        if (!forceUpdate)
            if (!updateEnabled) return;
        update();
    }
    void updateDissi()
    {
        if (dissi==null) return;
        dissi.updateTableOnly();
    }

    public void setUpdateEnabled(boolean b)
    {
        updateEnabled = b;
    }
    void removeBreakpoint(Breakpoint bp)
    {
        vecxPanel.breakpointRemove(bp);
    }
    public void deIconified() { }

    public void loadBreakpoints()
    {
        ArrayList<Breakpoint>[] allBreakpoints;

        String filename =Global.mainPathPrefix+"serialize";
        InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();
        Path p = Paths.get(filename);
        fc.setCurrentDirectory(new java.io.File(p.toString()));
        FileNameExtensionFilter  filter = new  FileNameExtensionFilter("Breakpoints", "brk");
        fc.setFileFilter(filter);
        int r = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
        if (r != InternalFrameFileChoser.APPROVE_OPTION) return;
        filename = fc.getSelectedFile().getAbsolutePath();            

        Object o = CSAMainFrame.deserialize(filename);
        if (o == null)
        {
            LogPanel log = (LogPanel) Configuration.getConfiguration().getDebugEntity();
            log.addLog("Deserialization of breakpoints failed!");
            return;
        }
        allBreakpoints = (ArrayList<Breakpoint>[]) o;
        vecxPanel.setAllBreakpoints(allBreakpoints);
        init();
        dissi.updateTableOnly();
        
    }

    public void saveBreakpoints()
    {
        ArrayList<Breakpoint>[] allBreakpoints = vecxPanel.getAllBreakpoints();

        String filename =Global.mainPathPrefix+"serialize";
        InternalFrameFileChoser fc = new de.malban.gui.dialogs.InternalFrameFileChoser();
        Path p = Paths.get(filename);
        fc.setCurrentDirectory(new java.io.File(p.toString()));
        FileNameExtensionFilter  filter = new  FileNameExtensionFilter("Breakpoints", "brk");
        fc.setFileFilter(filter);
        int r = fc.showOpenDialog(Configuration.getConfiguration().getMainFrame());
        if (r != InternalFrameFileChoser.APPROVE_OPTION) return;
        filename = fc.getSelectedFile().getAbsolutePath();            
        filename = de.malban.util.UtilityString.replaceCI(filename, ".BRK", ".brk");
        if (!filename.endsWith(".brk")) filename = filename+".brk";
        CSAMainFrame.serialize(allBreakpoints, filename);
    }
}
