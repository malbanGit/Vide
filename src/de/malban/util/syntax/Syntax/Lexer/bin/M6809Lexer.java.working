/* The following code was generated by JFlex 1.6.1 */

/* M6809Lexer.java is a generated file.  You probably want to
 * edit M6809Lexer.lex to make changes.  Use JFlex to generate it.
 * To generate M6809Lexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main M6809Lexer.lex</code><br>
 * You will then have a file called M6809Lexer.java
 */

package de.malban.util.syntax.Syntax.Lexer;

import java.io.*;
import java.util.HashMap;
import de.malban.vide.VideConfig;
import de.malban.util.syntax.entities.ASM6809FileMaster;

/** 
 * M6809Lexer is a M6809 lexer.  Created with JFlex.  An example of how it is used:


Not respected is "junk" after the operands. 
After the operand field all additional chars are just scanned as if they were additional operand values!



 *  <CODE>
 *  <PRE>
 *  M6809Lexer shredder = new M6809Lexer(System.in);
 *  M6809Token t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 */ 


public class M6809Lexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AFTER_KEYWORD = 2;
  public static final int AFTER_KEYWORD_0OP = 4;
  public static final int AFTER_KEYWORD_1BranchOP = 6;
  public static final int AFTER_KEYWORD_2OP = 8;
  public static final int AFTER_KEYWORD_Stack = 10;
  public static final int AFTER_KEYWORD_1MemOP = 12;
  public static final int AFTER_KEYWORD_PSEUDO = 14;
  public static final int AFTER_KEYWORD_PSEUDO_IF = 16;
  public static final int IN_1MemOP = 18;
  public static final int AFTER_LABEL = 20;
  public static final int AFTER_MACRO = 22;
  public static final int AFTER_EQU = 24;
  public static final int COMMENT_LINE = 26;
  public static final int LINE_END = 28;
  public static final int IN_STRING = 30;
  public static final int WHITE_SPACE = 32;
  public static final int WHITE_SPACE_START = 34;
  public static final int WHITE_SPACE_AFTER_LABEL = 36;
  public static final int WHITE_SPACE_AFTER_MACRO = 38;
  public static final int WHITE_SPACE_AFTER_EQU = 40;
  public static final int WHITE_SPACE_AFTER_KEYWORD = 42;
  public static final int WHITE_SPACE_AFTER_OPPERAND = 44;
  public static final int WHITE_SPACE_AFTER_PSEUDO = 46;
  public static final int WHITE_SPACE_AFTER_PSEUDO_IF = 48;
  public static final int WHITE_SPACE_1BranchOP = 50;
  public static final int WHITE_SPACE_1BranchOPOP = 52;
  public static final int WHITE_SPACE_2OP = 54;
  public static final int WHITE_SPACE_Stack = 56;
  public static final int WHITE_SPACE_1MemOP = 58;
  public static final int WHITE_SPACE_OPERAND_FINISHED = 60;
  public static final int AFTER_FIRST_MACRO_PARAM = 62;
  public static final int WHITESPACE_AFTER_FIRST_MACRO_PARAM = 64;
  public static final int AFTER_MACRO_COLON = 66;
  public static final int WHITESPACE_AFTER_MACRO_COLON = 68;
  public static final int AFTER_MACROCALL = 70;
  public static final int WHITE_SPACE_AFTER_MACROCALL = 72;
  public static final int AFTER_FIRST_MACROCALLPARAMETER = 74;
  public static final int WHITE_SPACE_AFTER_FIRST_MACROCALLPARAMETER = 76;
  public static final int IN_MACRO_CALL_PARAM = 78;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  6,  6,  1,  1,  1,  1,  1,  1, 
    12, 12, 13, 13, 14, 14, 15, 15,  1,  1,  1,  1,  1,  1, 16, 16, 
    17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,  2,  2, 23, 23, 
    23, 23, 24, 24, 24, 24, 25, 25, 25, 25,  1,  1, 26, 26, 27, 27
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\64\1\67\1\0\1\64\1\66\22\0\1\33\1\45\1\76"+
    "\1\57\1\100\1\56\1\53\1\75\1\34\1\35\1\51\1\47\1\40"+
    "\1\50\1\41\1\52\1\61\1\63\1\16\1\16\4\62\2\60\1\101"+
    "\1\77\1\44\1\42\1\43\1\106\1\112\1\1\1\2\1\21\1\4"+
    "\1\11\1\31\1\23\1\25\1\104\1\26\1\105\1\7\1\5\1\20"+
    "\1\22\1\24\1\27\1\12\1\103\1\13\1\6\1\30\1\15\1\3"+
    "\1\17\1\107\1\36\1\65\1\37\1\55\1\102\1\0\1\1\1\72"+
    "\1\21\1\4\1\11\1\73\1\23\1\25\1\104\1\26\1\105\1\7"+
    "\1\5\1\71\1\22\1\111\1\27\1\70\1\110\1\74\1\6\1\30"+
    "\1\15\1\3\1\17\1\107\1\0\1\54\1\0\1\46\261\0\2\14"+
    "\115\0\1\10\u1faa\0\1\32\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\34\0\1\1\1\2\1\3\1\4\2\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\16\1\20\1\21\21\22\1\17\1\1\1\23"+
    "\1\24\1\1\1\25\1\26\6\27\1\1\3\27\1\1"+
    "\11\27\1\3\1\30\2\16\1\17\1\16\12\22\1\17"+
    "\1\23\1\1\2\16\1\31\1\32\1\33\2\1\1\32"+
    "\10\1\2\34\1\1\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\1\2\43\1\17\1\43\1\40\1\20\1\21"+
    "\2\22\1\42\1\43\15\22\1\17\1\23\1\1\2\2"+
    "\1\0\1\44\2\0\1\2\7\0\1\22\4\0\1\45"+
    "\1\0\1\22\3\20\1\45\1\0\1\45\4\0\1\45"+
    "\1\0\2\45\3\0\1\45\3\0\1\16\12\0\3\22"+
    "\5\0\1\22\1\45\3\0\1\45\1\22\2\0\1\45"+
    "\1\46\2\0\1\45\1\0\1\17\1\23\1\47\1\50"+
    "\1\51\1\17\3\27\1\0\5\27\1\0\2\27\1\0"+
    "\10\27\2\52\1\27\1\0\5\27\1\0\2\27\6\0"+
    "\10\27\2\0\3\27\1\0\1\53\13\27\1\0\2\27"+
    "\1\0\12\27\1\53\2\22\1\16\3\0\1\17\1\23"+
    "\1\47\1\17\2\16\3\0\2\54\2\0\1\32\2\0"+
    "\1\32\6\0\1\55\3\0\1\43\5\0\1\22\3\20"+
    "\2\55\2\0\1\55\3\0\1\55\1\0\1\43\4\0"+
    "\1\55\2\0\1\22\2\0\2\55\1\0\1\46\2\0"+
    "\1\17\1\23\1\55\1\47\1\50\1\23\1\17\2\2"+
    "\2\0\2\56\1\0\1\57\3\0\4\46\2\60\5\45"+
    "\1\60\1\61\3\20\1\0\1\45\2\0\7\45\7\0"+
    "\1\45\1\0\1\45\1\0\2\45\11\0\1\45\1\0"+
    "\1\45\3\0\1\17\1\23\1\47\1\17\1\47\1\23"+
    "\1\51\1\24\2\0\1\62\2\27\1\0\1\27\1\63"+
    "\1\27\1\63\1\27\2\63\1\0\1\27\1\0\2\27"+
    "\1\0\1\27\1\0\1\62\1\0\1\62\2\0\1\64"+
    "\1\27\1\0\2\27\1\52\1\0\1\27\1\63\3\0"+
    "\5\27\1\63\1\27\1\63\2\27\1\62\1\27\1\63"+
    "\3\27\1\0\2\17\1\23\2\16\2\54\1\0\1\32"+
    "\1\34\2\0\1\34\1\0\1\55\2\46\1\0\2\60"+
    "\4\55\1\60\1\61\2\20\1\55\1\20\1\0\1\55"+
    "\1\0\1\55\2\0\6\55\2\0\3\55\1\0\1\17"+
    "\1\23\1\55\1\17\1\23\1\17\2\0\1\2\1\65"+
    "\2\0\1\56\2\46\1\66\2\0\2\20\1\45\2\0"+
    "\1\45\1\0\2\45\1\0\1\23\1\47\1\67\1\0"+
    "\1\70\2\0\1\27\1\0\2\27\1\0\1\27\2\52"+
    "\1\27\2\0\1\27\3\0\1\53\2\71\1\27\1\0"+
    "\3\27\1\53\1\0\1\72\2\0\1\46\1\66\1\0"+
    "\2\20\2\55\1\0\1\55\2\0\2\55\4\0\1\2"+
    "\1\0\1\65\2\20\2\0\1\67\1\47\2\0\1\27"+
    "\1\0\2\27\1\0\1\72\1\0\2\20\2\55\2\0"+
    "\5\55\1\0\1\55\1\73\1\0\1\20\4\0\1\27"+
    "\2\0\1\20\2\55\4\0\1\55\1\73\2\0\1\27"+
    "\2\0\1\55\5\0\1\27\6\0\1\27\2\0\1\27"+
    "\1\0\1\27\2\0\1\27\2\0\1\27\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[744];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0465"+
    "\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd"+
    "\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915"+
    "\0\u0960\0\u0834\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a"+
    "\0\u0dc5\0\u0e10\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2"+
    "\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a"+
    "\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482"+
    "\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da"+
    "\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u0834\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97"+
    "\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef"+
    "\0\u203a\0\u2085\0\u20d0\0\u211b\0\u0834\0\u2166\0\u21b1\0\u21fc"+
    "\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454"+
    "\0\u249f\0\u24ea\0\u2535\0\u2580\0\u0834\0\u25cb\0\u2616\0\u2661"+
    "\0\u0834\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e"+
    "\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6"+
    "\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e"+
    "\0\u2d69\0\u26ac\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b"+
    "\0\u0834\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u09f6\0\u30ed"+
    "\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345"+
    "\0\u0834\0\u1356\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507"+
    "\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u367e\0\u36c9\0\u3714"+
    "\0\u375f\0\u0ea6\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u3921"+
    "\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79"+
    "\0\u3bc4\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1"+
    "\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u3e1c\0\u3f48\0\u3f93\0\u3fde"+
    "\0\u3fde\0\u4029\0\u4074\0\u40bf\0\u3a02\0\u410a\0\u4155\0\u12c0"+
    "\0\u12c0\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u0834\0\u42cc\0\u4317"+
    "\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u44d9\0\u4524\0\u456f"+
    "\0\u45ba\0\u4605\0\u4650\0\u469b\0\u46e6\0\u4731\0\u477c\0\u47c7"+
    "\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e\0\u15ae\0\u0834\0\u4989"+
    "\0\u49d4\0\u4a1f\0\u4a6a\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1"+
    "\0\u4c2c\0\u4c77\0\u4cc2\0\u4d0d\0\u4d58\0\u4da3\0\u4dee\0\u4e39"+
    "\0\u4e84\0\u4ecf\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u5046\0\u5091"+
    "\0\u50dc\0\u5127\0\u5172\0\u51bd\0\u5208\0\u5253\0\u529e\0\u52e9"+
    "\0\u5334\0\u537f\0\u53ca\0\u5415\0\u5460\0\u54ab\0\u54f6\0\u5541"+
    "\0\u558c\0\u55d7\0\u5622\0\u566d\0\u56b8\0\u5703\0\u574e\0\u5799"+
    "\0\u57e4\0\u582f\0\u587a\0\u58c5\0\u5910\0\u595b\0\u59a6\0\u59f1"+
    "\0\u5a3c\0\u5a87\0\u1cb6\0\u5ad2\0\u5b1d\0\u5b68\0\u5bb3\0\u5bfe"+
    "\0\u5c49\0\u1fef\0\u5c94\0\u5cdf\0\u5d2a\0\u5d75\0\u5dc0\0\u5e0b"+
    "\0\u0834\0\u5e56\0\u2292\0\u5ea1\0\u5eec\0\u5f37\0\u2292\0\u22dd"+
    "\0\u5f82\0\u2328\0\u5fcd\0\u6018\0\u26ac\0\u26ac\0\u6063\0\u60ae"+
    "\0\u60f9\0\u6144\0\u618f\0\u61da\0\u6225\0\u6270\0\u62bb\0\u6306"+
    "\0\u6351\0\u639c\0\u63e7\0\u6351\0\u6432\0\u647d\0\u64c8\0\u6513"+
    "\0\u655e\0\u65a9\0\u65f4\0\u663f\0\u668a\0\u66d5\0\u6720\0\u676b"+
    "\0\u67b6\0\u6801\0\u676b\0\u684c\0\u6897\0\u68e2\0\u692d\0\u6978"+
    "\0\u69c3\0\u6a0e\0\u6a59\0\u6aa4\0\u6aef\0\u6b3a\0\u6b85\0\u6bd0"+
    "\0\u6bd0\0\u6c1b\0\u26ac\0\u6c66\0\u6cb1\0\u6cfc\0\u6d47\0\u6d92"+
    "\0\u6ddd\0\u6e28\0\u6e73\0\u6ebe\0\u0834\0\u300c\0\u6f09\0\u6f54"+
    "\0\u6f9f\0\u6fea\0\u7035\0\u7080\0\u70cb\0\u0834\0\u3264\0\u7116"+
    "\0\u7161\0\u3507\0\u35e8\0\u71ac\0\u0834\0\u71f7\0\u7242\0\u728d"+
    "\0\u72d8\0\u7323\0\u736e\0\u73b9\0\u7404\0\u744f\0\u749a\0\u74e5"+
    "\0\u7530\0\u757b\0\u75c6\0\u3714\0\u375f\0\u7611\0\u765c\0\u76a7"+
    "\0\u76f2\0\u773d\0\u76f2\0\u7788\0\u77d3\0\u781e\0\u38d6\0\u7869"+
    "\0\u78b4\0\u78ff\0\u794a\0\u7995\0\u74e5\0\u7530\0\u79e0\0\u7a2b"+
    "\0\u7a76\0\u7ac1\0\u7b0c\0\u7b57\0\u7ba2\0\u7bed\0\u7c38\0\u7c83"+
    "\0\u7cce\0\u7d19\0\u7d64\0\u7daf\0\u7dfa\0\u7e45\0\u7e90\0\u7edb"+
    "\0\u7f26\0\u15ae\0\u7f71\0\u7fbc\0\u8007\0\u8052\0\u809d\0\u80e8"+
    "\0\u8133\0\u817e\0\u0834\0\u15ae\0\u81c9\0\u8214\0\u825f\0\u82aa"+
    "\0\u82f5\0\u8340\0\u838b\0\u83d6\0\u0834\0\u8421\0\u846c\0\u84b7"+
    "\0\u8502\0\u15ae\0\u854d\0\u8598\0\u85e3\0\u862e\0\u8679\0\u86c4"+
    "\0\u870f\0\u875a\0\u87a5\0\u87f0\0\u883b\0\u8886\0\u88d1\0\u891c"+
    "\0\u8967\0\u89b2\0\u89fd\0\u8a48\0\u8a93\0\u8ade\0\u8b29\0\u8b74"+
    "\0\u8bbf\0\u8c0a\0\u8c55\0\u8ca0\0\u8ceb\0\u8d36\0\u5b68\0\u0834"+
    "\0\u8d81\0\u8dcc\0\u8e17\0\u8e62\0\u8ead\0\u8ef8\0\u0834\0\u0834"+
    "\0\u8f43\0\u8f8e\0\u8f43\0\u2535\0\u8fd9\0\u9024\0\u906f\0\u90ba"+
    "\0\u6063\0\u26ac\0\u618f\0\u9105\0\u64c8\0\u65a9\0\u9150\0\u26ac"+
    "\0\u919b\0\u91e6\0\u639c\0\u9231\0\u927c\0\u92c7\0\u9312\0\u9312"+
    "\0\u935d\0\u93a8\0\u67b6\0\u6801\0\u93f3\0\u943e\0\u6978\0\u6897"+
    "\0\u9489\0\u94d4\0\u951f\0\u94d4\0\u956a\0\u95b5\0\u9600\0\u964b"+
    "\0\u964b\0\u9696\0\u96e1\0\u972c\0\u9777\0\u97c2\0\u980d\0\u087f"+
    "\0\u9858\0\u98a3\0\u0834\0\u0834\0\u98ee\0\u9939\0\u70cb\0\u71ac"+
    "\0\u9984\0\u99cf\0\u33db\0\u9a1a\0\u9a65\0\u388b\0\u9ab0\0\u9afb"+
    "\0\u9b46\0\u9b91\0\u9bdc\0\u9c27\0\u0834\0\u9c72\0\u0834\0\u9cbd"+
    "\0\u9d08\0\u9d53\0\u9d9e\0\u9de9\0\u9e34\0\u9e7f\0\u9eca\0\u9f15"+
    "\0\u9f60\0\u9fab\0\u9ff6\0\ua041\0\ua08c\0\ua0d7\0\ua122\0\ua16d"+
    "\0\u0834\0\u15ae\0\u0834\0\ua1b8\0\ua203\0\ua24e\0\ua299\0\ua2e4"+
    "\0\u15ae\0\ua32f\0\u1b8a\0\ua37a\0\ua3c5\0\u26ac\0\ua410\0\u9150"+
    "\0\ua45b\0\ua4a6\0\u919b\0\u91e6\0\ua4f1\0\u0834\0\u93f3\0\u943e"+
    "\0\ua53c\0\ua587\0\ua5d2\0\ua61d\0\ua668\0\ua6b3\0\ua6fe\0\ua749"+
    "\0\u0834\0\ua794\0\ua7df\0\ua82a\0\ua875\0\ua8c0\0\ua8c0\0\ua90b"+
    "\0\ua956\0\ua9a1\0\ua9ec\0\uaa37\0\uaa82\0\uaacd\0\u0834\0\uab18"+
    "\0\uab63\0\uabae\0\ua45b\0\ua4a6\0\uabf9\0\uac44\0\uac8f\0\uacda"+
    "\0\uad25\0\uad70\0\uadbb\0\uae06\0\uae51\0\u087f\0\uae9c\0\uaee7"+
    "\0\uaf32\0\uaf7d\0\uafc8\0\ub013\0\ub05e\0\ub0a9\0\ub0f4\0\ub13f"+
    "\0\uab63\0\uabae\0\ub18a\0\ub1d5\0\ub220\0\uae51\0\ub26b\0\u0834"+
    "\0\ub2b6\0\ub301\0\ub34c\0\ub397\0\ub3e2\0\ub13f\0\ub42d\0\ub478"+
    "\0\ub4c3\0\ub50e\0\ub559\0\ub5a4\0\ub5ef\0\ub63a\0\ub685\0\ub6d0"+
    "\0\ub71b\0\ub766\0\ub7b1\0\ub7fc\0\ub847\0\ub892\0\ub8dd\0\ub928"+
    "\0\ub973\0\ub9be\0\uba09\0\uba54\0\uba9f\0\ubaea\0\u0834\0\u15ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[744];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\7\36\1\35\3\36\1\35\1\36\1\35\13\36"+
    "\1\35\1\37\5\35\1\36\7\35\1\40\12\35\1\37"+
    "\1\35\1\41\1\42\5\36\2\35\1\43\2\35\4\36"+
    "\1\35\3\36\34\35\1\44\30\35\1\44\1\35\1\41"+
    "\1\42\7\35\1\43\46\35\1\45\30\35\1\45\1\35"+
    "\1\41\1\42\7\35\1\43\46\35\1\46\30\35\1\46"+
    "\1\35\1\41\1\42\7\35\1\43\46\35\1\47\30\35"+
    "\1\47\1\35\1\41\1\42\7\35\1\43\46\35\1\50"+
    "\30\35\1\50\1\35\1\41\1\42\7\35\1\43\46\35"+
    "\1\51\30\35\1\51\1\35\1\41\1\42\7\35\1\43"+
    "\46\35\1\52\30\35\1\52\1\35\1\41\1\42\7\35"+
    "\1\43\46\35\1\53\30\35\1\53\1\35\1\41\1\42"+
    "\7\35\1\43\14\35\6\54\1\55\1\35\3\54\1\35"+
    "\1\54\1\56\6\54\1\57\4\54\1\35\1\44\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\2\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\56\1\103\2\56\1\44\1\104\1\41"+
    "\1\42\5\54\1\105\1\106\1\43\1\107\1\35\4\54"+
    "\1\35\3\54\34\35\1\110\30\35\1\110\1\35\1\41"+
    "\1\42\7\35\1\43\46\35\1\111\30\35\1\111\1\35"+
    "\1\41\1\42\7\35\1\43\14\35\1\112\1\113\1\114"+
    "\1\115\1\116\1\114\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\114\1\35\1\114\1\125\1\126\1\127\1\114"+
    "\1\130\1\114\1\131\1\114\1\132\1\133\1\35\1\44"+
    "\5\35\1\114\22\35\1\44\1\35\1\41\1\42\1\122"+
    "\1\125\1\113\1\133\1\123\2\35\1\43\2\35\1\114"+
    "\1\134\1\135\1\114\1\35\1\114\1\134\1\130\2\35"+
    "\1\112\1\113\1\114\1\115\1\116\1\114\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\114\1\35\1\114\1\125"+
    "\1\126\1\127\1\114\1\130\1\114\1\131\1\114\1\132"+
    "\1\133\1\35\1\136\5\35\1\114\7\35\1\40\12\35"+
    "\1\136\1\35\1\41\1\42\1\122\1\125\1\113\1\133"+
    "\1\123\2\35\1\43\2\35\1\114\1\134\1\135\1\114"+
    "\1\35\1\114\1\134\1\130\2\35\1\112\1\113\1\114"+
    "\1\115\1\116\1\114\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\114\1\35\1\114\1\125\1\126\1\127\1\114"+
    "\1\130\1\114\1\131\1\114\1\132\1\133\1\35\1\110"+
    "\5\35\1\114\22\35\1\110\1\35\1\41\1\42\1\122"+
    "\1\125\1\113\1\133\1\123\2\35\1\43\2\35\1\114"+
    "\1\134\1\135\1\114\1\35\1\114\1\134\1\130\2\35"+
    "\7\137\1\35\3\137\1\35\1\137\1\35\13\137\1\35"+
    "\1\111\5\35\1\137\22\35\1\111\1\35\1\41\1\42"+
    "\5\137\2\35\1\43\2\35\4\137\1\35\3\137\2\35"+
    "\6\140\1\141\1\35\3\140\1\35\1\140\1\142\6\140"+
    "\1\143\4\140\1\35\1\52\5\144\1\145\1\146\1\147"+
    "\1\150\1\146\1\144\1\151\1\152\2\144\1\153\1\154"+
    "\1\144\1\155\1\144\1\142\1\156\2\142\1\52\1\104"+
    "\1\41\1\42\5\140\1\157\1\106\1\43\1\160\1\35"+
    "\4\140\1\35\3\140\2\35\6\140\1\141\1\35\2\140"+
    "\1\161\1\35\1\140\1\142\6\140\1\143\3\140\1\162"+
    "\1\35\1\53\5\144\1\145\1\146\1\147\1\150\1\146"+
    "\1\144\1\151\1\152\2\144\1\153\1\154\1\144\1\155"+
    "\1\144\1\142\1\156\2\142\1\53\1\104\1\41\1\42"+
    "\3\140\1\162\1\161\1\157\1\106\1\43\1\160\1\35"+
    "\4\140\1\35\3\140\2\35\7\163\1\35\3\163\1\35"+
    "\1\163\1\164\13\163\1\35\1\46\5\35\1\163\5\35"+
    "\2\165\2\35\1\166\2\35\1\167\1\35\1\164\1\170"+
    "\2\164\1\46\1\166\1\41\1\42\5\163\1\171\1\35"+
    "\1\43\1\172\1\35\4\163\1\35\3\163\17\35\1\164"+
    "\14\35\1\44\22\35\1\167\1\35\1\164\1\170\2\164"+
    "\1\44\1\35\1\41\1\42\5\35\1\171\1\35\1\43"+
    "\1\172\13\35\2\173\1\174\1\175\1\35\1\174\1\35"+
    "\1\176\6\35\1\174\1\35\1\177\2\35\1\200\6\35"+
    "\1\47\30\35\1\47\1\35\1\41\1\42\2\35\1\173"+
    "\4\35\1\43\3\35\1\176\4\35\1\176\1\200\2\35"+
    "\3\201\1\202\1\35\1\201\1\35\1\202\6\35\1\201"+
    "\1\35\1\203\2\35\1\203\6\35\1\50\30\35\1\50"+
    "\1\35\1\41\1\42\2\35\1\201\4\35\1\43\3\35"+
    "\1\202\4\35\1\202\1\203\2\35\6\54\1\55\1\35"+
    "\3\54\1\35\1\54\1\56\6\54\1\57\4\54\1\35"+
    "\1\51\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\2\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\56\1\103\2\56\1\51"+
    "\1\104\1\41\1\42\5\54\1\105\1\106\1\43\1\107"+
    "\1\35\4\54\1\35\3\54\34\35\1\204\4\35\1\205"+
    "\23\35\1\204\1\35\1\41\1\42\7\35\1\43\14\35"+
    "\7\137\1\35\3\137\1\35\1\137\1\35\13\137\1\35"+
    "\1\206\5\35\1\137\22\35\1\206\1\35\1\41\1\42"+
    "\5\137\2\35\1\43\2\35\4\137\1\35\3\137\34\35"+
    "\1\207\30\35\1\207\1\35\1\41\1\42\7\35\1\43"+
    "\46\35\1\210\4\35\1\211\23\35\1\210\1\35\1\41"+
    "\1\42\7\35\1\43\13\35\1\212\6\213\1\214\1\212"+
    "\3\213\1\212\1\213\1\215\6\213\1\216\4\213\1\212"+
    "\1\217\1\220\1\221\1\222\1\223\1\224\1\225\1\226"+
    "\1\227\1\230\1\231\1\232\1\233\1\234\2\235\1\236"+
    "\1\237\1\240\1\241\1\242\1\215\1\243\2\215\1\217"+
    "\1\104\1\41\1\42\5\213\1\244\1\106\1\43\1\245"+
    "\1\212\4\213\1\212\3\213\1\212\114\0\4\36\1\246"+
    "\2\36\1\0\1\247\2\36\1\0\15\36\1\0\1\250"+
    "\6\0\1\251\10\0\1\252\4\0\4\36\1\250\1\253"+
    "\2\0\5\36\4\0\1\254\4\36\1\255\3\36\2\0"+
    "\7\256\1\0\3\256\1\0\1\256\1\0\13\256\1\0"+
    "\1\37\5\0\1\256\22\0\1\37\1\0\1\41\1\42"+
    "\5\256\5\0\4\256\1\0\3\256\1\0\66\40\2\0"+
    "\23\40\67\0\1\42\23\0\66\43\2\0\23\43\33\0"+
    "\1\257\30\0\1\257\1\0\1\41\1\42\56\0\1\45"+
    "\30\0\1\45\1\0\1\41\1\42\56\0\1\46\30\0"+
    "\1\46\1\0\1\41\1\42\56\0\1\47\30\0\1\47"+
    "\1\0\1\41\1\42\56\0\1\50\30\0\1\50\1\0"+
    "\1\41\1\42\56\0\1\51\30\0\1\51\1\0\1\41"+
    "\1\42\56\0\1\52\30\0\1\52\1\0\1\41\1\42"+
    "\56\0\1\53\30\0\1\53\1\0\1\41\1\42\24\0"+
    "\7\54\1\0\3\54\1\0\15\54\1\0\1\260\17\0"+
    "\1\261\4\0\4\54\1\260\1\262\2\0\5\54\5\0"+
    "\4\54\1\263\3\54\2\0\7\54\1\0\3\54\1\0"+
    "\5\54\1\264\7\54\1\0\1\260\17\0\1\261\4\0"+
    "\4\54\1\260\1\262\2\0\5\54\5\0\4\54\1\263"+
    "\3\54\2\0\6\265\1\266\1\0\3\265\1\0\1\265"+
    "\1\56\6\265\1\267\4\265\1\0\1\270\1\271\1\0"+
    "\1\271\6\0\2\271\4\0\1\272\1\0\3\271\4\56"+
    "\1\270\1\272\2\0\5\265\3\0\1\271\1\0\4\265"+
    "\1\0\3\265\2\0\7\54\1\0\3\54\1\273\15\54"+
    "\1\0\1\260\17\0\1\261\4\0\4\54\1\260\1\262"+
    "\2\0\5\54\5\0\2\54\1\264\1\54\1\263\3\54"+
    "\1\0\34\274\1\275\1\271\15\274\1\276\12\274\2\0"+
    "\7\274\1\0\13\274\16\0\1\277\14\0\1\260\1\271"+
    "\21\0\1\300\1\0\1\277\1\301\2\277\1\260\10\0"+
    "\1\302\2\0\1\303\45\0\1\304\3\0\1\271\24\0"+
    "\1\304\61\0\1\304\30\0\1\304\26\0\1\305\2\306"+
    "\1\307\2\306\1\307\1\310\1\305\3\306\1\305\2\306"+
    "\1\307\1\306\1\305\2\306\1\305\1\311\4\306\1\305"+
    "\1\312\3\306\1\305\7\306\1\313\1\314\10\306\1\315"+
    "\2\306\1\312\3\0\5\306\1\316\2\0\1\317\2\305"+
    "\1\307\2\306\1\305\1\306\1\320\2\305\1\0\7\321"+
    "\1\0\3\321\1\0\15\321\1\0\1\322\5\0\1\323"+
    "\1\324\1\325\1\326\1\327\1\323\2\0\2\323\1\330"+
    "\1\331\2\323\1\0\4\321\1\322\1\332\2\0\5\321"+
    "\5\0\4\321\1\263\3\321\34\0\1\304\6\0\1\72"+
    "\10\0\1\333\10\0\1\304\61\0\1\304\6\0\1\72"+
    "\1\334\20\0\1\304\61\0\1\304\6\0\1\72\1\0"+
    "\1\335\17\0\1\304\61\0\1\304\5\0\1\323\1\336"+
    "\1\325\1\326\1\327\1\323\2\0\2\323\1\337\1\331"+
    "\2\323\5\0\1\304\61\0\1\304\5\0\1\323\1\324"+
    "\1\325\1\326\1\327\1\323\2\0\2\323\1\340\1\331"+
    "\2\323\5\0\1\304\26\0\3\341\1\342\2\341\1\342"+
    "\10\341\1\342\13\341\1\343\13\341\1\344\1\345\2\341"+
    "\1\346\10\341\1\343\3\0\6\341\2\0\3\341\1\342"+
    "\4\341\1\347\2\341\3\350\1\342\2\350\1\342\10\350"+
    "\1\342\13\350\1\343\13\350\1\351\1\352\13\350\1\343"+
    "\3\0\6\350\2\0\3\350\1\342\4\350\1\353\2\350"+
    "\33\0\1\354\1\0\1\271\3\0\1\323\1\324\1\325"+
    "\1\326\1\327\1\323\2\0\2\355\1\340\1\331\2\323"+
    "\5\0\1\354\44\0\1\356\14\0\1\304\17\0\1\72"+
    "\4\0\4\356\1\304\61\0\1\304\17\0\1\333\1\72"+
    "\7\0\1\304\61\0\1\304\5\0\1\323\1\324\1\325"+
    "\1\326\1\327\1\323\2\0\2\323\1\337\1\331\2\323"+
    "\5\0\1\304\61\0\1\304\5\0\1\323\1\324\1\325"+
    "\1\326\1\327\1\323\2\0\2\323\1\337\1\331\2\323"+
    "\2\0\1\357\1\0\1\357\1\304\26\0\57\360\1\361"+
    "\5\360\3\0\6\360\2\0\13\360\1\0\2\265\1\362"+
    "\3\265\1\266\1\0\3\265\1\0\1\265\1\363\6\265"+
    "\1\267\4\265\1\0\1\270\1\271\1\0\1\271\6\0"+
    "\2\271\4\0\1\272\1\0\3\271\1\265\3\363\1\270"+
    "\1\272\2\0\5\265\3\0\1\271\1\0\4\265\1\0"+
    "\3\265\17\0\1\356\41\0\4\356\27\0\65\364\1\365"+
    "\2\0\5\364\1\366\15\364\65\106\1\367\2\0\6\106"+
    "\1\366\14\106\1\0\2\370\1\0\1\370\4\0\1\370"+
    "\4\0\1\370\2\0\1\370\7\0\1\370\26\0\4\370"+
    "\6\0\2\370\52\0\1\110\30\0\1\110\1\0\1\41"+
    "\1\42\56\0\1\111\30\0\1\111\1\0\1\41\1\42"+
    "\24\0\1\114\1\371\1\114\1\372\2\114\1\373\1\374"+
    "\3\114\1\0\3\114\1\375\11\114\26\0\4\114\4\0"+
    "\1\114\1\375\1\371\2\114\5\0\1\114\1\376\2\114"+
    "\1\0\1\114\1\376\1\114\2\0\1\377\3\114\1\u0100"+
    "\1\114\1\u0101\1\u0102\1\u0103\1\u0104\1\114\1\u0105\3\114"+
    "\1\u0106\1\u0107\1\114\1\u0108\1\u0109\1\u010a\2\114\1\u0107"+
    "\1\114\26\0\4\114\4\0\1\u0104\1\u0106\3\114\5\0"+
    "\1\114\1\u010b\1\u010c\1\114\1\0\1\114\1\u010b\1\u0109"+
    "\2\0\7\114\1\0\3\114\1\0\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\1\u010d"+
    "\1\u010e\5\114\1\u010f\1\u0110\2\114\1\u0111\1\u010e\14\114"+
    "\26\0\4\114\4\0\2\114\1\u010e\2\114\5\0\1\114"+
    "\1\u010e\1\u0112\1\114\1\0\1\114\1\u010e\1\114\2\0"+
    "\5\114\1\u0113\1\114\1\0\3\114\1\0\15\114\26\0"+
    "\4\114\4\0\5\114\5\0\4\114\1\0\3\114\2\0"+
    "\1\114\1\u0114\1\114\1\u0115\3\114\1\374\1\u0116\2\114"+
    "\1\u0117\5\114\1\u0118\7\114\26\0\4\114\4\0\2\114"+
    "\1\u0114\2\114\5\0\1\114\1\376\1\u0119\1\114\1\0"+
    "\1\114\1\376\1\114\3\0\1\u011a\3\0\1\u011b\2\0"+
    "\1\u011c\1\0\1\u011d\1\0\1\u011e\1\0\1\u011f\52\0"+
    "\1\u011a\1\0\1\u011d\17\0\2\114\1\u0120\3\114\1\u0121"+
    "\1\0\1\114\1\u0122\1\114\1\0\3\114\1\u0123\1\114"+
    "\1\u0124\4\114\1\u0125\2\114\26\0\4\114\4\0\1\u0122"+
    "\1\u0123\3\114\5\0\4\114\1\0\3\114\2\0\4\114"+
    "\1\u0126\2\114\1\0\2\114\1\u0127\1\0\5\114\1\376"+
    "\7\114\26\0\4\114\4\0\4\114\1\u0127\5\0\4\114"+
    "\1\0\3\114\2\0\7\114\1\u0128\3\114\1\u0129\14\114"+
    "\1\u012a\26\0\4\114\4\0\3\114\1\u012a\1\114\5\0"+
    "\1\114\1\u012b\1\u012c\1\114\1\0\1\114\1\u012b\1\114"+
    "\21\0\1\u012d\10\0\1\u012e\37\0\1\u012d\1\0\1\u012e"+
    "\20\0\7\114\1\0\1\u012f\2\114\1\0\5\114\1\u0130"+
    "\7\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\4\114\1\u0131\1\114\1\u0132\1\0\3\114"+
    "\1\0\1\u0133\4\114\1\u0134\7\114\26\0\4\114\4\0"+
    "\5\114\5\0\4\114\1\0\3\114\2\0\7\114\1\0"+
    "\1\114\1\u0135\1\114\1\0\7\114\1\u0136\5\114\26\0"+
    "\4\114\4\0\1\u0135\4\114\5\0\4\114\1\0\2\114"+
    "\1\u0136\2\0\1\u0137\4\114\1\u0138\1\u0139\1\u013a\3\114"+
    "\1\0\15\114\26\0\4\114\4\0\5\114\5\0\1\114"+
    "\1\u013b\2\114\1\0\1\114\1\u013b\1\114\2\0\4\114"+
    "\1\u013c\2\114\1\u013d\3\114\1\0\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\1\114\1\u013e\2\114\1\0\1\114"+
    "\1\u013e\1\114\2\0\7\114\1\0\1\u013f\2\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\3\114\1\u0126\3\114\1\0\3\114\1\0"+
    "\4\114\1\u0140\10\114\26\0\4\114\4\0\5\114\5\0"+
    "\4\114\1\0\3\114\2\0\1\114\1\u0141\3\114\1\u0142"+
    "\1\114\1\0\1\u0143\1\114\1\u0144\1\0\1\u0145\1\114"+
    "\1\u0146\12\114\26\0\4\114\4\0\2\114\1\u0141\1\114"+
    "\1\u0144\5\0\4\114\1\0\3\114\2\0\7\114\1\0"+
    "\3\114\1\0\3\114\1\u0147\10\114\1\u0148\26\0\4\114"+
    "\4\0\1\114\1\u0147\1\114\1\u0148\1\114\5\0\4\114"+
    "\1\0\3\114\34\0\1\136\30\0\1\136\1\0\1\41"+
    "\1\42\24\0\7\137\1\0\3\137\1\0\15\137\26\0"+
    "\4\137\4\0\5\137\5\0\4\137\1\0\3\137\2\0"+
    "\7\140\1\0\3\140\1\0\15\140\21\0\1\261\4\0"+
    "\4\140\1\0\1\262\2\0\5\140\5\0\4\140\1\263"+
    "\3\140\2\0\7\140\1\0\3\140\1\0\5\140\1\u0149"+
    "\7\140\21\0\1\261\4\0\4\140\1\0\1\262\2\0"+
    "\5\140\5\0\4\140\1\263\3\140\2\0\7\265\1\0"+
    "\3\265\1\0\1\265\1\142\13\265\21\0\1\272\4\0"+
    "\4\142\1\0\1\272\2\0\5\265\5\0\4\265\1\0"+
    "\3\265\2\0\7\140\1\0\3\140\1\u014a\15\140\21\0"+
    "\1\261\4\0\4\140\1\0\1\262\2\0\5\140\5\0"+
    "\2\140\1\u0149\1\140\1\263\3\140\2\0\7\u014b\1\0"+
    "\3\u014b\1\0\15\u014b\21\0\1\u014c\4\0\4\u014b\1\0"+
    "\1\332\2\0\5\u014b\5\0\4\u014b\1\263\3\u014b\43\0"+
    "\1\144\112\0\2\144\111\0\1\144\1\0\1\144\115\0"+
    "\1\144\113\0\1\144\60\0\1\356\34\0\1\144\4\0"+
    "\4\356\103\0\1\144\117\0\1\u014d\1\0\1\u014d\30\0"+
    "\2\265\1\u014e\4\265\1\0\3\265\1\0\1\265\1\u014f"+
    "\13\265\21\0\1\272\4\0\1\265\3\u014f\1\0\1\272"+
    "\2\0\5\265\5\0\4\265\1\0\3\265\1\0\65\u0150"+
    "\1\u0151\2\0\5\u0150\1\366\15\u0150\1\0\2\u0152\1\0"+
    "\1\u0152\4\0\1\u0152\4\0\1\u0152\2\0\1\u0152\7\0"+
    "\1\u0152\26\0\4\u0152\6\0\2\u0152\20\0\7\140\1\0"+
    "\1\140\1\u0153\1\140\1\0\15\140\21\0\1\261\4\0"+
    "\4\140\1\0\1\262\2\0\1\u0153\4\140\5\0\4\140"+
    "\1\263\3\140\2\0\1\u0154\6\140\1\0\3\140\1\0"+
    "\15\140\21\0\1\261\4\0\4\140\1\0\1\262\2\0"+
    "\5\140\5\0\4\140\1\263\3\140\2\0\7\163\1\0"+
    "\3\163\1\0\15\163\21\0\1\u0155\4\0\4\163\1\0"+
    "\1\u0156\2\0\5\163\5\0\4\163\1\u0157\3\163\17\0"+
    "\1\164\41\0\4\164\45\0\1\u0158\41\0\1\u0158\1\u0159"+
    "\2\u0158\110\0\1\u015a\1\0\1\u015a\32\0\1\u015b\12\0"+
    "\1\u015c\42\0\3\u015c\27\0\65\u015d\1\u015e\2\0\5\u015d"+
    "\1\0\15\u015d\1\0\2\u015f\1\0\1\u015f\4\0\1\u015f"+
    "\4\0\1\u015f\2\0\1\u015f\7\0\1\u015f\26\0\4\u015f"+
    "\6\0\2\u015f\52\0\1\u0160\4\0\1\u0161\23\0\1\u0160"+
    "\61\0\1\u0162\4\0\1\u0163\23\0\1\u0162\52\0\1\u0160"+
    "\6\0\1\u0162\4\0\1\u0163\23\0\1\u0162\24\0\1\u0160"+
    "\25\0\1\u0162\6\0\1\u0162\4\0\1\u0163\23\0\1\u0162"+
    "\24\0\1\u0162\22\0\1\u0160\112\0\1\u0162\124\0\1\201"+
    "\4\0\1\u0164\23\0\1\201\52\0\1\201\6\0\1\201"+
    "\4\0\1\u0164\23\0\1\201\24\0\1\201\22\0\1\201"+
    "\124\0\1\204\30\0\1\204\1\0\1\41\1\42\56\0"+
    "\1\206\30\0\1\206\1\0\1\41\1\42\56\0\1\207"+
    "\30\0\1\207\1\0\1\41\1\42\56\0\1\210\30\0"+
    "\1\210\1\0\1\41\1\42\23\0\57\u0165\1\u0166\5\u0165"+
    "\3\0\6\u0165\2\0\14\u0165\7\213\1\u0165\3\213\1\u0165"+
    "\15\213\1\u0165\1\u0167\17\u0165\1\u0168\3\u0165\1\u0166\4\213"+
    "\1\u0167\1\262\2\0\5\213\1\u0165\2\0\2\u0165\4\213"+
    "\1\u0169\3\213\2\u0165\7\213\1\u0165\3\213\1\u0165\5\213"+
    "\1\u016a\7\213\1\u0165\1\u0167\17\u0165\1\u0168\3\u0165\1\u0166"+
    "\4\213\1\u0167\1\262\2\0\5\213\1\u0165\2\0\2\u0165"+
    "\4\213\1\u0169\3\213\2\u0165\6\u016b\1\u016c\1\u0165\3\u016b"+
    "\1\u0165\1\u016b\1\215\6\u016b\1\u016d\4\u016b\1\u0165\1\u016e"+
    "\1\u0166\1\u0165\1\u0166\6\u0165\2\u0166\4\u0165\1\u016f\1\u0165"+
    "\3\u0166\4\215\1\u016e\1\272\2\0\5\u016b\1\u0165\2\0"+
    "\1\u0166\1\u0165\4\u016b\1\u0165\3\u016b\2\u0165\7\213\1\u0165"+
    "\3\213\1\u0170\15\213\1\u0165\1\u0167\17\u0165\1\u0168\3\u0165"+
    "\1\u0166\4\213\1\u0167\1\262\2\0\5\213\1\u0165\2\0"+
    "\2\u0165\2\213\1\u016a\1\213\1\u0169\3\213\34\u0165\1\217"+
    "\23\u0165\1\u0166\4\u0165\1\217\1\0\1\41\1\42\6\u0165"+
    "\2\0\13\u0165\34\u0171\1\u0172\1\u0166\15\u0171\1\u0173\3\u0171"+
    "\1\u0174\5\u0171\1\274\2\0\6\u0171\1\274\1\0\13\u0171"+
    "\16\u0165\1\u0175\14\u0165\1\u0176\1\u0166\21\u0165\1\u0177\1\u0166"+
    "\1\u0175\1\u0178\2\u0175\1\u0176\3\0\5\u0165\1\u0179\2\0"+
    "\1\u017a\45\u0165\1\u017b\3\u0165\1\u0166\17\u0165\1\u0166\4\u0165"+
    "\1\u017b\3\0\6\u0165\2\0\46\u0165\1\u017b\23\u0165\1\u0166"+
    "\4\u0165\1\u017b\3\0\6\u0165\2\0\53\u0165\1\u017c\12\u0165"+
    "\1\u017d\3\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\14\u0165"+
    "\7\u017e\1\u0165\3\u017e\1\u0165\15\u017e\1\u0165\1\u017f\5\u0165"+
    "\1\u0166\1\u0180\1\u0181\1\u0182\1\u0183\1\u0166\2\u0165\2\u0166"+
    "\1\u0184\1\u0185\3\u0166\4\u017e\1\u017f\1\332\2\0\5\u017e"+
    "\1\u0165\2\0\2\u0165\4\u017e\1\u0169\3\u017e\34\u0165\1\u017b"+
    "\6\u0165\1\232\10\u0165\1\u017d\3\u0165\1\u0166\4\u0165\1\u017b"+
    "\3\0\6\u0165\2\0\46\u0165\1\u017b\6\u0165\2\232\13\u0165"+
    "\1\u0166\4\u0165\1\u017b\3\0\6\u0165\2\0\46\u0165\1\u017b"+
    "\6\u0165\1\232\1\u0165\1\232\12\u0165\1\u0166\4\u0165\1\u017b"+
    "\3\0\6\u0165\2\0\46\u0165\1\u017b\5\u0165\1\u0166\1\u0186"+
    "\1\u0181\1\u0182\1\u0183\1\u0166\2\u0165\2\u0166\1\u0187\1\u0185"+
    "\3\u0166\4\u0165\1\u017b\3\0\6\u0165\2\0\46\u0165\1\u017b"+
    "\5\u0165\1\u0166\1\u0180\1\u0181\1\u0182\1\u0183\1\u0166\2\u0165"+
    "\2\u0166\1\u0188\1\u0185\3\u0166\4\u0165\1\u017b\3\0\6\u0165"+
    "\2\0\46\u0165\1\u017b\13\u0165\1\u0189\1\u0166\2\u0165\1\u017d"+
    "\3\u0165\1\u0166\4\u0165\1\u017b\3\0\6\u0165\2\0\46\u0165"+
    "\1\u017b\13\u0165\1\u0166\1\u018a\6\u0165\1\u0166\4\u0165\1\u017b"+
    "\3\0\6\u0165\2\0\46\u0165\1\u018b\1\u0165\1\u0166\3\u0165"+
    "\1\u0166\1\u0180\1\u0181\1\u0182\1\u0183\1\u0166\2\u0165\2\u0166"+
    "\1\u0188\1\u0185\3\u0166\4\u0165\1\u018b\3\0\6\u0165\2\0"+
    "\31\u0165\1\u018c\14\u0165\1\u017b\17\u0165\1\232\3\u0165\1\u0166"+
    "\4\u018c\1\u017b\3\0\6\u0165\2\0\46\u0165\1\u017b\17\u0165"+
    "\1\u017d\1\232\2\u0165\1\u0166\4\u0165\1\u017b\3\0\6\u0165"+
    "\2\0\46\u0165\1\u017b\5\u0165\1\u0166\1\u0180\1\u0181\1\u0182"+
    "\1\u0183\1\u0166\2\u0165\2\u0166\1\u0187\1\u0185\3\u0166\4\u0165"+
    "\1\u017b\3\0\6\u0165\2\0\46\u0165\1\u017b\5\u0165\1\u0166"+
    "\1\u0180\1\u0181\1\u0182\1\u0183\1\u0166\2\u0165\2\u0166\1\u0187"+
    "\1\u0185\3\u0166\1\u0165\1\u018d\1\u0165\1\u018d\1\u017b\3\0"+
    "\6\u0165\2\0\14\u0165\2\u016b\1\u018e\3\u016b\1\u016c\1\u0165"+
    "\3\u016b\1\u0165\1\u016b\1\u018f\6\u016b\1\u016d\4\u016b\1\u0165"+
    "\1\u016e\1\u0166\1\u0165\1\u0166\6\u0165\2\u0166\4\u0165\1\u016f"+
    "\1\u0165\3\u0166\1\u016b\3\u018f\1\u016e\1\272\2\0\5\u016b"+
    "\1\u0165\2\0\1\u0166\1\u0165\4\u016b\1\u0165\3\u016b\1\u0165"+
    "\57\u0190\1\u0191\5\u0190\1\u0192\2\0\5\u0190\1\u0193\2\u0194"+
    "\13\u0190\1\u0165\2\u0195\1\u0165\1\u0195\4\u0165\1\u0195\4\u0165"+
    "\1\u0195\2\u0165\1\u0195\7\u0165\1\u0195\25\u0165\1\u0166\4\u0195"+
    "\1\u0165\3\0\2\u0165\2\u0195\2\u0165\2\0\13\u0165\1\0"+
    "\1\u0196\3\36\1\246\2\36\1\0\1\247\2\36\1\0"+
    "\15\36\1\0\1\250\6\0\1\251\10\0\1\252\4\0"+
    "\4\36\1\250\1\253\2\0\5\36\4\0\1\254\4\36"+
    "\1\255\3\36\2\0\4\36\1\246\2\36\1\0\1\247"+
    "\2\36\1\0\12\36\1\u0197\2\36\1\0\1\250\6\0"+
    "\1\251\10\0\1\252\4\0\4\36\1\250\1\253\2\0"+
    "\5\36\4\0\1\254\4\36\1\255\3\36\6\0\1\u0198"+
    "\3\0\1\u0199\21\0\1\250\6\0\1\251\21\0\1\250"+
    "\44\0\1\u019a\41\0\4\u019a\26\0\1\u019a\1\0\7\255"+
    "\1\0\3\255\1\0\1\255\1\u019b\13\255\1\0\1\u019c"+
    "\6\0\1\u019d\10\0\1\252\4\0\4\u019b\1\u019c\1\253"+
    "\2\0\5\255\5\0\4\255\1\u019b\3\255\6\0\1\u0198"+
    "\3\0\1\u0199\21\0\1\u019e\30\0\1\u019e\27\0\7\255"+
    "\1\0\3\255\1\0\15\255\1\0\1\u019c\6\0\1\u019d"+
    "\10\0\1\252\4\0\4\255\1\u019c\1\253\2\0\5\255"+
    "\5\0\10\255\2\0\7\256\1\0\3\256\1\0\15\256"+
    "\1\0\1\u019f\6\0\1\251\15\0\4\256\1\u019f\1\u01a0"+
    "\2\0\5\256\5\0\4\256\1\u01a0\3\256\17\0\1\277"+
    "\14\0\1\260\22\0\1\300\1\0\1\277\1\301\2\277"+
    "\1\260\10\0\1\302\2\0\1\303\30\0\1\u01a1\41\0"+
    "\4\u01a1\26\0\1\u01a2\1\0\7\263\1\0\3\263\1\0"+
    "\1\263\1\u01a3\13\263\21\0\1\u014c\4\0\4\u01a3\1\0"+
    "\1\332\2\0\5\263\5\0\4\263\1\u01a4\3\263\2\0"+
    "\7\263\1\0\3\263\1\0\15\263\21\0\1\u014c\4\0"+
    "\4\263\1\0\1\332\2\0\5\263\5\0\10\263\2\0"+
    "\7\54\1\0\3\54\1\0\15\54\1\0\1\u01a5\1\u01a6"+
    "\16\0\1\261\4\0\4\54\1\u01a5\1\262\2\0\5\54"+
    "\5\0\4\54\1\263\3\54\2\0\7\265\1\0\3\265"+
    "\1\0\15\265\21\0\1\272\4\0\4\265\1\0\1\272"+
    "\2\0\5\265\5\0\4\265\1\0\3\265\2\0\7\265"+
    "\1\0\3\265\1\0\5\265\1\u01a7\7\265\21\0\1\272"+
    "\4\0\4\265\1\0\1\272\2\0\5\265\5\0\4\265"+
    "\1\0\3\265\2\0\7\265\1\0\3\265\1\271\15\265"+
    "\21\0\1\272\4\0\4\265\1\0\1\272\2\0\5\265"+
    "\5\0\2\265\1\u01a7\1\265\1\0\3\265\2\0\7\u01a8"+
    "\1\0\3\u01a8\1\0\1\u01a8\1\277\6\u01a8\1\u01a9\4\u01a8"+
    "\1\0\1\270\1\271\1\0\1\271\2\0\1\u01a8\3\0"+
    "\2\271\6\0\1\271\1\u01aa\1\271\1\277\1\301\2\277"+
    "\1\270\3\0\5\u01a8\1\302\2\0\1\u01ab\1\0\4\u01a8"+
    "\1\0\3\u01a8\34\0\1\u01ac\1\u01a6\27\0\1\u01ac\26\0"+
    "\34\274\1\275\1\u01ad\30\274\2\0\7\274\1\0\13\274"+
    "\34\275\1\u01ae\1\u01af\30\275\2\0\7\275\1\0\13\275"+
    "\34\274\1\275\1\u01ad\10\274\1\u01b0\17\274\2\0\7\274"+
    "\1\0\13\274\16\0\1\277\41\0\4\277\110\0\1\u01b1"+
    "\1\0\1\u01b1\32\0\1\303\12\0\1\u01b2\42\0\3\u01b2"+
    "\27\0\65\u01b3\1\u01b4\2\0\5\u01b3\1\0\15\u01b3\1\0"+
    "\2\u01ab\1\0\1\u01ab\4\0\1\u01ab\4\0\1\u01ab\2\0"+
    "\1\u01ab\7\0\1\u01ab\26\0\4\u01ab\6\0\2\u01ab\52\0"+
    "\1\304\2\0\2\271\1\0\1\271\1\u01b5\1\u01b6\1\u01b7"+
    "\1\u01b5\1\271\1\u01b8\1\u01b9\2\271\1\u01ba\1\u01bb\2\271"+
    "\5\0\1\304\26\0\7\305\1\u01bc\6\305\1\306\6\305"+
    "\1\u01bd\6\305\3\306\1\305\7\306\2\305\10\306\1\315"+
    "\2\306\1\305\3\0\5\305\1\316\2\0\1\317\13\305"+
    "\2\306\1\305\2\306\1\305\1\310\1\305\3\306\1\305"+
    "\2\306\1\305\1\306\1\305\2\306\1\305\1\311\4\306"+
    "\1\305\1\307\3\306\1\305\7\306\1\u01be\1\u01bf\10\306"+
    "\1\315\2\306\1\307\3\0\5\306\1\316\2\0\1\317"+
    "\3\305\2\306\1\305\1\306\12\305\1\u01bc\6\305\1\306"+
    "\3\305\1\306\2\305\1\u01bd\6\305\3\306\1\305\7\306"+
    "\2\305\10\306\1\315\2\306\1\305\3\0\5\305\1\316"+
    "\2\0\1\317\21\305\1\u01bc\4\305\1\306\1\305\1\306"+
    "\6\305\1\u01bd\6\305\3\306\1\305\7\306\2\305\10\306"+
    "\1\315\2\306\1\305\3\0\5\305\1\316\2\0\1\317"+
    "\3\305\1\306\7\305\2\306\1\307\2\306\1\307\1\310"+
    "\1\305\3\306\1\305\2\306\1\307\1\306\1\305\2\306"+
    "\1\305\1\311\4\306\1\305\1\u01c0\3\306\1\305\7\306"+
    "\1\u01c0\1\u01bf\10\306\1\315\2\306\1\u01c0\3\0\5\306"+
    "\1\316\2\0\1\317\2\305\1\307\2\306\1\305\1\306"+
    "\1\320\3\305\2\306\1\307\2\306\1\307\1\310\1\305"+
    "\3\306\1\305\2\306\1\307\1\306\1\305\2\306\1\305"+
    "\1\311\4\306\1\305\1\u01c0\3\306\1\305\7\306\1\u01be"+
    "\1\u01c0\10\306\1\315\2\306\1\u01c0\3\0\5\306\1\316"+
    "\2\0\1\317\2\305\1\307\2\306\1\305\1\306\1\320"+
    "\5\305\1\317\3\305\1\u01bc\6\305\1\306\6\305\1\u01bd"+
    "\6\305\3\306\1\305\7\306\2\305\10\306\1\315\2\306"+
    "\1\305\3\0\5\305\1\316\2\0\1\317\12\305\7\u01c1"+
    "\1\u01c2\6\u01c1\1\u01c3\6\u01c1\1\u01c4\6\u01c1\3\u01c3\1\u01c1"+
    "\7\u01c3\2\u01c1\10\u01c3\1\u01c5\2\u01c3\1\u01c1\1\u01b4\2\0"+
    "\5\u01c1\1\316\2\u01b3\1\u01c6\12\u01c1\1\305\2\u01c7\1\305"+
    "\1\u01c7\2\305\1\u01bc\1\305\1\u01c7\4\305\1\u01c7\2\305"+
    "\1\u01c7\3\305\1\u01bd\3\305\1\u01c7\2\305\3\306\1\305"+
    "\7\306\2\305\7\306\1\u01c7\1\u01c8\2\u01c7\1\305\3\0"+
    "\2\305\2\u01c7\1\305\1\316\2\0\1\317\13\305\2\306"+
    "\1\305\2\306\1\305\1\310\1\305\3\306\1\305\2\306"+
    "\1\305\1\306\1\305\2\306\1\305\1\311\4\306\1\305"+
    "\1\307\3\306\1\305\7\306\1\u01be\1\u01bf\10\306\1\315"+
    "\2\306\1\307\3\0\5\306\1\316\2\0\1\317\3\305"+
    "\2\306\1\305\1\306\1\305\1\307\1\305\1\0\7\321"+
    "\1\0\3\321\1\0\15\321\1\0\1\260\17\0\1\u014c"+
    "\4\0\4\321\1\260\1\332\2\0\5\321\5\0\4\321"+
    "\1\263\3\321\17\0\1\277\14\0\1\322\2\0\2\271"+
    "\1\0\1\271\1\u01b5\1\u01b6\1\u01b7\1\u01b5\1\271\1\u01b8"+
    "\1\u01b9\2\271\1\u01ba\1\u01bb\1\271\1\u01aa\1\0\1\277"+
    "\1\301\2\277\1\322\10\0\1\302\2\0\1\303\13\0"+
    "\7\u01c9\1\0\3\u01c9\1\0\1\u01c9\1\0\13\u01c9\7\0"+
    "\1\u01c9\26\0\5\u01c9\5\0\4\u01c9\1\0\3\u01c9\43\0"+
    "\1\323\112\0\2\323\111\0\1\323\1\0\1\323\47\0"+
    "\7\u01c9\1\0\3\u01c9\1\0\1\u01c9\1\0\13\u01c9\7\0"+
    "\1\u01c9\1\323\25\0\5\u01c9\5\0\4\u01c9\1\0\3\u01c9"+
    "\17\0\1\u01a2\27\0\1\u01ca\4\0\1\323\4\0\4\u01a2"+
    "\26\0\1\u01a2\54\0\1\323\37\0\7\263\1\0\3\263"+
    "\1\0\1\263\1\u01a4\13\263\21\0\1\u014c\4\0\4\u01a4"+
    "\1\0\1\332\2\0\5\263\5\0\4\263\1\u01a4\3\263"+
    "\47\0\1\u01ca\77\0\1\304\5\0\1\323\1\324\1\325"+
    "\1\u01cb\1\327\1\323\2\0\2\323\1\340\1\331\2\323"+
    "\5\0\1\304\61\0\1\304\5\0\1\323\1\324\1\u01cc"+
    "\1\326\1\327\1\323\2\0\2\323\1\340\1\331\2\323"+
    "\5\0\1\304\61\0\1\304\5\0\1\323\1\327\1\325"+
    "\1\326\1\327\1\323\2\0\2\323\1\340\1\331\2\323"+
    "\5\0\1\304\74\0\1\u01ca\4\0\1\323\112\0\1\323"+
    "\106\0\1\u01cd\1\u01ce\75\0\1\u01cf\13\0\1\u01b8\1\u01b9"+
    "\13\0\1\u01cf\31\0\1\u01cf\2\0\1\u01cf\10\0\1\u01cf"+
    "\13\0\1\343\2\0\2\271\1\0\1\271\1\u01b5\1\u01b6"+
    "\1\u01b7\1\u01b5\1\271\1\u01b8\1\u01b9\2\271\1\u01ba\1\u01bb"+
    "\2\271\5\0\1\343\16\0\1\u01cf\4\0\1\u01d0\2\0"+
    "\33\u01d1\1\304\13\u01d1\1\u01d2\14\u01d1\1\304\3\0\6\u01d1"+
    "\2\0\13\u01d1\46\0\1\u01ca\1\u01cd\1\u01ce\75\0\1\u01cf"+
    "\13\0\1\u01b8\1\u01b9\13\0\1\u01cf\24\0\1\u01cf\50\0"+
    "\1\u01cd\43\0\3\u01d3\1\u01d1\2\u01d3\1\u01d1\10\u01d3\1\u01d1"+
    "\13\u01d3\1\304\14\u01d3\1\u01d4\13\u01d3\1\304\3\0\6\u01d3"+
    "\2\0\3\u01d3\1\u01d1\4\u01d3\1\u01d5\2\u01d3\33\0\1\u01cf"+
    "\13\0\1\u01b8\1\u01b9\13\0\1\u01cf\24\0\1\u01d6\34\0"+
    "\1\354\1\0\3\271\1\0\1\271\1\u01b5\1\u01b6\1\u01b7"+
    "\1\u01b5\1\271\1\u01b8\1\u01b9\2\271\1\u01ba\1\u01bb\2\271"+
    "\5\0\1\354\27\0\7\356\1\0\3\356\1\0\15\356"+
    "\26\0\4\356\4\0\5\356\5\0\4\356\1\0\3\356"+
    "\62\0\1\u01d7\1\0\1\u01d7\30\0\2\u01d8\1\265\1\u01d8"+
    "\3\265\1\0\1\u01d8\2\265\1\0\1\265\1\u01d8\2\265"+
    "\1\u01d8\7\265\1\u01d8\21\0\1\272\4\0\4\u01d8\1\0"+
    "\1\272\2\0\2\265\2\u01d8\1\265\5\0\4\265\1\0"+
    "\3\265\2\0\6\265\1\266\1\0\3\265\1\0\1\265"+
    "\1\363\6\265\1\267\4\265\1\0\1\270\1\271\1\0"+
    "\1\271\6\0\2\271\4\0\1\272\1\0\3\271\1\265"+
    "\3\363\1\270\1\272\2\0\5\265\3\0\1\271\1\0"+
    "\4\265\1\0\3\265\1\0\65\u01d9\1\u01da\2\0\5\u01d9"+
    "\1\u01db\15\u01d9\65\u01dc\1\364\2\0\5\364\1\u01dd\1\364"+
    "\14\u01dc\65\u01de\1\106\2\0\6\106\1\u01df\14\u01de\1\0"+
    "\2\370\1\0\1\370\2\0\1\u01e0\1\0\1\370\4\0"+
    "\1\370\2\0\1\370\3\0\1\u01e1\3\0\1\370\1\0"+
    "\1\270\1\271\1\0\1\271\6\0\2\271\6\0\3\271"+
    "\4\370\1\270\5\0\2\370\4\0\1\271\13\0\2\114"+
    "\1\u01e2\4\114\1\0\3\114\1\0\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\3\114"+
    "\1\u01e3\3\114\1\0\3\114\1\0\4\114\1\u01e4\10\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\3\114"+
    "\2\0\7\114\1\0\3\114\1\u01e5\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\2\114\1\u01e6\1\114\1\0\3\114"+
    "\10\0\1\u01e7\2\0\1\u01e7\55\0\1\u01e7\23\0\3\114"+
    "\1\u01e8\3\114\1\0\3\114\1\0\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\6\114"+
    "\1\u01e9\1\0\1\114\1\u01e9\1\114\1\0\15\114\26\0"+
    "\4\114\4\0\1\u01e9\4\114\5\0\4\114\1\0\3\114"+
    "\2\0\7\114\1\0\3\114\1\0\3\114\1\u01ea\11\114"+
    "\26\0\4\114\4\0\1\114\1\u01ea\3\114\5\0\4\114"+
    "\1\0\3\114\2\0\7\114\1\0\3\114\1\u01eb\15\114"+
    "\26\0\4\114\4\0\5\114\5\0\2\114\1\u01ec\1\114"+
    "\1\0\3\114\2\0\7\114\1\u01eb\1\u01ec\1\114\1\u01ec"+
    "\1\0\5\114\1\u01ec\7\114\26\0\4\114\4\0\4\114"+
    "\1\u01ec\5\0\1\114\1\u01ec\2\114\1\0\1\114\1\u01ec"+
    "\1\114\11\0\1\u010f\1\0\1\u01eb\55\0\1\u01eb\12\0"+
    "\1\u010f\4\0\1\u010f\3\0\7\114\1\0\3\114\1\0"+
    "\12\114\1\u01ec\2\114\26\0\4\114\4\0\5\114\5\0"+
    "\4\114\1\0\3\114\2\0\1\u01ec\6\114\1\0\3\114"+
    "\1\0\3\114\1\u01ec\11\114\26\0\4\114\4\0\1\114"+
    "\1\u01ec\3\114\5\0\4\114\1\0\3\114\14\0\1\u01ed"+
    "\60\0\1\u01ed\17\0\7\114\1\0\1\u01ec\2\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\7\114\1\u01eb\3\114\1\0\4\114\1\u01ec"+
    "\10\114\26\0\4\114\4\0\5\114\5\0\1\114\1\u01ec"+
    "\2\114\1\0\1\114\1\u01ec\1\114\2\0\7\114\1\0"+
    "\1\u01ec\1\114\1\u01ec\1\0\15\114\26\0\4\114\4\0"+
    "\4\114\1\u01ec\5\0\4\114\1\0\3\114\2\0\6\114"+
    "\1\u01ec\1\0\3\114\1\0\15\114\26\0\4\114\4\0"+
    "\5\114\5\0\4\114\1\0\3\114\2\0\7\114\1\u01eb"+
    "\3\114\1\u01eb\15\114\26\0\4\114\4\0\5\114\5\0"+
    "\1\114\2\u01ec\1\114\1\0\1\114\1\u01ec\1\114\2\0"+
    "\7\114\1\u010f\1\114\1\u01ec\1\114\1\0\15\114\26\0"+
    "\4\114\4\0\1\u01ec\4\114\5\0\1\114\1\u010e\2\114"+
    "\1\0\1\114\1\u010e\1\114\2\0\7\114\1\0\2\114"+
    "\1\u01e4\1\0\15\114\26\0\4\114\4\0\4\114\1\u01e4"+
    "\5\0\4\114\1\0\3\114\2\0\1\u01e2\6\114\1\0"+
    "\2\114\1\u01ee\1\0\15\114\26\0\4\114\4\0\4\114"+
    "\1\u01ee\5\0\4\114\1\0\3\114\2\0\7\114\1\0"+
    "\3\114\1\0\4\114\1\u01e9\10\114\26\0\4\114\4\0"+
    "\5\114\5\0\4\114\1\0\3\114\13\0\1\u01ef\55\0"+
    "\1\u01ef\23\0\7\114\1\0\1\114\1\u01f0\1\114\1\0"+
    "\15\114\26\0\4\114\4\0\1\u01f0\4\114\5\0\4\114"+
    "\1\0\3\114\2\0\6\114\1\u01e2\1\0\3\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\4\114\1\u0100\1\114\1\u0101\1\u013d\1\u0103"+
    "\1\u0104\1\114\1\0\3\114\1\u0106\1\u0107\1\114\1\u0108"+
    "\1\u0109\1\u010a\2\114\1\u0107\1\114\26\0\4\114\4\0"+
    "\1\u0104\1\u0106\3\114\5\0\1\114\1\u013e\2\114\1\0"+
    "\1\114\1\u013e\1\u0109\2\0\4\u01ec\1\114\1\u01ec\1\114"+
    "\1\u01eb\3\114\1\0\2\114\1\u01ec\12\114\26\0\4\114"+
    "\4\0\2\114\1\u01ec\2\114\5\0\1\114\1\u01ec\2\114"+
    "\1\0\1\114\1\u01ec\1\114\2\0\1\u01f1\6\114\1\0"+
    "\3\114\1\0\15\114\26\0\4\114\4\0\5\114\5\0"+
    "\4\114\1\0\3\114\11\0\1\u01f2\72\0\1\u01f2\4\0"+
    "\1\u01f2\3\0\7\114\1\0\3\114\1\0\4\114\1\u01f3"+
    "\10\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\7\114\1\u01f2\3\114\1\0\15\114\26\0"+
    "\4\114\4\0\5\114\5\0\1\114\1\u0136\2\114\1\0"+
    "\1\114\1\u0136\1\114\22\0\1\u01ed\73\0\1\u01f4\67\0"+
    "\1\u01f4\23\0\1\u01f5\7\0\1\u010f\60\0\1\u010f\17\0"+
    "\4\u01eb\1\0\1\u01eb\1\0\1\u01eb\1\0\1\u01f6\4\0"+
    "\1\u01eb\50\0\1\u01f6\1\0\1\u01eb\10\0\1\u01eb\4\0"+
    "\1\u01eb\16\0\1\u01f7\67\0\1\u01f7\26\0\1\u01f8\50\0"+
    "\1\u01f8\22\0\7\114\1\0\3\114\1\u01f9\6\114\1\u01fa"+
    "\6\114\26\0\4\114\4\0\5\114\5\0\2\114\1\u01fb"+
    "\1\114\1\0\3\114\2\0\7\114\1\u01fc\3\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\1\114\1\u01fd"+
    "\2\114\1\0\1\114\1\u01fd\1\114\2\0\7\114\1\0"+
    "\1\114\1\u01fe\1\114\1\0\15\114\26\0\4\114\4\0"+
    "\1\u01fe\4\114\5\0\4\114\1\0\3\114\2\0\3\114"+
    "\1\u01ff\3\114\1\0\3\114\1\0\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\7\114"+
    "\1\0\1\114\1\u01e4\1\114\1\0\15\114\26\0\4\114"+
    "\4\0\1\u01e4\4\114\5\0\4\114\1\0\3\114\2\0"+
    "\5\114\1\u010e\1\114\1\0\3\114\1\0\15\114\26\0"+
    "\4\114\4\0\5\114\5\0\4\114\1\0\3\114\2\0"+
    "\1\114\1\u010e\5\114\1\0\3\114\1\0\15\114\26\0"+
    "\4\114\4\0\2\114\1\u010e\2\114\5\0\4\114\1\0"+
    "\3\114\2\0\7\114\1\u01f5\3\114\1\u01f5\15\114\26\0"+
    "\4\114\4\0\5\114\5\0\1\114\2\u01e2\1\114\1\0"+
    "\1\114\1\u01e2\1\114\14\0\1\u01e7\60\0\1\u01e7\31\0"+
    "\1\u0200\60\0\1\u0200\17\0\7\114\1\0\1\114\1\u01fa"+
    "\1\114\1\0\15\114\26\0\4\114\4\0\1\u01fa\4\114"+
    "\5\0\4\114\1\0\3\114\2\0\7\114\1\0\2\114"+
    "\1\u01e9\1\0\15\114\26\0\4\114\4\0\4\114\1\u01e9"+
    "\5\0\4\114\1\0\3\114\2\0\7\114\1\0\2\114"+
    "\1\u0201\1\0\15\114\26\0\4\114\4\0\4\114\1\u0201"+
    "\5\0\4\114\1\0\3\114\22\0\1\u0202\75\0\1\u0203"+
    "\4\0\1\u0204\6\0\1\u0205\50\0\1\u0205\22\0\7\114"+
    "\1\0\3\114\1\0\6\114\1\u01e9\6\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\6\114"+
    "\1\u0206\1\0\3\114\1\0\5\114\1\u0207\1\114\1\u01ec"+
    "\5\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\2\114\1\u01ec\2\0\1\u0208\6\114\1\0\3\114\1\0"+
    "\7\114\1\u0115\5\114\26\0\4\114\4\0\5\114\5\0"+
    "\4\114\1\0\2\114\1\u0115\2\0\7\114\1\0\1\114"+
    "\1\u01e9\1\114\1\0\15\114\26\0\4\114\4\0\1\u01e9"+
    "\4\114\5\0\4\114\1\0\3\114\2\0\1\u0100\6\114"+
    "\1\0\3\114\1\0\15\114\26\0\4\114\4\0\5\114"+
    "\5\0\4\114\1\0\3\114\2\0\3\114\1\u0209\1\u01e9"+
    "\2\114\1\0\3\114\1\0\15\114\26\0\4\114\4\0"+
    "\5\114\5\0\4\114\1\0\3\114\2\0\2\u01ec\5\114"+
    "\1\0\3\114\1\0\4\114\1\u020a\1\114\1\u010e\6\114"+
    "\26\0\4\114\4\0\2\114\1\u01ec\2\114\5\0\4\114"+
    "\1\0\3\114\2\0\7\114\1\0\2\114\1\u010e\1\0"+
    "\15\114\26\0\4\114\4\0\4\114\1\u010e\5\0\4\114"+
    "\1\0\3\114\2\0\7\114\1\0\3\114\1\0\6\114"+
    "\1\u0209\6\114\26\0\4\114\4\0\5\114\5\0\4\114"+
    "\1\0\3\114\2\0\6\114\1\u020b\1\0\3\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\5\114\1\u020c\1\114\1\0\3\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\26\0\1\u020d\66\0\7\114\1\0\3\114\1\0"+
    "\10\114\1\u020b\4\114\26\0\4\114\4\0\5\114\5\0"+
    "\4\114\1\0\3\114\2\0\7\114\1\0\3\114\1\0"+
    "\7\114\1\u01ec\5\114\26\0\4\114\4\0\5\114\5\0"+
    "\4\114\1\0\2\114\1\u01ec\13\0\1\u01eb\55\0\1\u01eb"+
    "\23\0\7\114\1\0\1\114\1\u01ec\1\114\1\0\15\114"+
    "\26\0\4\114\4\0\1\u01ec\4\114\5\0\4\114\1\0"+
    "\3\114\2\0\7\114\1\0\1\114\1\u020e\1\114\1\0"+
    "\15\114\26\0\4\114\4\0\1\u020e\4\114\5\0\4\114"+
    "\1\0\3\114\2\0\1\114\1\u010e\5\114\1\0\3\114"+
    "\1\0\1\u010e\3\114\1\u010e\10\114\26\0\4\114\4\0"+
    "\2\114\1\u010e\2\114\5\0\4\114\1\0\3\114\2\0"+
    "\7\114\1\0\3\114\1\0\4\114\1\u01e4\10\114\26\0"+
    "\4\114\4\0\5\114\5\0\4\114\1\0\3\114\2\0"+
    "\1\114\1\u01e3\5\114\1\0\3\114\1\0\15\114\26\0"+
    "\4\114\4\0\2\114\1\u01e3\2\114\5\0\4\114\1\0"+
    "\3\114\2\0\2\114\1\u01e2\4\114\1\0\2\114\1\u010e"+
    "\1\0\15\114\26\0\4\114\4\0\4\114\1\u010e\5\0"+
    "\4\114\1\0\3\114\2\0\4\u01ec\1\114\1\u01ec\1\114"+
    "\1\u01eb\1\114\1\u020f\1\114\1\0\2\114\1\u01ec\12\114"+
    "\26\0\4\114\4\0\1\u020f\1\114\1\u01ec\2\114\5\0"+
    "\1\114\1\u01ec\2\114\1\0\1\114\1\u01ec\1\114\2\0"+
    "\7\114\1\0\3\114\1\u01f7\15\114\26\0\4\114\4\0"+
    "\5\114\5\0\2\114\1\u0210\1\114\1\0\3\114\2\0"+
    "\7\114\1\0\3\114\1\0\3\114\1\u0211\11\114\26\0"+
    "\4\114\4\0\1\114\1\u0211\3\114\5\0\4\114\1\0"+
    "\3\114\2\0\7\114\1\0\3\114\1\0\4\114\1\u0212"+
    "\10\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\3\114\1\u0213\3\114\1\0\1\u0214\2\114"+
    "\1\0\3\114\1\u0215\11\114\26\0\4\114\4\0\1\114"+
    "\1\u0215\3\114\5\0\4\114\1\0\3\114\2\0\7\140"+
    "\1\0\3\140\1\0\15\140\1\0\2\u01a6\16\0\1\261"+
    "\4\0\4\140\1\u01a6\1\262\2\0\5\140\5\0\4\140"+
    "\1\263\3\140\34\0\2\u01a6\27\0\1\u01a6\44\0\1\u01a2"+
    "\41\0\4\u01a2\26\0\1\u01a2\61\0\1\u0216\1\0\1\u0216"+
    "\30\0\2\u0217\1\265\1\u0217\3\265\1\0\1\u0217\2\265"+
    "\1\0\1\265\1\u0217\2\265\1\u0217\7\265\1\u0217\21\0"+
    "\1\272\4\0\4\u0217\1\0\1\272\2\0\2\265\2\u0217"+
    "\1\265\5\0\4\265\1\0\3\265\2\0\7\265\1\0"+
    "\3\265\1\0\1\265\1\u014f\13\265\21\0\1\272\4\0"+
    "\1\265\3\u014f\1\0\1\272\2\0\5\265\5\0\4\265"+
    "\1\0\3\265\1\0\65\u01d9\1\u01da\2\0\5\u01d9\1\u0218"+
    "\15\u01d9\65\u01dc\1\u0150\2\0\5\u0150\1\u0219\1\u0150\14\u01dc"+
    "\1\0\5\140\1\u021a\1\140\1\0\3\140\1\0\15\140"+
    "\21\0\1\261\4\0\4\140\1\0\1\262\2\0\5\140"+
    "\5\0\4\140\1\263\3\140\2\0\6\140\1\u021b\1\0"+
    "\3\140\1\0\15\140\21\0\1\261\4\0\4\140\1\0"+
    "\1\262\2\0\5\140\5\0\4\140\1\263\3\140\17\0"+
    "\1\u021c\41\0\4\u021c\26\0\1\u021c\1\0\7\u0157\1\0"+
    "\3\u0157\1\0\1\u0157\1\u021d\13\u0157\21\0\1\u0155\4\0"+
    "\4\u021d\1\0\1\u0156\2\0\5\u0157\5\0\4\u0157\1\u021d"+
    "\3\u0157\2\0\7\u0157\1\0\3\u0157\1\0\15\u0157\21\0"+
    "\1\u0155\4\0\4\u0157\1\0\1\u0156\2\0\5\u0157\5\0"+
    "\10\u0157\17\0\1\u0158\41\0\4\u0158\110\0\1\u021e\1\0"+
    "\1\u021e\45\0\1\u015c\42\0\3\u015c\124\0\1\u021f\102\0"+
    "\1\u015d\2\0\7\u015d\15\0\2\u0220\1\0\1\u0221\14\0"+
    "\1\u0222\11\0\1\u0161\30\0\1\u0161\5\0\1\u0220\23\0"+
    "\2\u0220\1\0\1\u0220\1\0\1\u0223\6\0\1\u0220\4\0"+
    "\1\u0222\6\0\1\u0163\30\0\1\u0163\16\0\1\u0223\4\0"+
    "\1\u0223\1\u0222\2\0\3\201\1\202\1\0\1\201\1\0"+
    "\1\202\6\0\1\201\1\0\1\u0224\2\0\1\u0224\6\0"+
    "\1\u0164\30\0\1\u0164\5\0\1\201\10\0\1\202\4\0"+
    "\1\202\1\u0224\1\0\1\u0165\7\u0225\1\u0165\3\u0225\1\u0165"+
    "\1\u0225\1\u0175\13\u0225\1\u0165\1\u0167\5\u0165\1\u0225\14\u0165"+
    "\1\u0177\1\u0166\1\u0175\1\u0178\2\u0175\1\u0167\3\0\5\u0225"+
    "\1\u0179\2\0\1\u017a\1\u0165\4\u0225\1\u0165\3\u0225\17\u0165"+
    "\1\u0226\40\u0165\1\u0166\4\u0226\1\u0165\3\0\6\u0165\2\0"+
    "\12\u0165\1\u0227\1\u0165\7\u0169\1\u0165\3\u0169\1\u0165\15\u0169"+
    "\21\u0165\1\u0228\3\u0165\1\u0166\4\u0169\1\u0165\1\332\2\0"+
    "\5\u0169\1\u0165\2\0\2\u0165\10\u0169\2\u0165\7\213\1\u0165"+
    "\3\213\1\u0165\15\213\1\u0165\1\u0229\1\u022a\16\u0165\1\u0168"+
    "\3\u0165\1\u0166\4\213\1\u0229\1\262\2\0\5\213\1\u0165"+
    "\2\0\2\u0165\4\213\1\u0169\3\213\2\u0165\7\u016b\1\u0165"+
    "\3\u016b\1\u0165\15\u016b\21\u0165\1\u016f\3\u0165\1\u0166\4\u016b"+
    "\1\u0165\1\272\2\0\5\u016b\1\u0165\2\0\2\u0165\4\u016b"+
    "\1\u0165\3\u016b\2\u0165\7\u016b\1\u0165\3\u016b\1\u0165\5\u016b"+
    "\1\u022b\7\u016b\21\u0165\1\u016f\3\u0165\1\u0166\4\u016b\1\u0165"+
    "\1\272\2\0\5\u016b\1\u0165\2\0\2\u0165\4\u016b\1\u0165"+
    "\3\u016b\2\u0165\7\u016b\1\u0165\3\u016b\1\u0166\15\u016b\21\u0165"+
    "\1\u016f\3\u0165\1\u0166\4\u016b\1\u0165\1\272\2\0\5\u016b"+
    "\1\u0165\2\0\2\u0165\2\u016b\1\u022b\1\u016b\1\u0165\3\u016b"+
    "\2\u0165\7\u0225\1\u0165\3\u0225\1\u0165\1\u0225\1\u0175\6\u0225"+
    "\1\u022c\4\u0225\1\u0165\1\u016e\1\u0166\1\u0165\1\u0166\2\u0165"+
    "\1\u0225\3\u0165\2\u0166\6\u0165\1\u0166\1\u022d\1\u0166\1\u0175"+
    "\1\u0178\2\u0175\1\u016e\3\0\5\u0225\1\u0179\2\0\1\u022e"+
    "\1\u0165\4\u0225\1\u0165\3\u0225\17\u0165\1\u018c\40\u0165\1\u0166"+
    "\4\u018c\1\u0165\3\0\6\u0165\2\0\46\u0165\1\u022f\1\u022a"+
    "\22\u0165\1\u0166\4\u0165\1\u022f\3\0\6\u0165\2\0\13\u0165"+
    "\34\u0171\1\u0172\1\u0230\21\u0171\1\u0174\5\u0171\1\274\2\0"+
    "\6\u0171\1\274\1\0\13\u0171\34\u0172\1\u0231\1\u0232\21\u0172"+
    "\1\u0233\5\u0172\1\275\2\0\6\u0172\1\275\1\0\13\u0172"+
    "\34\u0171\1\u0172\1\u0230\10\u0171\1\u0234\10\u0171\1\u0174\5\u0171"+
    "\1\274\2\0\6\u0171\1\274\1\0\13\u0171\16\u0165\1\u0175"+
    "\40\u0165\1\u0166\4\u0175\1\u0165\3\0\6\u0165\2\0\31\u0165"+
    "\1\u0175\14\u0165\1\u0176\22\u0165\1\u0177\1\u0166\1\u0175\1\u0178"+
    "\2\u0175\1\u0176\3\0\5\u0165\1\u0179\2\0\1\u017a\71\u0165"+
    "\1\u0166\1\u0165\1\u0235\1\u0165\1\u0235\1\u0165\3\0\6\u0165"+
    "\2\0\16\u0165\1\u017a\12\u0165\1\u0236\40\u0165\1\u0166\1\u0165"+
    "\3\u0236\1\u0165\3\0\6\u0165\2\0\13\u0165\57\u0237\1\u0238"+
    "\5\u0237\1\u0239\2\0\5\u0237\1\u0165\2\u023a\13\u0237\1\u0165"+
    "\2\u022e\1\u0165\1\u022e\4\u0165\1\u022e\4\u0165\1\u022e\2\u0165"+
    "\1\u022e\7\u0165\1\u022e\25\u0165\1\u0166\4\u022e\1\u0165\3\0"+
    "\2\u0165\2\u022e\2\u0165\2\0\46\u0165\1\u017b\2\u0165\2\u0166"+
    "\1\u0165\1\u0166\1\u0183\1\u023b\1\u023c\1\u0183\1\u0166\1\u023d"+
    "\1\u023e\2\u0166\1\u023f\1\u0240\3\u0166\4\u0165\1\u017b\3\0"+
    "\6\u0165\2\0\53\u0165\1\u017c\16\u0165\1\u0166\5\u0165\3\0"+
    "\6\u0165\2\0\61\u0165\1\u0241\10\u0165\1\u0166\5\u0165\3\0"+
    "\6\u0165\2\0\14\u0165\7\u017e\1\u0165\3\u017e\1\u0165\15\u017e"+
    "\1\u0165\1\u0167\17\u0165\1\u0228\3\u0165\1\u0166\4\u017e\1\u0167"+
    "\1\332\2\0\5\u017e\1\u0165\2\0\2\u0165\4\u017e\1\u0169"+
    "\3\u017e\2\u0165\7\u0225\1\u0165\3\u0225\1\u0165\1\u0225\1\u0175"+
    "\13\u0225\1\u0165\1\u017f\2\u0165\2\u0166\1\u0165\1\u0225\1\u0183"+
    "\1\u023b\1\u023c\1\u0183\1\u0166\1\u023d\1\u023e\2\u0166\1\u023f"+
    "\1\u0240\1\u0166\1\u022d\1\u0166\1\u0175\1\u0178\2\u0175\1\u017f"+
    "\3\0\5\u0225\1\u0179\2\0\1\u017a\1\u0165\4\u0225\1\u0165"+
    "\3\u0225\43\u0165\1\u0166\14\u0165\1\u0166\5\u0165\3\0\6\u0165"+
    "\2\0\55\u0165\2\u0166\13\u0165\1\u0166\5\u0165\3\0\6\u0165"+
    "\2\0\55\u0165\1\u0166\1\u0165\1\u0166\12\u0165\1\u0166\5\u0165"+
    "\3\0\6\u0165\2\0\31\u0165\1\u0227\27\u0165\1\u0241\4\u0165"+
    "\1\u0166\3\u0165\1\u0166\4\u0227\1\u0165\3\0\6\u0165\2\0"+
    "\12\u0165\1\u0227\54\u0165\1\u0166\2\u0165\1\u0166\5\u0165\3\0"+
    "\6\u0165\2\0\46\u0165\1\u017b\5\u0165\1\u0166\1\u0183\1\u0181"+
    "\1\u0182\1\u0183\1\u0166\2\u0165\2\u0166\1\u0188\1\u0185\3\u0166"+
    "\4\u0165\1\u017b\3\0\6\u0165\2\0\61\u0165\1\u0241\4\u0165"+
    "\1\u0166\3\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\66\u0165"+
    "\1\u0166\3\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\13\u0165"+
    "\33\u0242\1\u017b\13\u0242\1\u0243\7\u0242\1\u0244\4\u0242\1\u017b"+
    "\3\0\6\u0242\2\0\46\u0242\1\u017b\14\u0242\1\u0245\6\u0242"+
    "\1\u0244\4\u0242\1\u017b\3\0\6\u0242\2\0\13\u0242\33\u0165"+
    "\1\u018b\1\u0165\3\u0166\1\u0165\1\u0166\1\u0183\1\u023b\1\u023c"+
    "\1\u0183\1\u0166\1\u023d\1\u023e\2\u0166\1\u023f\1\u0240\3\u0166"+
    "\4\u0165\1\u018b\3\0\6\u0165\2\0\14\u0165\7\u018c\1\u0165"+
    "\3\u018c\1\u0165\15\u018c\25\u0165\1\u0166\4\u018c\1\u0165\3\0"+
    "\5\u018c\1\u0165\2\0\2\u0165\4\u018c\1\u0165\3\u018c\60\u0165"+
    "\1\u0166\1\u0165\1\u0246\1\u0165\1\u0246\1\u0165\3\0\6\u0165"+
    "\2\0\14\u0165\2\u0247\1\u016b\1\u0247\3\u016b\1\u0165\1\u0247"+
    "\2\u016b\1\u0165\1\u016b\1\u0247\2\u016b\1\u0247\7\u016b\1\u0247"+
    "\21\u0165\1\u016f\3\u0165\1\u0166\4\u0247\1\u0165\1\272\2\0"+
    "\2\u016b\2\u0247\1\u016b\1\u0165\2\0\2\u0165\4\u016b\1\u0165"+
    "\3\u016b\2\u0165\6\u016b\1\u016c\1\u0165\3\u016b\1\u0165\1\u016b"+
    "\1\u018f\6\u016b\1\u016d\4\u016b\1\u0165\1\u016e\1\u0166\1\u0165"+
    "\1\u0166\6\u0165\2\u0166\4\u0165\1\u016f\1\u0165\3\u0166\1\u016b"+
    "\3\u018f\1\u016e\1\272\2\0\5\u016b\1\u0165\2\0\1\u0166"+
    "\1\u0165\4\u016b\1\u0165\3\u016b\1\u0165\57\u0248\1\u0249\5\u0248"+
    "\1\u01da\2\0\5\u0248\1\u024a\2\u01d9\13\u0248\65\u01dc\1\u0194"+
    "\2\0\5\u0194\1\u024b\1\u0194\14\u01dc\65\u01d9\1\u01da\2\0"+
    "\5\u01d9\1\u024c\15\u01d9\1\u0165\2\u0195\1\u0165\1\u0195\2\u0165"+
    "\1\u024d\1\u0165\1\u0195\4\u0165\1\u0195\2\u0165\1\u0195\3\u0165"+
    "\1\u024e\3\u0165\1\u0195\1\u0165\1\u016e\1\u0166\1\u0165\1\u0166"+
    "\6\u0165\2\u0166\6\u0165\3\u0166\4\u0195\1\u016e\3\0\2\u0165"+
    "\2\u0195\2\u0165\2\0\1\u0166\12\u0165\1\0\4\36\1\246"+
    "\2\36\1\0\1\247\2\36\1\0\4\36\1\u024f\10\36"+
    "\1\0\1\250\6\0\1\251\10\0\1\252\4\0\4\36"+
    "\1\250\1\253\2\0\5\36\4\0\1\254\4\36\1\255"+
    "\3\36\2\0\4\36\1\246\1\u0250\1\36\1\0\1\247"+
    "\2\36\1\0\15\36\1\0\1\250\6\0\1\251\10\0"+
    "\1\252\4\0\4\36\1\250\1\253\2\0\5\36\4\0"+
    "\1\254\4\36\1\255\3\36\2\0\1\u0251\140\0\1\u0252"+
    "\164\0\1\u0253\12\0\7\255\1\0\3\255\1\0\15\255"+
    "\1\0\1\u019c\6\0\1\u019d\10\0\1\252\4\0\4\255"+
    "\1\u019c\1\253\2\0\5\255\4\0\1\u0253\10\255\34\0"+
    "\1\u019c\6\0\1\u019d\21\0\1\u019c\61\0\1\u019f\6\0"+
    "\1\251\21\0\1\u019f\27\0\7\u01a0\1\0\3\u01a0\1\0"+
    "\15\u01a0\1\0\1\u019c\6\0\1\u019d\15\0\4\u01a0\1\u019c"+
    "\1\u01a0\2\0\5\u01a0\5\0\10\u01a0\2\0\7\356\1\0"+
    "\3\356\1\0\15\356\26\0\4\356\4\0\5\356\4\0"+
    "\1\u0254\4\356\1\0\3\356\102\0\1\u0254\12\0\7\u0255"+
    "\1\0\3\u0255\1\0\15\u0255\21\0\1\u014c\4\0\4\u0255"+
    "\1\0\1\332\2\0\5\u0255\4\0\1\u0254\4\u0255\1\263"+
    "\3\u0255\2\0\7\263\1\0\3\263\1\0\15\263\21\0"+
    "\1\u014c\4\0\4\263\1\0\1\332\2\0\5\263\4\0"+
    "\1\u0254\10\263\2\0\7\u0256\1\0\3\u0256\1\0\1\u0256"+
    "\1\277\13\u0256\1\0\1\u0257\5\0\1\u0256\14\0\1\300"+
    "\1\0\1\277\1\301\2\277\1\u0257\3\0\5\u0256\1\302"+
    "\2\0\1\303\1\0\4\u0256\1\0\3\u0256\2\0\7\u01a8"+
    "\1\0\3\u01a8\1\0\15\u01a8\26\0\4\u01a8\4\0\5\u01a8"+
    "\5\0\4\u01a8\1\0\3\u01a8\2\0\7\u01a8\1\0\3\u01a8"+
    "\1\271\15\u01a8\26\0\4\u01a8\4\0\5\u01a8\5\0\4\u01a8"+
    "\1\0\3\u01a8\2\0\7\u0256\1\0\3\u0256\1\0\1\u0256"+
    "\1\0\13\u0256\1\0\1\u0258\5\0\1\u0256\22\0\1\u0258"+
    "\3\0\5\u0256\5\0\4\u0256\1\0\3\u0256\1\0\34\u01ae"+
    "\1\u0259\1\u025a\30\u01ae\2\0\7\u01ae\1\0\13\u01ae\35\u01af"+
    "\1\u01ad\30\u01af\2\0\7\u01af\1\0\13\u01af\33\274\1\u01b0"+
    "\1\275\1\271\13\274\2\u025b\11\274\1\u01b0\1\274\2\0"+
    "\7\274\1\0\13\274\61\0\1\u025c\1\0\1\u025c\45\0"+
    "\1\u01b2\42\0\3\u01b2\124\0\1\271\102\0\1\u01b3\2\0"+
    "\7\u01b3\56\0\1\271\112\0\2\271\111\0\1\271\1\0"+
    "\1\271\115\0\1\271\113\0\1\271\115\0\1\271\113\0"+
    "\1\271\36\0\1\305\2\306\1\305\2\306\1\305\1\310"+
    "\1\305\3\306\1\305\2\306\1\305\1\306\1\305\2\306"+
    "\1\305\1\311\4\306\1\305\1\u025d\3\306\1\305\7\306"+
    "\1\u025d\1\305\10\306\1\315\2\306\1\u025d\3\0\5\306"+
    "\1\316\2\0\1\317\3\305\2\306\1\305\1\306\4\305"+
    "\2\306\1\305\2\306\1\305\1\310\1\305\3\306\1\305"+
    "\2\306\1\305\1\306\1\305\2\306\1\305\1\311\4\306"+
    "\1\305\1\u025d\3\306\1\305\7\306\1\305\1\u025d\10\306"+
    "\1\315\2\306\1\u025d\3\0\5\306\1\316\2\0\1\317"+
    "\3\305\2\306\1\305\1\306\4\305\2\306\1\307\2\306"+
    "\1\307\1\310\1\305\3\306\1\305\2\306\1\307\1\306"+
    "\1\305\2\306\1\305\1\311\4\306\1\305\1\u01c0\3\306"+
    "\1\305\7\306\1\u01be\1\u01bf\10\306\1\315\2\306\1\u01c0"+
    "\3\0\5\306\1\316\2\0\1\317\2\305\1\307\2\306"+
    "\1\305\1\306\1\320\11\305\1\u01bc\6\305\1\306\6\305"+
    "\1\u01bd\6\305\3\306\1\305\7\306\2\305\10\306\1\315"+
    "\2\306\1\305\3\0\5\305\1\u025e\2\0\1\317\21\305"+
    "\1\u01bc\6\305\1\306\3\305\1\306\2\305\1\u01bd\6\305"+
    "\3\306\1\305\7\306\2\305\10\306\1\315\2\306\1\305"+
    "\3\0\5\305\1\u025e\2\0\1\317\21\305\1\u01bc\4\305"+
    "\1\306\1\305\1\306\6\305\1\u01bd\6\305\3\306\1\305"+
    "\7\306\2\305\10\306\1\315\2\306\1\305\3\0\5\305"+
    "\1\u025e\2\0\1\317\3\305\1\306\11\305\1\317\3\305"+
    "\1\u01bc\6\305\1\306\6\305\1\u01bd\6\305\3\306\1\305"+
    "\7\306\2\305\10\306\1\315\2\306\1\305\3\0\5\305"+
    "\1\u025e\2\0\1\317\13\305\2\u01c7\1\305\1\u01c7\2\305"+
    "\1\u01bc\1\305\1\u01c7\4\305\1\u01c7\2\305\1\u01c7\3\305"+
    "\1\u01bd\3\305\1\u01c7\2\305\3\306\1\305\7\306\2\305"+
    "\7\306\1\u01c7\1\u01c8\2\u01c7\1\305\3\0\2\305\2\u01c7"+
    "\1\305\1\u025e\2\0\1\317\13\305\2\u01c7\1\317\1\u01c7"+
    "\2\305\1\u01bc\1\305\1\u01c7\4\305\1\u01c7\2\305\1\u01c7"+
    "\3\305\1\u01bd\3\305\1\u01c7\2\305\3\306\1\305\7\306"+
    "\2\305\7\306\1\u01c7\1\u01c8\2\u01c7\1\305\3\0\2\305"+
    "\2\u01c7\1\305\1\316\2\0\1\317\12\305\1\0\7\u01c9"+
    "\1\0\3\u01c9\1\0\15\u01c9\1\0\1\u025f\24\0\4\u01c9"+
    "\1\u025f\3\0\5\u01c9\5\0\4\u01c9\1\0\3\u01c9\34\0"+
    "\1\u01ca\1\0\1\271\13\0\2\271\11\0\1\u01ca\70\0"+
    "\1\323\1\0\1\355\110\0\1\323\1\355\102\0\1\u01cf"+
    "\13\0\2\271\13\0\1\u01cf\61\0\1\u01cf\13\0\2\271"+
    "\13\0\1\u01cf\24\0\1\u01cf\50\0\1\u01b8\1\u01b9\111\0"+
    "\1\u0260\1\u01b9\111\0\1\u01b8\1\u01ce\111\0\1\u01b8\1\u0261"+
    "\111\0\1\u01b8\1\u01b9\40\0\1\u01ce\34\0\1\u01cf\13\0"+
    "\1\271\1\u01b9\13\0\1\u01cf\107\0\1\u0262\1\0\1\u0262"+
    "\30\0\2\u01d8\1\265\1\u01d8\2\265\1\266\1\0\1\u01d8"+
    "\2\265\1\0\1\265\1\u01d8\2\265\1\u01d8\3\265\1\267"+
    "\3\265\1\u01d8\1\0\1\270\1\271\1\0\1\271\6\0"+
    "\2\271\4\0\1\272\1\0\3\271\4\u01d8\1\270\1\272"+
    "\2\0\2\265\2\u01d8\1\265\3\0\1\271\1\0\4\265"+
    "\1\0\3\265\1\0\65\u01d9\1\u01da\2\0\5\u01d9\1\366"+
    "\15\u01d9\65\u01dc\1\u01d9\2\0\5\u01d9\1\u0263\1\u01d9\14\u01dc"+
    "\7\0\1\u01e0\15\0\1\u01e1\5\0\1\270\1\271\1\0"+
    "\1\271\6\0\2\271\6\0\3\271\4\0\1\270\13\0"+
    "\1\271\12\0\65\u01dc\1\u0264\2\0\5\u01dc\1\u0265\15\u01dc"+
    "\65\u0263\1\u0266\2\0\5\u0263\1\u01db\15\u0263\66\u01de\2\0"+
    "\6\u01de\1\u0267\14\u01de\65\u01df\1\u0268\2\0\6\u01df\1\366"+
    "\14\u01df\22\0\1\271\104\0\1\271\67\0\1\271\7\0"+
    "\2\u01ec\1\114\1\u01ec\3\114\1\0\3\114\1\0\15\114"+
    "\26\0\4\114\4\0\2\114\1\u01ec\2\114\5\0\4\114"+
    "\1\0\3\114\2\0\2\u01ec\5\114\1\0\3\114\1\0"+
    "\15\114\26\0\4\114\4\0\2\114\1\u01ec\2\114\5\0"+
    "\4\114\1\0\3\114\24\0\1\u0269\70\0\7\114\1\0"+
    "\3\114\1\0\6\114\1\u026a\6\114\26\0\4\114\4\0"+
    "\5\114\5\0\4\114\1\0\3\114\2\0\2\u01f5\67\0"+
    "\1\u01f5\21\0\2\u01ec\5\114\1\0\3\114\1\0\4\114"+
    "\1\u020a\10\114\26\0\4\114\4\0\2\114\1\u01ec\2\114"+
    "\5\0\4\114\1\0\3\114\2\0\2\u01e2\5\114\1\0"+
    "\3\114\1\0\15\114\26\0\4\114\4\0\2\114\1\u01e2"+
    "\2\114\5\0\4\114\1\0\3\114\2\0\7\114\1\0"+
    "\3\114\1\0\15\114\1\u010f\25\0\4\114\4\0\5\114"+
    "\5\0\3\114\1\u010e\1\0\3\114\2\0\2\u01eb\67\0"+
    "\1\u01eb\21\0\1\u010e\6\114\1\0\3\114\1\0\15\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\3\114"+
    "\12\0\1\u026b\102\0\7\114\1\0\1\u026c\2\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\2\114\1\u01ec\2\114\1\u01ec\1\114\1\u01eb"+
    "\3\114\1\0\2\114\1\u01ec\12\114\26\0\4\114\4\0"+
    "\5\114\5\0\1\114\1\u01ec\2\114\1\0\1\114\1\u01ec"+
    "\1\114\14\0\1\u010f\60\0\1\u010f\17\0\1\u026d\6\114"+
    "\1\0\3\114\1\0\15\114\26\0\4\114\4\0\5\114"+
    "\5\0\4\114\1\0\3\114\2\0\2\u01eb\1\0\1\u01eb"+
    "\65\0\1\u01eb\26\0\1\u026b\122\0\1\u01f5\115\0\1\u01f5"+
    "\104\0\1\u026e\60\0\1\u026e\17\0\7\114\1\0\2\114"+
    "\1\u026f\1\0\15\114\26\0\4\114\4\0\4\114\1\u026f"+
    "\5\0\4\114\1\0\3\114\12\0\1\u0270\102\0\7\114"+
    "\1\0\1\u0271\2\114\1\0\15\114\26\0\4\114\4\0"+
    "\5\114\5\0\4\114\1\0\3\114\2\0\7\114\1\0"+
    "\3\114\1\0\5\114\1\u0272\7\114\26\0\4\114\4\0"+
    "\5\114\5\0\4\114\1\0\3\114\2\0\4\114\1\u010e"+
    "\2\114\1\0\3\114\1\u0273\15\114\1\0\1\u0274\24\0"+
    "\4\114\4\0\5\114\5\0\2\114\1\u0275\1\114\1\0"+
    "\3\114\10\0\1\u0276\104\0\6\114\1\u0209\1\0\3\114"+
    "\1\0\15\114\26\0\4\114\4\0\5\114\5\0\4\114"+
    "\1\0\3\114\2\0\2\u01f5\4\0\1\u0277\62\0\1\u01f5"+
    "\31\0\1\u0278\130\0\1\u0279\67\0\1\u0203\4\0\1\u0204"+
    "\102\0\7\114\1\0\3\114\1\u0117\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\2\114\1\u0119\1\114\1\0\3\114"+
    "\2\0\7\114\1\0\3\114\1\0\7\114\1\u0136\5\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\2\114"+
    "\1\u0136\2\0\7\114\1\0\3\114\1\0\7\114\1\u010e"+
    "\5\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\2\114\1\u010e\2\0\7\114\1\0\1\u010e\2\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\7\114\1\0\3\114\1\0\4\114\1\u01ec"+
    "\10\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\2\0\2\u01e2\3\114\1\u027a\1\114\1\u027b\3\114"+
    "\1\0\15\114\26\0\4\114\4\0\2\114\1\u01e2\2\114"+
    "\5\0\1\114\1\u027a\2\114\1\0\1\114\1\u027a\1\114"+
    "\2\0\4\114\1\u027c\2\114\1\0\3\114\1\0\15\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\3\114"+
    "\2\0\2\u01f5\3\0\1\u027b\1\0\1\u027b\61\0\1\u01f5"+
    "\10\0\1\u027b\4\0\1\u027b\3\0\7\114\1\u027d\3\114"+
    "\1\0\15\114\26\0\4\114\4\0\5\114\5\0\1\114"+
    "\1\u027e\2\114\1\0\1\114\1\u027e\1\114\2\0\5\114"+
    "\1\u026c\1\114\1\0\3\114\1\0\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\7\114"+
    "\1\0\3\114\1\0\1\114\1\u01e2\13\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\7\114"+
    "\1\0\3\114\1\0\4\114\1\u01e2\10\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\2\u01e2"+
    "\4\114\1\u027f\1\0\3\114\1\0\15\114\26\0\4\114"+
    "\4\0\2\114\1\u01e2\2\114\5\0\4\114\1\0\3\114"+
    "\2\0\7\114\1\0\1\u0280\2\114\1\0\15\114\26\0"+
    "\4\114\4\0\5\114\5\0\4\114\1\0\3\114\2\0"+
    "\7\114\1\0\3\114\1\0\12\114\1\u0281\2\114\26\0"+
    "\4\114\4\0\5\114\5\0\4\114\1\0\3\114\2\0"+
    "\3\114\1\u0213\3\114\1\0\1\u0214\2\114\1\0\15\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\3\114"+
    "\62\0\1\u0282\1\0\1\u0282\27\0\65\u0263\1\u0266\2\0"+
    "\5\u0263\1\u0218\15\u0263\1\0\7\140\1\0\1\u0283\2\140"+
    "\1\0\15\140\21\0\1\261\4\0\4\140\1\0\1\262"+
    "\2\0\5\140\5\0\4\140\1\263\3\140\2\0\7\140"+
    "\1\u0284\3\140\1\0\15\140\21\0\1\261\4\0\4\140"+
    "\1\0\1\262\2\0\5\140\5\0\1\140\1\u021a\2\140"+
    "\1\263\1\140\1\u021a\1\140\102\0\1\u0159\12\0\7\u0157"+
    "\1\0\3\u0157\1\0\15\u0157\21\0\1\u0155\4\0\4\u0157"+
    "\1\0\1\u0156\2\0\5\u0157\4\0\1\u0159\10\u0157\62\0"+
    "\1\u0285\1\0\1\u0285\53\0\1\u0220\64\0\1\u0220\22\0"+
    "\1\u0220\71\0\1\u0165\7\u0225\1\u0165\3\u0225\1\u0165\15\u0225"+
    "\25\u0165\1\u0166\4\u0225\1\u0165\3\0\5\u0225\1\u0165\2\0"+
    "\2\u0165\4\u0225\1\u0165\3\u0225\2\u0165\7\u018c\1\u0165\3\u018c"+
    "\1\u0165\15\u018c\25\u0165\1\u0166\4\u018c\1\u0165\3\0\5\u018c"+
    "\1\u0165\2\0\1\u0165\1\u0286\4\u018c\1\u0165\3\u018c\60\u0165"+
    "\1\u0166\5\u0165\3\0\6\u0165\2\0\1\u0165\1\u0286\27\u0165"+
    "\1\u0227\40\u0165\1\u0166\4\u0227\1\u0165\3\0\6\u0165\2\0"+
    "\12\u0165\1\u0227\1\u0165\7\u0225\1\u0165\3\u0225\1\u0166\15\u0225"+
    "\25\u0165\1\u0166\4\u0225\1\u0165\3\0\5\u0225\1\u0165\2\0"+
    "\2\u0165\4\u0225\1\u0165\3\u0225\2\u0165\7\u0287\1\u0165\3\u0287"+
    "\1\u0165\1\u0287\1\u0165\13\u0287\1\u0165\1\u0288\5\u0165\1\u0287"+
    "\15\u0165\1\u0166\4\u0165\1\u0288\3\0\5\u0287\1\u0165\2\0"+
    "\2\u0165\4\u0287\1\u0165\3\u0287\1\u0165\34\u0231\1\u0289\1\u028a"+
    "\21\u0231\1\u028b\5\u0231\1\u01ae\2\0\6\u0231\1\u01ae\1\0"+
    "\13\u0231\35\u0232\1\u0230\21\u0232\1\u028c\5\u0232\1\u01af\2\0"+
    "\6\u0232\1\u01af\1\0\13\u0232\33\u0171\1\u0234\1\u0172\1\u0166"+
    "\13\u0171\2\u0174\4\u0171\1\u0174\4\u0171\1\u0234\1\274\2\0"+
    "\6\u0171\1\274\1\0\13\u0171\57\u0165\1\u0166\1\u0165\1\u028d"+
    "\1\u0165\1\u028d\1\u0165\3\0\6\u0165\2\0\31\u0165\1\u0236"+
    "\40\u0165\1\u0166\1\u0165\3\u0236\1\u0165\3\0\6\u0165\2\0"+
    "\72\u0165\1\u0166\5\u0165\3\0\5\u0165\1\u0166\2\0\13\u0165"+
    "\65\0\1\u023a\2\0\7\u023a\111\0\1\u028e\15\0\47\u0165"+
    "\1\u0166\7\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\63\u0165"+
    "\1\u0166\6\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\46\u0165"+
    "\1\u0241\1\u0165\1\u0166\13\u0165\2\u0166\4\u0165\1\u0166\4\u0165"+
    "\1\u0241\3\0\6\u0165\2\0\62\u0165\1\u028f\1\u0290\6\u0165"+
    "\1\u0166\5\u0165\3\0\6\u0165\2\0\62\u0165\1\u0291\1\u0290"+
    "\6\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\62\u0165\1\u028f"+
    "\1\u0292\6\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\72\u0165"+
    "\1\u0166\1\u0165\1\u0293\1\u0165\1\u0293\1\u0165\3\0\6\u0165"+
    "\2\0\14\u0165\2\u0247\1\u016b\1\u0247\2\u016b\1\u016c\1\u0165"+
    "\1\u0247\2\u016b\1\u0165\1\u016b\1\u0247\2\u016b\1\u0247\3\u016b"+
    "\1\u016d\3\u016b\1\u0247\1\u0165\1\u016e\1\u0166\1\u0165\1\u0166"+
    "\6\u0165\2\u0166\4\u0165\1\u016f\1\u0165\3\u0166\4\u0247\1\u016e"+
    "\1\272\2\0\2\u016b\2\u0247\1\u016b\1\u0165\2\0\1\u0166"+
    "\1\u0165\4\u016b\1\u0165\3\u016b\1\u0165\57\u0248\1\u0249\5\u0248"+
    "\1\u01da\2\0\5\u0248\1\u0193\2\u01d9\13\u0248\7\u0165\1\u024d"+
    "\15\u0165\1\u024e\5\u0165\1\u016e\1\u0166\1\u0165\1\u0166\6\u0165"+
    "\2\u0166\6\u0165\3\u0166\4\u0165\1\u016e\3\0\6\u0165\2\0"+
    "\1\u0166\12\u0165\65\u0263\1\u0266\2\0\5\u0263\1\u024c\15\u0263"+
    "\7\0\1\u0294\15\0\1\u0295\5\0\1\u0296\1\u028e\1\0"+
    "\1\u028e\6\0\2\u028e\6\0\3\u028e\4\0\1\u0296\13\0"+
    "\1\u028e\12\0\22\u0165\1\u0166\34\u0165\1\u0166\5\u0165\3\0"+
    "\6\u0165\2\0\27\u0165\1\u0166\42\u0165\1\u0166\5\u0165\3\0"+
    "\6\u0165\2\0\4\u0165\1\u0166\6\u0165\1\0\4\36\1\246"+
    "\2\36\1\0\1\247\1\u0297\1\36\1\0\15\36\1\0"+
    "\1\250\6\0\1\251\10\0\1\252\4\0\4\36\1\250"+
    "\1\253\2\0\1\u0297\4\36\4\0\1\254\4\36\1\255"+
    "\3\36\22\0\1\u0298\77\0\1\u0299\105\0\7\u0255\1\0"+
    "\3\u0255\1\0\15\u0255\21\0\1\u014c\4\0\4\u0255\1\0"+
    "\1\332\2\0\5\u0255\5\0\4\u0255\1\263\3\u0255\2\0"+
    "\7\u0256\1\0\3\u0256\1\0\15\u0256\26\0\4\u0256\4\0"+
    "\5\u0256\5\0\4\u0256\1\0\3\u0256\1\0\34\u0259\1\u029a"+
    "\1\u029b\30\u0259\2\0\7\u0259\1\0\13\u0259\35\u025a\1\u01af"+
    "\30\u025a\2\0\7\u025a\1\0\13\u025a\61\0\1\u029c\1\0"+
    "\1\u029c\27\0\1\305\2\306\1\305\2\306\1\305\1\310"+
    "\1\305\3\306\1\305\2\306\1\305\1\306\1\305\2\306"+
    "\1\305\1\311\4\306\1\305\1\u025d\3\306\1\305\7\306"+
    "\2\305\10\306\1\315\2\306\1\u025d\3\0\5\306\1\316"+
    "\2\0\1\317\3\305\2\306\1\305\1\306\3\305\1\0"+
    "\7\u01a8\1\0\3\u01a8\1\0\1\u01a8\1\0\13\u01a8\1\0"+
    "\1\u025f\5\0\1\u01a8\22\0\1\u025f\3\0\5\u01a8\5\0"+
    "\4\u01a8\1\0\3\u01a8\50\0\1\u0260\113\0\1\u0261\123\0"+
    "\1\u029d\1\0\1\u029d\27\0\65\u0263\1\u0266\2\0\5\u0263"+
    "\1\366\15\u0263\66\u01dc\2\0\5\u01dc\1\u029e\15\u01dc\65\u029f"+
    "\1\u0263\2\0\7\u0263\14\u029f\65\0\1\u01df\2\0\7\u01df"+
    "\34\0\1\u010f\50\0\1\u010f\22\0\7\114\1\0\3\114"+
    "\1\0\3\114\1\u010e\11\114\26\0\4\114\4\0\1\114"+
    "\1\u010e\3\114\5\0\4\114\1\0\3\114\22\0\1\u01f2"+
    "\72\0\7\114\1\0\3\114\1\0\4\114\1\u0136\10\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\3\114"+
    "\2\0\6\114\1\u010e\1\0\3\114\1\0\15\114\26\0"+
    "\4\114\4\0\5\114\5\0\4\114\1\0\3\114\6\0"+
    "\1\u010f\106\0\4\114\1\u010e\2\114\1\0\3\114\1\0"+
    "\15\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\15\0\1\u0278\67\0\1\u0278\7\0\7\114\1\0"+
    "\3\114\1\u0278\15\114\26\0\4\114\4\0\5\114\5\0"+
    "\2\114\1\u0280\1\114\1\0\3\114\2\0\7\114\1\0"+
    "\1\114\1\u010e\1\114\1\0\15\114\26\0\4\114\4\0"+
    "\1\u010e\4\114\5\0\4\114\1\0\3\114\32\0\1\u010f"+
    "\41\0\1\u010f\27\0\1\u02a0\72\0\1\u02a0\4\0\1\u02a0"+
    "\3\0\7\114\1\0\3\114\1\0\14\114\1\u010e\26\0"+
    "\4\114\4\0\3\114\1\u010e\1\114\5\0\4\114\1\0"+
    "\3\114\12\0\1\u010f\107\0\1\u02a1\135\0\1\u0279\41\0"+
    "\1\u0279\20\0\7\114\1\0\3\114\1\0\7\114\1\u02a2"+
    "\5\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\2\114\1\u02a2\15\0\1\u02a3\67\0\1\u02a3\7\0\7\114"+
    "\1\0\3\114\1\u02a3\15\114\26\0\4\114\4\0\5\114"+
    "\5\0\2\114\1\u02a4\1\114\1\0\3\114\2\0\5\114"+
    "\1\u02a5\1\114\1\0\3\114\1\0\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\2\0\7\114"+
    "\1\0\3\114\1\0\14\114\1\u0281\26\0\4\114\4\0"+
    "\3\114\1\u0281\1\114\5\0\4\114\1\0\3\114\62\0"+
    "\1\u02a6\1\0\1\u02a6\40\0\1\u02a7\162\0\1\u02a8\1\0"+
    "\1\u02a8\27\0\1\u0165\7\u0287\1\u0165\3\u0287\1\u0165\15\u0287"+
    "\25\u0165\1\u0166\4\u0287\1\u0165\3\0\5\u0287\1\u0165\2\0"+
    "\2\u0165\4\u0287\1\u0165\3\u0287\1\u0165\34\u0289\1\u02a9\1\u02aa"+
    "\21\u0289\1\u02ab\5\u0289\1\u0259\2\0\6\u0289\1\u0259\1\0"+
    "\13\u0289\35\u028a\1\u0232\21\u028a\1\u02ac\5\u028a\1\u025a\2\0"+
    "\6\u028a\1\u025a\1\0\13\u028a\57\u0165\1\u0166\1\u0165\1\u02ad"+
    "\1\u0165\1\u02ad\1\u0165\3\0\6\u0165\2\0\62\u0165\1\u0291"+
    "\7\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\63\u0165\1\u0292"+
    "\6\u0165\1\u0166\5\u0165\3\0\6\u0165\2\0\72\u0165\1\u0166"+
    "\1\u0165\1\u02ae\1\u0165\1\u02ae\1\u0165\3\0\6\u0165\2\0"+
    "\13\u0165\22\0\1\u028e\104\0\1\u028e\67\0\1\u028e\7\0"+
    "\7\u02af\1\0\3\u02af\1\0\1\u02af\1\u02b0\6\u02af\1\u02b1"+
    "\4\u02af\1\0\1\u0296\1\u028e\1\0\1\u028e\2\0\1\u02af"+
    "\3\0\2\u028e\6\0\1\u028e\1\u02b2\1\u028e\1\u02b0\1\u02b3"+
    "\2\u02b0\1\u0296\3\0\5\u02af\1\u02b4\2\0\1\u02b5\1\0"+
    "\4\u02af\1\0\3\u02af\2\0\4\36\1\246\2\36\1\0"+
    "\1\247\2\36\1\0\5\36\1\u02b6\7\36\1\0\1\250"+
    "\6\0\1\251\10\0\1\252\4\0\4\36\1\250\1\253"+
    "\2\0\5\36\4\0\1\254\4\36\1\255\3\36\13\0"+
    "\1\u02b7\55\0\1\u02b7\22\0\35\u029a\1\u02b8\30\u029a\2\0"+
    "\7\u029a\1\0\13\u029a\35\u029b\1\u025a\30\u029b\2\0\7\u029b"+
    "\1\0\13\u029b\61\0\1\u02b9\1\0\1\u02b9\110\0\1\u02ba"+
    "\1\0\1\u02ba\27\0\65\u029f\1\u02bb\2\0\5\u029f\1\u0265"+
    "\15\u029f\13\0\1\u02bc\60\0\1\u02bc\22\0\1\u0276\107\0"+
    "\7\114\1\0\1\u02bd\2\114\1\0\15\114\26\0\4\114"+
    "\4\0\5\114\5\0\4\114\1\0\3\114\23\0\1\u0269"+
    "\71\0\7\114\1\0\3\114\1\0\5\114\1\u026a\7\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\3\114"+
    "\2\0\3\114\1\u0209\3\114\1\0\3\114\1\0\15\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\3\114"+
    "\62\0\1\u02be\1\0\1\u02be\110\0\1\u02bf\1\0\1\u02bf"+
    "\27\0\35\u02a9\1\u02c0\21\u02a9\1\u02c1\5\u02a9\1\u029a\2\0"+
    "\6\u02a9\1\u029a\1\0\13\u02a9\35\u02aa\1\u028a\21\u02aa\1\u02c2"+
    "\5\u02aa\1\u029b\2\0\6\u02aa\1\u029b\1\0\13\u02aa\57\u0165"+
    "\1\u0166\1\u0165\1\u02c3\1\u0165\1\u02c3\1\u0165\3\0\6\u0165"+
    "\2\0\72\u0165\1\u0166\1\u0165\1\u02c4\1\u0165\1\u02c4\1\u0165"+
    "\3\0\6\u0165\2\0\13\u0165\1\0\7\u02af\1\0\3\u02af"+
    "\1\0\15\u02af\26\0\4\u02af\4\0\5\u02af\5\0\4\u02af"+
    "\1\0\3\u02af\17\0\1\u02b0\41\0\4\u02b0\30\0\7\u02af"+
    "\1\0\3\u02af\1\u028e\15\u02af\26\0\4\u02af\4\0\5\u02af"+
    "\5\0\4\u02af\1\0\3\u02af\62\0\1\u02c5\1\0\1\u02c5"+
    "\32\0\1\u02c6\12\0\1\u02c7\42\0\3\u02c7\27\0\65\u023a"+
    "\1\u0239\2\0\5\u023a\1\0\15\u023a\1\0\2\u02b5\1\0"+
    "\1\u02b5\4\0\1\u02b5\4\0\1\u02b5\2\0\1\u02b5\7\0"+
    "\1\u02b5\26\0\4\u02b5\6\0\2\u02b5\41\0\1\u02c8\70\0"+
    "\35\u02b8\1\u029b\30\u02b8\2\0\7\u02b8\1\0\13\u02b8\61\0"+
    "\1\u02c9\1\0\1\u02c9\110\0\1\u02ca\1\0\1\u02ca\27\0"+
    "\66\u029f\2\0\23\u029f\12\0\1\u01f6\55\0\1\u01f6\23\0"+
    "\7\114\1\0\1\114\1\u02cb\1\114\1\0\15\114\26\0"+
    "\4\114\4\0\1\u02cb\4\114\5\0\4\114\1\0\3\114"+
    "\62\0\1\u02cc\1\0\1\u02cc\110\0\1\u02cd\1\0\1\u02cd"+
    "\27\0\35\u02c0\1\u02aa\21\u02c0\1\u02ce\5\u02c0\1\u02b8\2\0"+
    "\6\u02c0\1\u02b8\1\0\13\u02c0\57\u0165\1\u0166\1\u0165\1\u02cf"+
    "\1\u0165\1\u02cf\1\u0165\3\0\6\u0165\2\0\72\u0165\1\u0166"+
    "\1\u0165\1\u02d0\1\u0165\1\u02d0\1\u0165\3\0\6\u0165\2\0"+
    "\13\u0165\61\0\1\u02d1\1\0\1\u02d1\45\0\1\u02c7\42\0"+
    "\3\u02c7\110\0\1\u02d2\1\0\1\u02d2\110\0\1\u02d3\1\0"+
    "\1\u02d3\30\0\7\114\1\0\3\114\1\0\12\114\1\u02d4"+
    "\2\114\26\0\4\114\4\0\5\114\5\0\4\114\1\0"+
    "\3\114\62\0\1\u02d5\1\0\1\u02d5\110\0\1\u02d6\1\0"+
    "\1\u02d6\27\0\57\u0165\1\u0166\1\u0165\1\u02d7\1\u0165\1\u02d7"+
    "\1\u0165\3\0\6\u0165\2\0\72\u0165\1\u0166\1\u0165\1\u02d8"+
    "\1\u0165\1\u02d8\1\u0165\3\0\6\u0165\2\0\13\u0165\61\0"+
    "\1\u02d9\1\0\1\u02d9\110\0\1\u02da\1\0\1\u02da\110\0"+
    "\1\u01db\1\0\1\u01db\30\0\5\114\1\u02db\1\114\1\0"+
    "\3\114\1\0\15\114\26\0\4\114\4\0\5\114\5\0"+
    "\4\114\1\0\3\114\62\0\1\u0218\1\0\1\u0218\110\0"+
    "\1\u021f\1\0\1\u021f\27\0\57\u0165\1\u0166\1\u0165\1\u02dc"+
    "\1\u0165\1\u02dc\1\u0165\3\0\6\u0165\2\0\72\u0165\1\u0166"+
    "\1\u0165\1\u024a\1\u0165\1\u024a\1\u0165\3\0\6\u0165\2\0"+
    "\13\u0165\61\0\1\u02dd\1\0\1\u02dd\110\0\1\271\1\0"+
    "\1\271\30\0\1\u02de\6\114\1\0\3\114\1\0\15\114"+
    "\26\0\4\114\4\0\5\114\5\0\4\114\1\0\3\114"+
    "\1\0\57\u0165\1\u0166\1\u0165\1\u0166\1\u0165\1\u0166\1\u0165"+
    "\3\0\6\u0165\2\0\13\u0165\61\0\1\u02df\1\0\1\u02df"+
    "\30\0\7\114\1\0\2\114\1\u02e0\1\0\15\114\26\0"+
    "\4\114\4\0\4\114\1\u02e0\5\0\4\114\1\0\3\114"+
    "\62\0\1\u02e1\1\0\1\u02e1\30\0\7\114\1\u02e2\3\114"+
    "\1\0\15\114\26\0\4\114\4\0\5\114\5\0\1\114"+
    "\1\u02e3\2\114\1\0\1\114\1\u02e3\1\114\62\0\1\u02e4"+
    "\1\0\1\u02e4\50\0\1\u02e5\72\0\7\114\1\0\3\114"+
    "\1\0\4\114\1\u02e6\10\114\26\0\4\114\4\0\5\114"+
    "\5\0\4\114\1\0\3\114\62\0\1\u028e\1\0\1\u028e"+
    "\54\0\1\u02e7\66\0\7\114\1\0\3\114\1\0\10\114"+
    "\1\u02e8\4\114\26\0\4\114\4\0\5\114\5\0\4\114"+
    "\1\0\3\114\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[47925];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\34\0\1\11\4\1\1\11\101\1\1\11\20\1\1\11"+
    "\17\1\1\11\3\1\1\11\36\1\1\0\1\11\2\0"+
    "\1\1\7\0\1\1\4\0\1\11\1\0\5\1\1\0"+
    "\1\1\4\0\1\1\1\0\2\1\3\0\1\1\3\0"+
    "\1\1\12\0\3\1\5\0\2\1\3\0\2\1\2\0"+
    "\2\1\2\0\1\1\1\0\3\1\1\11\5\1\1\0"+
    "\5\1\1\0\2\1\1\0\11\1\1\11\1\1\1\0"+
    "\5\1\1\0\2\1\6\0\10\1\2\0\3\1\1\0"+
    "\14\1\1\0\2\1\1\0\16\1\3\0\6\1\3\0"+
    "\1\1\1\11\2\0\1\1\2\0\1\1\6\0\1\1"+
    "\3\0\1\1\5\0\6\1\2\0\1\1\3\0\1\1"+
    "\1\0\1\1\4\0\1\1\2\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\11\1\2\0\2\1\1\0\1\11"+
    "\3\0\5\1\1\11\6\1\1\11\3\1\1\0\1\1"+
    "\2\0\7\1\7\0\1\1\1\0\1\1\1\0\2\1"+
    "\11\0\1\1\1\0\1\1\3\0\10\1\2\0\3\1"+
    "\1\0\5\1\1\11\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\11\1\0\1\1\2\0\2\1"+
    "\1\0\3\1\1\0\2\1\3\0\20\1\1\0\1\1"+
    "\1\11\5\1\1\0\2\11\2\0\1\1\1\0\3\1"+
    "\1\0\14\1\1\0\1\1\1\0\1\1\2\0\6\1"+
    "\2\0\3\1\1\0\6\1\2\0\2\1\2\0\2\11"+
    "\2\1\2\0\3\1\2\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\11\1\0\1\11\2\0\1\1\1\0\2\1"+
    "\1\0\4\1\2\0\1\1\3\0\1\11\1\1\1\11"+
    "\1\1\1\0\4\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\1\11\2\0\2\1\4\0\1\1\1\0"+
    "\1\11\2\1\2\0\2\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\11\1\0\4\1\2\0\5\1\1\0\2\1"+
    "\1\0\1\1\4\0\1\1\2\0\3\1\4\0\1\1"+
    "\1\11\2\0\1\1\2\0\1\1\5\0\1\1\6\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[744];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    HashMap<String, String> definedLocals = new HashMap<String, String>();
    HashMap<String, String> definedMacroVars = new HashMap<String, String>();
    HashMap<String, String> knownFileLabels = new HashMap<String, String>();
    HashMap<String, String> knownFileMacros = new HashMap<String, String>();
    int vediId = -1;
    public void setVediId(int id)
    {
		vediId = id;
    }

    int parenthesisCount=0;
    int parenthesisCloseCount = 0;
    void initLine()
    {
        parenthesisCount=0;
        parenthesisCloseCount = 0;
    }

    public void resetMacros()
    {
        knownFileMacros.clear();
        definedLocals.clear();
        definedMacroVars.clear();
        knownFileLabels.clear();
    }
    public M6809Lexer(java.io.InputStream in) 
    {
        this(new java.io.InputStreamReader(in));
    }

	  /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }
        
    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }
            } else {
                in = System.in;
            }
            M6809Lexer shredder = new M6809Lexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != M6809Token.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    }  

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public M6809Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // fallback
    initLine();
    lastToken = M6809Token.ERROR_IDENTIFIER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 61: break;
          case 2: 
            { initLine();
    lastToken = M6809Token.LINE_LABEL;
    String text = yytext();
    boolean localDef = false;
    // the following only works
    // if lexer knows from context (last scanning)
    // possibly defined local macro labels 
    // invoking lexer with only "partial" scans, does not garantee this
    if (definedLocals.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
        localDef = true;
    }
    else if (text.length()>1)
    {
        if (definedLocals.get(text.substring(0,text.length()-1)) != null)
        {
            lastToken = M6809Token.RESERVED_ASMWORD;
            localDef = true;
        }
    }
    if (!localDef)
    {
        String text2 = text;
        if (text2.endsWith(":")) text2 = text2.substring(0, text2.length()-1);
        //knownFileLabels.put(text2, text2);
    }
    nextState = AFTER_LABEL;    
    yybegin(nextState);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 62: break;
          case 3: 
            { initLine();
    nextState = WHITE_SPACE_START;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 63: break;
          case 4: 
            { initLine();
    nextState = LINE_END;
    yybegin( LINE_END);
    lastToken = M6809Token.COMMENT_LINE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 64: break;
          case 5: 
            { lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    nextState = YYINITIAL;    
    yybegin(YYINITIAL);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 65: break;
          case 6: 
            { nextState = LINE_END;
    yybegin( LINE_END);
    lastToken = M6809Token.COMMENT_END_OF_LINE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 66: break;
          case 7: 
            { nextState = WHITE_SPACE_OPERAND_FINISHED;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 67: break;
          case 8: 
            { nextState = WHITE_SPACE_1BranchOP;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 68: break;
          case 9: 
            { nextState = WHITE_SPACE_2OP;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 69: break;
          case 10: 
            { nextState = WHITE_SPACE_Stack;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 70: break;
          case 11: 
            { nextState = WHITE_SPACE_1MemOP;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 71: break;
          case 12: 
            { nextState = WHITE_SPACE_AFTER_PSEUDO;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 72: break;
          case 13: 
            { nextState = WHITE_SPACE_AFTER_PSEUDO_IF;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 73: break;
          case 14: 
            { // variable 3
    //lastToken = M6809Token.LITERAL_VARIABLE;
    String text = yytext();

    lastToken = M6809Token.ERROR_IDENTIFIER;

    // is it a Macro
    if (definedLocals.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
    }
    else if (definedMacroVars.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
    }
    else if (ASM6809FileMaster.getInfo(vediId).knownGlobalMacros.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
    }
    // is it a label/variable
    else if (knownFileLabels.get(text) != null)
    {
        lastToken = M6809Token.LITERAL_VARIABLE;
    }
    else if (ASM6809FileMaster.getInfo(vediId).knownGlobalVariables.get(text) != null)
    {
        lastToken = M6809Token.LITERAL_VARIABLE;
    }
    else
    {
        if (!VideConfig.getConfig().scanVars)
        {
            lastToken = M6809Token.LITERAL_VARIABLE;
        }
    }

    // is it a Register
    if (text.toLowerCase().equals("a")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("b")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("d")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("x")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("y")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("u")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("s")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("x")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("pc")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("sp")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("dp")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("cc")) lastToken = M6809Token.RESERVED_REGISTER;

    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 74: break;
          case 15: 
            { lastToken = M6809Token.LITERAL_INTEGER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
            }
          case 75: break;
          case 16: 
            { // unclosed Paranthes
    lastToken = M6809Token.ERROR_IDENTIFIER;
    parenthesisCount++;
    String text = yytext();
    // we pushback, so only the parentheses is part of the token!
    yypushback(text.length()-1) ;
    text = text.substring(0,1);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
            }
          case 76: break;
          case 17: 
            { // unopened paranthesis
    parenthesisCloseCount++;
    if (parenthesisCloseCount>parenthesisCount)
    {
        lastToken = M6809Token.ERROR_IDENTIFIER;
        String text = yytext();
        M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
        return(t);
    }
    else
    {
        parenthesisCloseCount--;
        parenthesisCount--;
        lastToken = M6809Token.RESERVED_OPERATOR;
        String text = yytext();
        M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
        return(t);
    }
            }
          case 77: break;
          case 18: 
            { lastToken = M6809Token.RESERVED_OPERATOR;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
            }
          case 78: break;
          case 19: 
            { lastToken = M6809Token.ERROR_UNCLOSED_CHARACTER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 79: break;
          case 20: 
            { lastToken = M6809Token.ERROR_UNCLOSED_STRING;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 80: break;
          case 21: 
            { nextState = WHITE_SPACE_AFTER_LABEL;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 81: break;
          case 22: 
            { nextState = WHITE_SPACE_AFTER_MACRO;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 82: break;
          case 23: 
            { // VARIABLE 1
    lastToken = M6809Token.ERROR_IDENTIFIER;
    nextState = AFTER_MACROCALL; // incase of Macro call, this "catches" macro parameters
    String text = yytext();
    if (knownFileMacros.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
    }
    else
    {
        if (ASM6809FileMaster.getInfo(vediId).knownGlobalMacros.get(text) != null)
        {
            lastToken = M6809Token.RESERVED_ASMWORD;
        }
    }
    if (!VideConfig.getConfig().scanMacros)
    {
        lastToken = M6809Token.LITERAL_VARIABLE;
    }
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 83: break;
          case 24: 
            { nextState = AFTER_FIRST_MACRO_PARAM;    
    lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
// LOCAL    definedMacroVars.put(text, text);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 84: break;
          case 25: 
            { nextState = WHITE_SPACE_OPERAND_FINISHED;
    lastToken = M6809Token.LITERAL_VARIABLE;
    String text = yytext();
    if (definedLocals.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
    }
    if (definedMacroVars.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
    }
    else if (ASM6809FileMaster.getInfo(vediId).knownGlobalMacros.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
    }
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 85: break;
          case 26: 
            { nextState = WHITE_SPACE_OPERAND_FINISHED;

    lastToken = M6809Token.LITERAL_INTEGER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 86: break;
          case 27: 
            { nextState = WHITE_SPACE_1BranchOPOP;
    lastToken = M6809Token.RESERVED_OPERATOR;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 87: break;
          case 28: 
            { nextState = WHITE_SPACE_OPERAND_FINISHED;    
    lastToken = M6809Token.RESERVED_REGISTER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 88: break;
          case 29: 
            { nextState = WHITESPACE_AFTER_FIRST_MACRO_PARAM;    
    lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
// LOCAL    definedMacroVars.put(text, text);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 89: break;
          case 30: 
            { nextState = AFTER_MACRO_COLON;    
    lastToken = M6809Token.RESERVED_OPERATOR;
    String text = yytext();
// LOCAL    definedMacroVars.put(text, text);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 90: break;
          case 31: 
            { nextState = WHITESPACE_AFTER_MACRO_COLON;    
    lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
// LOCAL    definedMacroVars.put(text, text);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 91: break;
          case 32: 
            { nextState = IN_MACRO_CALL_PARAM;    

    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 92: break;
          case 33: 
            { nextState = WHITE_SPACE_AFTER_FIRST_MACROCALLPARAMETER;    
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 93: break;
          case 34: 
            { nextState = IN_MACRO_CALL_PARAM;    
   
    lastToken = M6809Token.WHITE_SPACE;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 94: break;
          case 35: 
            { // Variable 2
//    lastToken = M6809Token.LITERAL_VARIABLE;
    lastToken = M6809Token.ERROR_IDENTIFIER;
    nextState = WHITE_SPACE_AFTER_FIRST_MACROCALLPARAMETER; // incase of Macro call, this "catches" macro parameters
    String text = yytext();
//        lastToken = M6809Token.RESERVED_ASMWORD;
    // is it a Register
    if (text.toLowerCase().equals("a")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("b")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("d")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("x")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("y")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("u")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("s")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("x")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("pc")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("sp")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("dp")) lastToken = M6809Token.RESERVED_REGISTER;
    else if (text.toLowerCase().equals("cc")) lastToken = M6809Token.RESERVED_REGISTER;

    if (ASM6809FileMaster.getInfo(vediId).knownGlobalVariables.get(text) != null)
    {
        lastToken = M6809Token.LITERAL_VARIABLE;
    }
    if (ASM6809FileMaster.getInfo(vediId).knownGlobalMacros.get(text) != null)
    {
        lastToken = M6809Token.RESERVED_ASMWORD;
    }

    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
            }
          case 95: break;
          case 36: 
            { initLine();
    lastToken = M6809Token.LINE_LABEL;
    String text = yytext();
    boolean localDef = false;
    nextState = WHITE_SPACE_1MemOP;    
    yybegin(nextState);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 96: break;
          case 37: 
            { // maleformed operant
    lastToken = M6809Token.ERROR_IDENTIFIER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
            }
          case 97: break;
          case 38: 
            { lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
            }
          case 98: break;
          case 39: 
            { lastToken = M6809Token.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 99: break;
          case 40: 
            { lastToken = M6809Token.LITERAL_STRING;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 100: break;
          case 41: 
            { lastToken = M6809Token.ERROR_MALFORMED_UNCLOSED_STRING;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 101: break;
          case 42: 
            { nextState = AFTER_KEYWORD_PSEUDO; // for now treat as "bad" 6809 keyword
    lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
    if (text.toLowerCase().equals("local"))
    {
        nextState = AFTER_MACRO; // syntax == local? [list of params, colon seperated]
      //  nextState = AFTER_LOCAL;
    }
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 102: break;
          case 43: 
            { nextState = AFTER_KEYWORD_PSEUDO_IF; // for now treat as "bad" 6809 keyword
    lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
    if (text.toLowerCase().equals("local"))
    {
        nextState = AFTER_MACRO; // syntax == local? [list of params, colon seperated]
      //  nextState = AFTER_LOCAL;
    }
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 103: break;
          case 44: 
            { nextState = WHITE_SPACE_OPERAND_FINISHED;
    lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 104: break;
          case 45: 
            { // maleformed Macro
    lastToken = M6809Token.ERROR_IDENTIFIER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
            }
          case 105: break;
          case 46: 
            { initLine();
    lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
    boolean localDef = false;
    nextState = AFTER_LABEL;    
    yybegin(nextState);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 106: break;
          case 47: 
            { initLine();
    lastToken = M6809Token.RESERVED_ASMWORD;
    String text = yytext();
    boolean localDef = false;
    nextState = WHITE_SPACE_1MemOP;    
    yybegin(nextState);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 107: break;
          case 48: 
            { lastToken = M6809Token.RESERVED_OPERATOR;
    String text = yytext();
    String text2 = yytext();
    if (text.endsWith("("))
    {
        yypushback(1) ;
        text2 = text.substring(0, text.length()-1);
    }

    M6809Token t = (new M6809Token(lastToken,text2,yyline,yychar,yychar+text2.length(),nextState));
    return(t);
            }
          case 108: break;
          case 49: 
            { lastToken = M6809Token.RESERVED_OPERATOR;
    parenthesisCount++;

    String text = yytext();
// we pushback, so only the parentheses is part of the token!
    yypushback(text.length()-1) ;
    text = text.substring(0,1);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
            }
          case 109: break;
          case 50: 
            { nextState = AFTER_KEYWORD_0OP;
    lastToken = M6809Token.RESERVED_WORD;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 110: break;
          case 51: 
            { nextState = AFTER_KEYWORD_1MemOP;
    lastToken = M6809Token.RESERVED_WORD;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 111: break;
          case 52: 
            { nextState = AFTER_KEYWORD_2OP;
    lastToken = M6809Token.RESERVED_WORD;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 112: break;
          case 53: 
            { initLine();
    lastToken = M6809Token.RESERVED_ASMWORD;
    nextState = AFTER_EQU;    
    String text = yytext();

    String text2 = text.split(" ")[0];
    if (text2.endsWith(":")) text2=text2.substring(0,text2.length()-1);
    //knownFileLabels.put(text2, text2);

    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    t.isMacroName=true;
    yybegin(nextState);
    return(t);
            }
          case 113: break;
          case 54: 
            { lastToken = M6809Token.RESERVED_OPERATOR;
    parenthesisCount++;
    // this can as of now only be lo / hi
    //we pushback, so only them
    String text = yytext();
    yypushback(text.length()-2) ;
    text = text.substring(0,2);
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
            }
          case 114: break;
          case 55: 
            { lastToken = M6809Token.ERROR_MALFORMED_CHARACTER;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 115: break;
          case 56: 
            { lastToken = M6809Token.ERROR_MALFORMED_STRING;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 116: break;
          case 57: 
            { nextState = AFTER_KEYWORD_Stack;
    lastToken = M6809Token.RESERVED_WORD;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 117: break;
          case 58: 
            { lastToken = M6809Token.RESERVED_ASMWORD;
    nextState = WHITE_SPACE_OPERAND_FINISHED;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
            }
          case 118: break;
          case 59: 
            { initLine();
    lastToken = M6809Token.RESERVED_ASMWORD;
    nextState = AFTER_MACRO;    
    String text = yytext();
    definedMacroVars.clear();
    definedLocals.clear();

    String text2 = text.split(" ")[0];
    if (text2.endsWith(":")) text2=text2.substring(0,text2.length()-1);
    //knownFileMacros.put(text2, text2);

    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    t.isMacroName=true;
    yybegin(nextState);
    return(t);
            }
          case 119: break;
          case 60: 
            { nextState = AFTER_KEYWORD_1BranchOP;
    lastToken = M6809Token.RESERVED_WORD;
    String text = yytext();
    M6809Token t = (new M6809Token(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
            }
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
