

;***************************************************************************
; DEFINE SECTION
;***************************************************************************
; load vectrex bios routine definitions
Vec_Pattern         EQU      $C829                        ;Dot pattern (bits) 
music1              EQU      $FD0D 
VIA_port_b          EQU      $D000                        ;VIA port B data I/O register 
VIA_port_a          EQU      $D001                        ;VIA port A data I/O register (handshaking) 
VIA_t1_cnt_lo       EQU      $D004                        ;VIA timer 1 count register lo (scale factor) 
VIA_t1_cnt_hi       EQU      $D005                        ;VIA timer 1 count register hi 
VIA_shift_reg       EQU      $D00A                        ;VIA shift register 
VIA_int_flags       EQU      $D00D                        ;VIA interrupt flags register 
Intensity_5F        EQU      $F2A5                        ; 
Wait_Recal          EQU      $F192                        ; 
Draw_VLp            EQU      $F410                        ;pattern y x pattern y x ... $01 
Moveto_d            EQU      $F312                        ; 
Check0Ref           EQU      $F34F                        ; 
Reset0Ref       EQU     $F354   ;
VIA_cntl        EQU     $D00C   ;VIA control register

;***************************************************************************
; Variable / RAM SECTION
;***************************************************************************
; insert your variables (RAM usage) in the BSS section
; user RAM starts at $c880 
                    BSS      
                    ORG      $c880                ; start of our ram space 

sceneCounter        EQU      $c880

;***************************************************************************
; HEADER SECTION
;***************************************************************************
; The cartridge ROM starts at address 0
                    CODE     
                    ORG      0 
; the first few bytes are mandatory, otherwise the BIOS will not load
; the ROM file, and will start MineStorm instead
                    DB       "g GCE 1998", $80    ; 'g' is copyright sign
                    DW       music1               ; music from the rom 
                    DB       $F8, $50, $20, -$80  ; hight, width, rel y, rel x (from 0,0) 
                    DB       "SCENE DRAW VLP", $80  ; some game information, ending with $80
                    DB       0                    ; end of game header 

;***************************************************************************
; CODE SECTION
;***************************************************************************
; here the cartridge program starts off
main: 
                    JSR      Wait_Recal           ; Vectrex BIOS recalibration 
                    JSR      Intensity_5F         ; Sets the intensity of the 
                                                  ; vector beam to $5f 
                    LDA      #$50                 ; scalefactor
                    STA      VIA_t1_cnt_lo
                    LDA      #$00                 ; position relative Y 
                    LDB      #$00                 ; position relative X
                    JSR      Moveto_d             ; sets up VIA control register after a wait recal

                    CLR      sceneCounter
nextScenePart:
                    CLRA
                    LDB      sceneCounter
                    ASLB                          ; times two since it is a word pointer
                    ROLA
					LDX      #vData               ; address of data 
                    LDX      D,X
                    JSR      Draw_VLp_Malban         ; Vectrex BIOS print routine 
                    JSR      Reset0Ref
                    LDA      #$CE
                    STA      VIA_cntl

                    INC      sceneCounter
                    LDA      sceneCounter
                    CMPA     #vDataLength
                    BNE      nextScenePart
                    BRA      main                 ; and repeat forever 


;***************************************************************************
; Note the BIOS Draw_VLp Routine is buggy, it does not use a pattern byte at all!
; in order to show a correct example of the List Type, here a working
; Draw_VLp implementation!

Draw_VLp_Malban: 
                    LDD      1,X                          ;Get next coordinate pair 
                    STA      <VIA_port_a                  ;Send Y to A/D 
                    CLR      <VIA_port_b                  ;Enable mux 
                    LDA      ,X                           ;Get pattern byte 
                    LEAX     3,X                          ;Advance to next point in list 
                    INC      <VIA_port_b                  ;Disable mux 
                    STB      <VIA_port_a                  ;Send X to A/D 
                    LDB      #$40                         ;B-reg = T1 interrupt bit 
                    CLR      <VIA_t1_cnt_hi               ;Clear T1H 
setPattern: 
                    STA      <VIA_shift_reg               ;Store pattern in shift register 
                    BITB     <VIA_int_flags               ;Wait for T1 to time out 
                    BNE      lineDone 
                    NOP                                   ;delay up to 18 cycles befor next shift 
                    NOP 
                    BRA      setPattern 

lineDone: 
                    BRA      delayBeforShift              ;delay up to 18 cycles befor next shift 

delayBeforShift 
                    NOP      
                    NOP      
                    CLR      <VIA_shift_reg               ;Clear shift register (blank output) 
                    LDA      ,X                           ;Get next pattern byte 
                    BLE      Draw_VLp_Malban              ;Go back if high bit of pattern is set 
                    JMP      Check0Ref 

;***************************************************************************
; Note the BIOS Draw_VLp Routine is buggy, it does not use a pattern byte at all!
; in order to show a correct example of the List Type, here a working
; Draw_VLp implementation!

Draw_VLp_Malban: 
                    LDD      1,X                          ;Get next coordinate pair 
                    STA      <VIA_port_a                  ;Send Y to A/D 
                    CLR      <VIA_port_b                  ;Enable mux 
                    LDA      ,X                           ;Get pattern byte 
                    LEAX     3,X                          ;Advance to next point in list 
                    INC      <VIA_port_b                  ;Disable mux 
                    STB      <VIA_port_a                  ;Send X to A/D 
                    LDB      #$40                         ;B-reg = T1 interrupt bit 
                    CLR      <VIA_t1_cnt_hi               ;Clear T1H 
setPattern: 
                    STA      <VIA_shift_reg               ;Store pattern in shift register 
                    BITB     <VIA_int_flags               ;Wait for T1 to time out 
                    BNE      lineDone 
                    NOP                                   ;delay up to 18 cycles befor next shift 
                    NOP 
                    BRA      setPattern 

lineDone: 
                    BRA      delayBeforShift              ;delay up to 18 cycles befor next shift 

delayBeforShift 
                    NOP      
                    NOP      
                    CLR      <VIA_shift_reg               ;Clear shift register (blank output) 
                    LDA      ,X                           ;Get next pattern byte 
                    BLE      Draw_VLp_Malban              ;Go back if high bit of pattern is set 
                    JMP      Check0Ref 

;***************************************************************************
; DATA SECTION
;***************************************************************************

