                              1  .module _3dforc.pre.s
                              2 
                              3 
                              4  .area .text
                              5 
                              6                     .area .bss      
                              7 ; Warning - org line found, my be countering relocatable code!
                              8 ;                    ORG      0xc880                ; start of our ram space 
                              9 
                             10 ; include line ->                     INCLUDE  "VECTREX.I"          ; vectrex function includes
                             11 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             12 ; this file contains includes for vectrex BIOS functions and variables      ;
                             13 ; it was written by Bruce Tomlin, slighte changed by Malban                 ;
                             14 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             15 
                     0001    16 INCLUDE_I = 1
                             17 
                     C800    18 Vec_Snd_Shadow  =     0xC800   ;Shadow of sound chip registers (15 bytes)
                     C80F    19 Vec_Btn_State   =     0xC80F   ;Current state of all joystick buttons
                     C810    20 Vec_Prev_Btns   =     0xC810   ;Previous state of all joystick buttons
                     C811    21 Vec_Buttons     =     0xC811   ;Current toggle state of all buttons
                     C812    22 Vec_Button_1_1  =     0xC812   ;Current toggle state of stick 1 button 1
                     C813    23 Vec_Button_1_2  =     0xC813   ;Current toggle state of stick 1 button 2
                     C814    24 Vec_Button_1_3  =     0xC814   ;Current toggle state of stick 1 button 3
                     C815    25 Vec_Button_1_4  =     0xC815   ;Current toggle state of stick 1 button 4
                     C816    26 Vec_Button_2_1  =     0xC816   ;Current toggle state of stick 2 button 1
                     C817    27 Vec_Button_2_2  =     0xC817   ;Current toggle state of stick 2 button 2
                     C818    28 Vec_Button_2_3  =     0xC818   ;Current toggle state of stick 2 button 3
                     C819    29 Vec_Button_2_4  =     0xC819   ;Current toggle state of stick 2 button 4
                     C81A    30 Vec_Joy_Resltn  =     0xC81A   ;Joystick A/D resolution (0x80=min 0x00=max)
                     C81B    31 Vec_Joy_1_X     =     0xC81B   ;Joystick 1 left/right
                     C81C    32 Vec_Joy_1_Y     =     0xC81C   ;Joystick 1 up/down
                     C81D    33 Vec_Joy_2_X     =     0xC81D   ;Joystick 2 left/right
                     C81E    34 Vec_Joy_2_Y     =     0xC81E   ;Joystick 2 up/down
                     C81F    35 Vec_Joy_Mux     =     0xC81F   ;Joystick enable/mux flags (4 bytes)
                     C81F    36 Vec_Joy_Mux_1_X =     0xC81F   ;Joystick 1 X enable/mux flag (=1)
                     C820    37 Vec_Joy_Mux_1_Y =     0xC820   ;Joystick 1 Y enable/mux flag (=3)
                     C821    38 Vec_Joy_Mux_2_X =     0xC821   ;Joystick 2 X enable/mux flag (=5)
                     C822    39 Vec_Joy_Mux_2_Y =     0xC822   ;Joystick 2 Y enable/mux flag (=7)
                     C823    40 Vec_Misc_Count  =     0xC823   ;Misc counter/flag byte, zero when not in use
                     C824    41 Vec_0Ref_Enable =     0xC824   ;Check0Ref enable flag
                     C825    42 Vec_Loop_Count  =     0xC825   ;Loop counter word (incremented in Wait_Recal)
                     C827    43 Vec_Brightness  =     0xC827   ;Default brightness
                     C828    44 Vec_Dot_Dwell   =     0xC828   ;Dot dwell time?
                     C829    45 Vec_Pattern     =     0xC829   ;Dot pattern (bits)
                     C82A    46 Vec_Text_HW     =     0xC82A   ;Default text height and width
                     C82A    47 Vec_Text_Height =     0xC82A   ;Default text height
                     C82B    48 Vec_Text_Width  =     0xC82B   ;Default text width
                     C82C    49 Vec_Str_Ptr     =     0xC82C   ;Temporary string pointer for Print_Str
                     C82E    50 Vec_Counters    =     0xC82E   ;Six bytes of counters
                     C82E    51 Vec_Counter_1   =     0xC82E   ;First  counter byte
                     C82F    52 Vec_Counter_2   =     0xC82F   ;Second counter byte
                     C830    53 Vec_Counter_3   =     0xC830   ;Third  counter byte
                     C831    54 Vec_Counter_4   =     0xC831   ;Fourth counter byte
                     C832    55 Vec_Counter_5   =     0xC832   ;Fifth  counter byte
                     C833    56 Vec_Counter_6   =     0xC833   ;Sixth  counter byte
                     C834    57 Vec_RiseRun_Tmp =     0xC834   ;Temp storage word for rise/run
                     C836    58 Vec_Angle       =     0xC836   ;Angle for rise/run and rotation calculations
                     C837    59 Vec_Run_Index   =     0xC837   ;Index pair for run
                             60 ;                       0xC839   ;Pointer to copyright string during startup
                     C839    61 Vec_Rise_Index  =     0xC839   ;Index pair for rise
                             62 ;                       0xC83B   ;High score cold-start flag (=0 if valid)
                     C83B    63 Vec_RiseRun_Len =     0xC83B   ;length for rise/run
                             64 ;                       0xC83C   ;temp byte
                     C83D    65 Vec_Rfrsh       =     0xC83D   ;Refresh time (divided by 1.5MHz)
                     C83D    66 Vec_Rfrsh_lo    =     0xC83D   ;Refresh time low byte
                     C83E    67 Vec_Rfrsh_hi    =     0xC83E   ;Refresh time high byte
                     C83F    68 Vec_Music_Work  =     0xC83F   ;Music work buffer (14 bytes, backwards?)
                     C842    69 Vec_Music_Wk_A  =     0xC842   ;        register 10
                             70 ;                       0xC843   ;        register 9
                             71 ;                       0xC844   ;        register 8
                     C845    72 Vec_Music_Wk_7  =     0xC845   ;        register 7
                     C846    73 Vec_Music_Wk_6  =     0xC846   ;        register 6
                     C847    74 Vec_Music_Wk_5  =     0xC847   ;        register 5
                             75 ;                       0xC848   ;        register 4
                             76 ;                       0xC849   ;        register 3
                             77 ;                       0xC84A   ;        register 2
                     C84B    78 Vec_Music_Wk_1  =     0xC84B   ;        register 1
                             79 ;                       0xC84C   ;        register 0
                     C84D    80 Vec_Freq_Table  =     0xC84D   ;Pointer to note-to-frequency table (normally 0xFC8D)
                     C84F    81 Vec_Max_Players =     0xC84F   ;Maximum number of players for Select_Game
                     C850    82 Vec_Max_Games   =     0xC850   ;Maximum number of games for Select_Game
                     C84F    83 Vec_ADSR_Table  =     0xC84F   ;Storage for first music header word (ADSR table)
                     C851    84 Vec_Twang_Table =     0xC851   ;Storage for second music header word ('twang' table)
                     C853    85 Vec_Music_Ptr   =     0xC853   ;Music data pointer
                     C853    86 Vec_Expl_ChanA  =     0xC853   ;Used by Explosion_Snd - bit for first channel used?
                     C854    87 Vec_Expl_Chans  =     0xC854   ;Used by Explosion_Snd - bits for all channels used?
                     C855    88 Vec_Music_Chan  =     0xC855   ;Current sound channel number for Init_Music
                     C856    89 Vec_Music_Flag  =     0xC856   ;Music active flag (0x00=off 0x01=start 0x80=on)
                     C857    90 Vec_Duration    =     0xC857   ;Duration counter for Init_Music
                     C858    91 Vec_Music_Twang =     0xC858   ;3 word 'twang' table used by Init_Music
                     C858    92 Vec_Expl_1      =     0xC858   ;Four bytes copied from Explosion_Snd's U-reg parameters
                     C859    93 Vec_Expl_2      =     0xC859   ;
                     C85A    94 Vec_Expl_3      =     0xC85A   ;
                     C85B    95 Vec_Expl_4      =     0xC85B   ;
                     C85C    96 Vec_Expl_Chan   =     0xC85C   ;Used by Explosion_Snd - channel number in use?
                     C85D    97 Vec_Expl_ChanB  =     0xC85D   ;Used by Explosion_Snd - bit for second channel used?
                     C85E    98 Vec_ADSR_Timers =     0xC85E   ;ADSR timers for each sound channel (3 bytes)
                     C861    99 Vec_Music_Freq  =     0xC861   ;Storage for base frequency of each channel (3 words)
                            100 ;                       0xC85E   ;Scratch 'score' storage for Display_Option (7 bytes)
                     C867   101 Vec_Expl_Flag   =     0xC867   ;Explosion_Snd initialization flag?
                            102 ;               0xC868...0xC876   ;Unused?
                     C877   103 Vec_Expl_Timer  =     0xC877   ;Used by Explosion_Snd
                            104 ;                       0xC878   ;Unused?
                     C879   105 Vec_Num_Players =     0xC879   ;Number of players selected in Select_Game
                     C87A   106 Vec_Num_Game    =     0xC87A   ;Game number selected in Select_Game
                     C87B   107 Vec_Seed_Ptr    =     0xC87B   ;Pointer to 3-byte random number seed (=0xC87D)
                     C87D   108 Vec_Random_Seed =     0xC87D   ;Default 3-byte random number seed
                            109                                 ;
                            110 ;    0xC880 - 0xCBEA is user RAM  ;
                            111                                 ;
                     CBEA   112 Vec_Default_Stk =     0xCBEA   ;Default top-of-stack
                     CBEB   113 Vec_High_Score  =     0xCBEB   ;High score storage (7 bytes)
                     CBF2   114 Vec_SWI3_Vector =     0xCBF2   ;SWI2/SWI3 interrupt vector (3 bytes)
                     CBF2   115 Vec_SWI2_Vector =     0xCBF2   ;SWI2/SWI3 interrupt vector (3 bytes)
                     CBF5   116 Vec_FIRQ_Vector =     0xCBF5   ;FIRQ interrupt vector (3 bytes)
                     CBF8   117 Vec_IRQ_Vector  =     0xCBF8   ;IRQ interrupt vector (3 bytes)
                     CBFB   118 Vec_SWI_Vector  =     0xCBFB   ;SWI/NMI interrupt vector (3 bytes)
                     CBFB   119 Vec_NMI_Vector  =     0xCBFB   ;SWI/NMI interrupt vector (3 bytes)
                     CBFE   120 Vec_Cold_Flag   =     0xCBFE   ;Cold start flag (warm start if = 0x7321)
                            121                                 ;
                     D000   122 VIA_port_b      =     0xD000   ;VIA port B data I/O register
                            123 ;       0 sample/hold (0=enable  mux 1=disable mux)
                            124 ;       1 mux sel 0
                            125 ;       2 mux sel 1
                            126 ;       3 sound BC1
                            127 ;       4 sound BDIR
                            128 ;       5 comparator input
                            129 ;       6 external device (slot pin 35) initialized to input
                            130 ;       7 /RAMP
                     D001   131 VIA_port_a      =     0xD001   ;VIA port A data I/O register (handshaking)
                     D002   132 VIA_DDR_b       =     0xD002   ;VIA port B data direction register (0=input 1=output)
                     D003   133 VIA_DDR_a       =     0xD003   ;VIA port A data direction register (0=input 1=output)
                     D004   134 VIA_t1_cnt_lo   =     0xD004   ;VIA timer 1 count register lo (scale factor)
                     D005   135 VIA_t1_cnt_hi   =     0xD005   ;VIA timer 1 count register hi
                     D006   136 VIA_t1_lch_lo   =     0xD006   ;VIA timer 1 latch register lo
                     D007   137 VIA_t1_lch_hi   =     0xD007   ;VIA timer 1 latch register hi
                     D008   138 VIA_t2_lo       =     0xD008   ;VIA timer 2 count/latch register lo (refresh)
                     D009   139 VIA_t2_hi       =     0xD009   ;VIA timer 2 count/latch register hi
                     D00A   140 VIA_shift_reg   =     0xD00A   ;VIA shift register
                     D00B   141 VIA_aux_cntl    =     0xD00B   ;VIA auxiliary control register
                            142 ;       0 PA latch enable
                            143 ;       1 PB latch enable
                            144 ;       2 \                     110=output to CB2 under control of phase 2 clock
                            145 ;       3  > shift register control     (110 is the only mode used by the Vectrex ROM)
                            146 ;       4 /
                            147 ;       5 0=t2 one shot                 1=t2 free running
                            148 ;       6 0=t1 one shot                 1=t1 free running
                            149 ;       7 0=t1 disable PB7 output       1=t1 enable PB7 output
                     D00C   150 VIA_cntl        =     0xD00C   ;VIA control register
                            151 ;       0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
                            152 ;       1 \
                            153 ;       2  > CA2 control  CA2 -> /ZERO  110=low 111=high
                            154 ;       3 /
                            155 ;       4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
                            156 ;       5 \
                            157 ;       6  > CB2 control  CB2 -> /BLANK 110=low 111=high
                            158 ;       7 /
                     D00D   159 VIA_int_flags   =     0xD00D   ;VIA interrupt flags register
                            160 ;               bit                             cleared by
                            161 ;       0 CA2 interrupt flag            reading or writing port A I/O
                            162 ;       1 CA1 interrupt flag            reading or writing port A I/O
                            163 ;       2 shift register interrupt flag reading or writing shift register
                            164 ;       3 CB2 interrupt flag            reading or writing port B I/O
                            165 ;       4 CB1 interrupt flag            reading or writing port A I/O
                            166 ;       5 timer 2 interrupt flag        read t2 low or write t2 high
                            167 ;       6 timer 1 interrupt flag        read t1 count low or write t1 high
                            168 ;       7 IRQ status flag               write logic 0 to IER or IFR bit
                     D00E   169 VIA_int_enable  =     0xD00E   ;VIA interrupt enable register
                            170 ;       0 CA2 interrupt enable
                            171 ;       1 CA1 interrupt enable
                            172 ;       2 shift register interrupt enable
                            173 ;       3 CB2 interrupt enable
                            174 ;       4 CB1 interrupt enable
                            175 ;       5 timer 2 interrupt enable
                            176 ;       6 timer 1 interrupt enable
                            177 ;       7 IER set/clear control
                     D00F   178 VIA_port_a_nohs =     0xD00F   ;VIA port A data I/O register (no handshaking)
                            179 
                     F000   180 Cold_Start      =     0xF000   ;
                     F06C   181 Warm_Start      =     0xF06C   ;
                     F14C   182 Init_VIA        =     0xF14C   ;
                     F164   183 Init_OS_RAM     =     0xF164   ;
                     F18B   184 Init_OS         =     0xF18B   ;
                     F192   185 Wait_Recal      =     0xF192   ;
                     F1A2   186 Set_Refresh     =     0xF1A2   ;
                     F1AA   187 DP_to_D0        =     0xF1AA   ;
                     F1AF   188 DP_to_C8        =     0xF1AF   ;
                     F1B4   189 Read_Btns_Mask  =     0xF1B4   ;
                     F1BA   190 Read_Btns       =     0xF1BA   ;
                     F1F5   191 Joy_Analog      =     0xF1F5   ;
                     F1F8   192 Joy_Digital     =     0xF1F8   ;
                     F256   193 Sound_Byte      =     0xF256   ;
                     F259   194 Sound_Byte_x    =     0xF259   ;
                     F25B   195 Sound_Byte_raw  =     0xF25B   ;
                     F272   196 Clear_Sound     =     0xF272   ;
                     F27D   197 Sound_Bytes     =     0xF27D   ;
                     F284   198 Sound_Bytes_x   =     0xF284   ;
                     F289   199 Do_Sound        =     0xF289   ;
                     F28C   200 Do_Sound_x      =     0xF28C   ;
                     F29D   201 Intensity_1F    =     0xF29D   ;
                     F2A1   202 Intensity_3F    =     0xF2A1   ;
                     F2A5   203 Intensity_5F    =     0xF2A5   ;
                     F2A9   204 Intensity_7F    =     0xF2A9   ;
                     F2AB   205 Intensity_a     =     0xF2AB   ;
                     F2BE   206 Dot_ix_b        =     0xF2BE   ;
                     F2C1   207 Dot_ix          =     0xF2C1   ;
                     F2C3   208 Dot_d           =     0xF2C3   ;
                     F2C5   209 Dot_here        =     0xF2C5   ;
                     F2D5   210 Dot_List        =     0xF2D5   ;
                     F2DE   211 Dot_List_Reset  =     0xF2DE   ;
                     F2E6   212 Recalibrate     =     0xF2E6   ;
                     F2F2   213 Moveto_x_7F     =     0xF2F2   ;
                     F2FC   214 Moveto_d_7F     =     0xF2FC   ;
                     F308   215 Moveto_ix_FF    =     0xF308   ;
                     F30C   216 Moveto_ix_7F    =     0xF30C   ;
                     F30E   217 Moveto_ix_b     =     0xF30E   ;
                     F310   218 Moveto_ix       =     0xF310   ;
                     F312   219 Moveto_d        =     0xF312   ;
                     F34A   220 Reset0Ref_D0    =     0xF34A   ;
                     F34F   221 Check0Ref       =     0xF34F   ;
                     F354   222 Reset0Ref       =     0xF354   ;
                     F35B   223 Reset_Pen       =     0xF35B   ;
                     F36B   224 Reset0Int       =     0xF36B   ;
                     F373   225 Print_Str_hwyx  =     0xF373   ;
                     F378   226 Print_Str_yx    =     0xF378   ;
                     F37A   227 Print_Str_d     =     0xF37A   ;
                     F385   228 Print_List_hw   =     0xF385   ;
                     F38A   229 Print_List      =     0xF38A   ;
                     F38C   230 Print_List_chk  =     0xF38C   ;
                     F391   231 Print_Ships_x   =     0xF391   ;
                     F393   232 Print_Ships     =     0xF393   ;
                     F3AD   233 Mov_Draw_VLc_a  =     0xF3AD   ;count y x y x ...
                     F3B1   234 Mov_Draw_VL_b   =     0xF3B1   ;y x y x ...
                     F3B5   235 Mov_Draw_VLcs   =     0xF3B5   ;count scale y x y x ...
                     F3B7   236 Mov_Draw_VL_ab  =     0xF3B7   ;y x y x ...
                     F3B9   237 Mov_Draw_VL_a   =     0xF3B9   ;y x y x ...
                     F3BC   238 Mov_Draw_VL     =     0xF3BC   ;y x y x ...
                     F3BE   239 Mov_Draw_VL_d   =     0xF3BE   ;y x y x ...
                     F3CE   240 Draw_VLc        =     0xF3CE   ;count y x y x ...
                     F3D2   241 Draw_VL_b       =     0xF3D2   ;y x y x ...
                     F3D6   242 Draw_VLcs       =     0xF3D6   ;count scale y x y x ...
                     F3D8   243 Draw_VL_ab      =     0xF3D8   ;y x y x ...
                     F3DA   244 Draw_VL_a       =     0xF3DA   ;y x y x ...
                     F3DD   245 Draw_VL         =     0xF3DD   ;y x y x ...
                     F3DF   246 Draw_Line_d     =     0xF3DF   ;y x y x ...
                     F404   247 Draw_VLp_FF     =     0xF404   ;pattern y x pattern y x ... 0x01
                     F408   248 Draw_VLp_7F     =     0xF408   ;pattern y x pattern y x ... 0x01
                     F40C   249 Draw_VLp_scale  =     0xF40C   ;scale pattern y x pattern y x ... 0x01
                     F40E   250 Draw_VLp_b      =     0xF40E   ;pattern y x pattern y x ... 0x01
                     F410   251 Draw_VLp        =     0xF410   ;pattern y x pattern y x ... 0x01
                     F434   252 Draw_Pat_VL_a   =     0xF434   ;y x y x ...
                     F437   253 Draw_Pat_VL     =     0xF437   ;y x y x ...
                     F439   254 Draw_Pat_VL_d   =     0xF439   ;y x y x ...
                     F46E   255 Draw_VL_mode    =     0xF46E   ;mode y x mode y x ... 0x01
                     F495   256 Print_Str       =     0xF495   ;
                     F511   257 Random_3        =     0xF511   ;
                     F517   258 Random          =     0xF517   ;
                     F533   259 Init_Music_Buf  =     0xF533   ;
                     F53F   260 Clear_x_b       =     0xF53F   ;
                     F542   261 Clear_C8_RAM    =     0xF542   ;never used by GCE carts?
                     F545   262 Clear_x_256     =     0xF545   ;
                     F548   263 Clear_x_d       =     0xF548   ;
                     F550   264 Clear_x_b_80    =     0xF550   ;
                     F552   265 Clear_x_b_a     =     0xF552   ;
                     F55A   266 Dec_3_Counters  =     0xF55A   ;
                     F55E   267 Dec_6_Counters  =     0xF55E   ;
                     F563   268 Dec_Counters    =     0xF563   ;
                     F56D   269 Delay_3         =     0xF56D   ;30 cycles
                     F571   270 Delay_2         =     0xF571   ;25 cycles
                     F575   271 Delay_1         =     0xF575   ;20 cycles
                     F579   272 Delay_0         =     0xF579   ;12 cycles
                     F57A   273 Delay_b         =     0xF57A   ;5*B + 10 cycles
                     F57D   274 Delay_RTS       =     0xF57D   ;5 cycles
                     F57E   275 Bitmask_a       =     0xF57E   ;
                     F584   276 Abs_a_b         =     0xF584   ;
                     F58B   277 Abs_b           =     0xF58B   ;
                     F593   278 Rise_Run_Angle  =     0xF593   ;
                     F5D9   279 Get_Rise_Idx    =     0xF5D9   ;
                     F5DB   280 Get_Run_Idx     =     0xF5DB   ;
                     F5EF   281 Get_Rise_Run    =     0xF5EF   ;
                     F5FF   282 Rise_Run_X      =     0xF5FF   ;
                     F601   283 Rise_Run_Y      =     0xF601   ;
                     F603   284 Rise_Run_Len    =     0xF603   ;
                            285 
                     F610   286 Rot_VL_ab       =     0xF610   ;
                     F616   287 Rot_VL          =     0xF616   ;
                     F61F   288 Rot_VL_Mode   =     0xF61F   ;
                     F62B   289 Rot_VL_M_dft     =     0xF62B   ;
                            290 ;Rot_VL_dft      EQU     0xF637   ;
                            291 
                            292 
                            293 ;Rot_VL_ab       EQU     0xF610   ;
                            294 ;Rot_VL          EQU     0xF616   ;
                            295 ;Rot_VL_Mode_a   EQU     0xF61F   ;
                            296 ;Rot_VL_Mode     EQU     0xF62B   ;
                            297 ;Rot_VL_dft      EQU     0xF637   ;
                            298 
                     F65B   299 Xform_Run_a     =     0xF65B   ;
                     F65D   300 Xform_Run       =     0xF65D   ;
                     F661   301 Xform_Rise_a    =     0xF661   ;
                     F663   302 Xform_Rise      =     0xF663   ;
                     F67F   303 Move_Mem_a_1    =     0xF67F   ;
                     F683   304 Move_Mem_a      =     0xF683   ;
                     F687   305 Init_Music_chk  =     0xF687   ;
                     F68D   306 Init_Music      =     0xF68D   ;
                     F692   307 Init_Music_x    =     0xF692   ;
                     F7A9   308 Select_Game     =     0xF7A9   ;
                     F84F   309 Clear_Score     =     0xF84F   ;
                     F85E   310 Add_Score_a     =     0xF85E   ;
                     F87C   311 Add_Score_d     =     0xF87C   ;
                     F8B7   312 Strip_Zeros     =     0xF8B7   ;
                     F8C7   313 Compare_Score   =     0xF8C7   ;
                     F8D8   314 New_High_Score  =     0xF8D8   ;
                     F8E5   315 Obj_Will_Hit_u  =     0xF8E5   ;
                     F8F3   316 Obj_Will_Hit    =     0xF8F3   ;
                     F8FF   317 Obj_Hit         =     0xF8FF   ;
                     F92E   318 Explosion_Snd   =     0xF92E   ;
                     FF9F   319 Draw_Grid_VL    =     0xFF9F   ;
                            320                                 ;
                     FD0D   321 music1  = 0xFD0D               ;
                     FD1D   322 music2  = 0xFD1D               ;
                     FD81   323 music3  = 0xFD81               ;
                     FDD3   324 music4  = 0xFDD3               ;
                     FE38   325 music5  = 0xFE38               ;
                     FE76   326 music6  = 0xFE76               ;
                     FEC6   327 music7  = 0xFEC6               ;
                     FEF8   328 music8  = 0xFEF8               ;
                     FF26   329 music9  = 0xFF26               ;
                     FF44   330 musica  = 0xFF44               ;
                     FF62   331 musicb  = 0xFF62               ;
                     FF7A   332 musicc  = 0xFF7A               ;
                     FF8F   333 musicd  = 0xFF8F               ;
                     F9F4   334 Char_Table = 0xF9F4
                     FBD4   335 Char_Table_End = 0xFBD4
                            336 
                            337 ; include line ->                     INCLUDE  "3d_var.I"          ; vectrex function includes
                            338 ; this file is part of Release, written by Malban in 2017
                            339 ;
                            340 ; uses 11 + 27 *3 = 92 bytes RAM space
                            341 
                            342  .globl _helper
   0000                     343 _helper:          .blkb 1
                            344  .globl _cosx
   0001                     345 _cosx:            .blkb 1
                            346  .globl _sinx
   0002                     347 _sinx:            .blkb 1
                            348  .globl _cosy
   0003                     349 _cosy:            .blkb 1
                            350  .globl _siny
   0004                     351 _siny:            .blkb 1
                            352  .globl _cosz
   0005                     353 _cosz:            .blkb 1
                            354  .globl _sinz
   0006                     355 _sinz:            .blkb 1
                            356  .globl _angle_x
   0007                     357 _angle_x:         .blkb 1
                            358  .globl _angle_y
   0008                     359 _angle_y:         .blkb 1
                            360  .globl _angle_z
   0009                     361 _angle_z:         .blkb 1
                            362  .globl _vectorBits
   000A                     363 _vectorBits: .blkb 2; 16 bits for vectors which must be calculated, order like below
                            364  .globl _scale_3d
   000C                     365 _scale_3d: .blkb 1
                            366  .globl _scale_3d_move
   000D                     367 _scale_3d_move: .blkb 1
                            368 
                            369 
                            370  .globl _allDirs_calc
   000E                     371 _allDirs_calc:    .blkb 27 * 3
                            372  .globl _start_letter_data
   005F                     373 _start_letter_data: .blkb 0
                            374 
                     0001   375 TEST_0_0_0           = 0x01 ; low byte
                     0002   376 TEST_1_0_0           = 0x02 ; low byte
                     0004   377 TEST_1_1_0           = 0x04 ; low byte
                     0008   378 TEST_1_0_1           = 0x08 ; low byte
                     0010   379 TEST_1_1_1           = 0x10 ; low byte
                     0020   380 TEST_0_1_0           = 0x20 ; low byte
                     0040   381 TEST_0_1_1           = 0x40 ; low byte
                     0080   382 TEST_0_0_1           = 0x80 ; low byte
                     0001   383 TEST_N_1_0           = 0x01 ; high byte
                     0002   384 TEST_N_0_1           = 0x02 ; high byte
                     0004   385 TEST_0_N_1           = 0x04 ; high byte
                     0008   386 TEST_N_1_1           = 0x08 ; high byte
                     0010   387 TEST_1_N_1           = 0x10 ; high byte
                     0020   388 TEST_1_1_N           = 0x20 ; high byte
                            389 
                     000E   390 _0_0_0           = (_allDirs_calc+0)
                     0011   391 _1_0_0           = (_allDirs_calc+3)
                     0014   392 _1_1_0           = (_allDirs_calc+6)
                     0017   393 _1_0_1           = (_allDirs_calc+9)
                     001A   394 _1_1_1           = (_allDirs_calc+12)
                     001D   395 _0_1_0           = (_allDirs_calc+15)
                     0020   396 _0_1_1           = (_allDirs_calc+18)
                     0023   397 _0_0_1           = (_allDirs_calc+21)
                     0026   398 _N_1_0           = (_allDirs_calc+24)
                     0029   399 _N_0_1           = (_allDirs_calc+27)
                     002C   400 _0_N_1           = (_allDirs_calc+30)
                     002F   401 _N_1_1           = (_allDirs_calc+33)
                     0032   402 _1_N_1           = (_allDirs_calc+36)
                     0035   403 _1_1_N           = (_allDirs_calc+39)
                            404 
                     002A   405 INVERS_OFFSET    = 42
                            406 
                     0000   407 ADD_000 = 0
                     0003   408 ADD_100 = 3
                     0006   409 ADD_110 = 6
                     0009   410 ADD_101 = 9
                     000C   411 ADD_111 = 12
                     000F   412 ADD_010 = 15
                     0012   413 ADD_011 = 18
                     0015   414 ADD_001 = 21
                     0018   415 ADD_N10 = 24
                     001B   416 ADD_N01 = 27
                     001E   417 ADD_0N1 = 30
                     0021   418 ADD_N11 = 33
                     0024   419 ADD_1N1 = 36
                     0027   420 ADD_11N = 39
                            421 
                     0038   422 I_0_0_0          = (_0_0_0 + INVERS_OFFSET)
                     003B   423 I_1_0_0          = (_1_0_0 + INVERS_OFFSET)
                     003E   424 I_1_1_0          = (_1_1_0 + INVERS_OFFSET)
                     0041   425 I_1_0_1          = (_1_0_1 + INVERS_OFFSET)
                     0044   426 I_1_1_1          = (_1_1_1 + INVERS_OFFSET)
                     0047   427 I_0_1_0          = (_0_1_0 + INVERS_OFFSET)
                     004A   428 I_0_1_1          = (_0_1_1 + INVERS_OFFSET)
                     004D   429 I_0_0_1          = (_0_0_1 + INVERS_OFFSET)
                     0050   430 I_N_1_0          = (_N_1_0 + INVERS_OFFSET)
                     0053   431 I_N_0_1          = (_N_0_1 + INVERS_OFFSET)
                     0056   432 I_0_N_1          = (_0_N_1 + INVERS_OFFSET)
                     0059   433 I_N_1_1          = (_N_1_1 + INVERS_OFFSET)
                     005C   434 I_1_N_1          = (_1_N_1 + INVERS_OFFSET)
                     005F   435 I_1_1_N          = (_1_1_N + INVERS_OFFSET)
                            436 
                     003B   437 _N_0_0           = I_1_0_0
                     003E   438 _N_N_0           = I_1_1_0
                     0041   439 _N_0_N           = I_1_0_1
                     0044   440 _N_N_N           = I_1_1_1
                     0047   441 _0_N_0           = I_0_1_0
                     004A   442 _0_N_N           = I_0_1_1
                     004D   443 _0_0_N           = I_0_0_1
                     0050   444 _1_N_0           = I_N_1_0
                     0053   445 _1_0_N           = I_N_0_1
                     0056   446 _0_1_N           = I_0_N_1
                     0059   447 _1_N_N           = I_N_1_1
                     005C   448 _N_1_N           = I_1_N_1
                     005F   449 _N_N_1           = I_1_1_N
                            450 ; include line ->                     INCLUDE  "3d_MAKRO.I"          ; vectrex function includes
                            451 ; this file is part of Release, written by Malban in 2017
                            452 ;
                            453 ;***************************************************************************
                            454 ;***************************************************************************
                            455 ;***************************************************************************
                            456 ;***************************************************************************
                            457 ;***************************************************************************
                            458 ;***************************************************************************
                            459 ;***************************************************************************
                            460 ; this does:
                            461 ; signed multiplication of parameter 1 and parameter 2 to D
                            462 ; and divides D by 64
                            463 ; result is stored in A
                            464 
                            465 ;***************************************************************************
                            466 ; include line ->                  INCLUDE "000.I"
                            467 ; this file is part of Release, written by Malban in 2017
                            468 ;
                     000E   469 _000x            = (_allDirs_calc + ADD_000)
                     000F   470 _000y            = (_allDirs_calc + ADD_000 + 1)
                     0010   471 _000z            = (_allDirs_calc + ADD_000 + 2)
                     0038   472 _000xi           = (_allDirs_calc + (ADD_000) + INVERS_OFFSET)
                     0039   473 _000yi           = (_allDirs_calc + (ADD_000) + INVERS_OFFSET + 1)
                     003A   474 _000zi           = (_allDirs_calc + (ADD_000) + INVERS_OFFSET + 2)
                            475 
                            476 ;***************************************************************************
                            477 ;***************************************************************************
                            478 ;***************************************************************************
                            479 ;***************************************************************************
                            480 ;***************************************************************************
                            481 ;***************************************************************************
                            482 ;***************************************************************************
                            483 ; include line ->                  INCLUDE "100.I"
                            484 ; this file is part of Release, written by Malban in 2017
                            485 ;
                     0011   486 _100x            = (_allDirs_calc + ADD_100)
                     0012   487 _100y            = (_allDirs_calc + ADD_100 + 1)
                     0013   488 _100z            = (_allDirs_calc + ADD_100 + 2)
                     003B   489 _100xi           = (_allDirs_calc + (ADD_100) + INVERS_OFFSET)
                     003C   490 _100yi           = (_allDirs_calc + (ADD_100) + INVERS_OFFSET + 1)
                     003D   491 _100zi           = (_allDirs_calc + (ADD_100) + INVERS_OFFSET + 2)
                            492 
                            493 ;***************************************************************************
                            494 ;***************************************************************************
                            495 ;***************************************************************************
                            496 ;***************************************************************************
                            497 ;***************************************************************************
                            498 ;***************************************************************************
                            499 ;***************************************************************************
                            500 ;***************************************************************************
                            501 ;***************************************************************************
                            502 ;***************************************************************************
                            503 ; include line ->                  INCLUDE "110.I"
                            504 ; this file is part of Release, written by Malban in 2017
                            505 ;
                     0014   506 _110x            = (_allDirs_calc + ADD_110)
                     0015   507 _110y            = (_allDirs_calc + ADD_110 + 1)
                     0016   508 _110z            = (_allDirs_calc + ADD_110 + 2)
                     003E   509 _110xi           = (_allDirs_calc + (ADD_110) + INVERS_OFFSET)
                     003F   510 _110yi           = (_allDirs_calc + (ADD_110) + INVERS_OFFSET + 1)
                     0040   511 _110zi           = (_allDirs_calc + (ADD_110) + INVERS_OFFSET + 2)
                            512 
                            513 ;***************************************************************************
                            514 ;***************************************************************************
                            515 ;***************************************************************************
                            516 ;***************************************************************************
                            517 ;***************************************************************************
                            518 ;***************************************************************************
                            519 ;***************************************************************************
                            520 ;***************************************************************************
                            521 ;***************************************************************************
                            522 ;***************************************************************************
                            523 ; include line ->                  INCLUDE "101.I"
                            524 ; this file is part of Release, written by Malban in 2017
                            525 ;
                     0017   526 _101x            = (_allDirs_calc + ADD_101)
                     0018   527 _101y            = (_allDirs_calc + ADD_101 + 1)
                     0019   528 _101z            = (_allDirs_calc + ADD_101 + 2)
                     0041   529 _101xi           = (_allDirs_calc + (ADD_101) + INVERS_OFFSET)
                     0042   530 _101yi           = (_allDirs_calc + (ADD_101) + INVERS_OFFSET + 1)
                     0043   531 _101zi           = (_allDirs_calc + (ADD_101) + INVERS_OFFSET + 2)
                            532 
                            533 ;***************************************************************************
                            534 ;***************************************************************************
                            535 ;***************************************************************************
                            536 ;***************************************************************************
                            537 ;***************************************************************************
                            538 ;***************************************************************************
                            539 ;***************************************************************************
                            540 ;***************************************************************************
                            541 ;***************************************************************************
                            542 ;***************************************************************************
                            543 ; include line ->                  INCLUDE "111.I"
                            544 ; this file is part of Release, written by Malban in 2017
                            545 ;
                     001A   546 _111x            = (_allDirs_calc + ADD_111)
                     001B   547 _111y            = (_allDirs_calc + ADD_111 + 1)
                     001C   548 _111z            = (_allDirs_calc + ADD_111 + 2)
                     0044   549 _111xi           = (_allDirs_calc + (ADD_111) + INVERS_OFFSET)
                     0045   550 _111yi           = (_allDirs_calc + (ADD_111) + INVERS_OFFSET + 1)
                     0046   551 _111zi           = (_allDirs_calc + (ADD_111) + INVERS_OFFSET + 2)
                            552 
                            553 ;***************************************************************************
                            554 ;***************************************************************************
                            555 ;***************************************************************************
                            556 ;***************************************************************************
                            557 ;***************************************************************************
                            558 ;***************************************************************************
                            559 ;***************************************************************************
                            560 ;***************************************************************************
                            561 ;***************************************************************************
                            562 ;***************************************************************************
                            563 ; include line ->                  INCLUDE "010.I"
                            564 ; this file is part of Release, written by Malban in 2017
                            565 ;
                     001D   566 _010x            = (_allDirs_calc + ADD_010)
                     001E   567 _010y            = (_allDirs_calc + ADD_010 + 1)
                     001F   568 _010z            = (_allDirs_calc + ADD_010 + 2)
                     0047   569 _010xi           = (_allDirs_calc + (ADD_010) + INVERS_OFFSET)
                     0048   570 _010yi           = (_allDirs_calc + (ADD_010) + INVERS_OFFSET + 1)
                     0049   571 _010zi           = (_allDirs_calc + (ADD_010) + INVERS_OFFSET + 2)
                            572 
                            573 ;***************************************************************************
                            574 ;***************************************************************************
                            575 ;***************************************************************************
                            576 ;***************************************************************************
                            577 ;***************************************************************************
                            578 ;***************************************************************************
                            579 ;***************************************************************************
                            580 ;***************************************************************************
                            581 ;***************************************************************************
                            582 ;***************************************************************************
                            583 ; include line ->                  INCLUDE "011.I"
                            584 ; this file is part of Release, written by Malban in 2017
                            585 ;
                     0020   586 _011x            = (_allDirs_calc + ADD_011)
                     0021   587 _011y            = (_allDirs_calc + ADD_011 + 1)
                     0022   588 _011z            = (_allDirs_calc + ADD_011 + 2)
                     004A   589 _011xi           = (_allDirs_calc + (ADD_011) + INVERS_OFFSET)
                     004B   590 _011yi           = (_allDirs_calc + (ADD_011) + INVERS_OFFSET + 1)
                     004C   591 _011zi           = (_allDirs_calc + (ADD_011) + INVERS_OFFSET + 2)
                            592 
                            593 ;***************************************************************************
                            594 ;***************************************************************************
                            595 ;***************************************************************************
                            596 ;***************************************************************************
                            597 ;***************************************************************************
                            598 ;***************************************************************************
                            599 ;***************************************************************************
                            600 ;***************************************************************************
                            601 ;***************************************************************************
                            602 ;***************************************************************************
                            603 ; include line ->                  INCLUDE "001.I"
                            604 ; this file is part of Release, written by Malban in 2017
                            605 ;
                     0023   606 _001x            = (_allDirs_calc + ADD_001)
                     0024   607 _001y            = (_allDirs_calc + ADD_001 + 1)
                     0025   608 _001z            = (_allDirs_calc + ADD_001 + 2)
                     004D   609 _001xi           = (_allDirs_calc + (ADD_001) + INVERS_OFFSET)
                     004E   610 _001yi           = (_allDirs_calc + (ADD_001) + INVERS_OFFSET + 1)
                     004F   611 _001zi           = (_allDirs_calc + (ADD_001) + INVERS_OFFSET + 2)
                            612 
                            613 ;***************************************************************************
                            614 ;***************************************************************************
                            615 ;***************************************************************************
                            616 ;***************************************************************************
                            617 ;***************************************************************************
                            618 ;***************************************************************************
                            619 ;***************************************************************************
                            620 ;***************************************************************************
                            621 ;***************************************************************************
                            622 ;***************************************************************************
                            623 ; include line ->                  INCLUDE "N10.I"
                            624 ; this file is part of Release, written by Malban in 2017
                            625 ;
                     0026   626 _N10x            = (_allDirs_calc + ADD_N10)
                     0027   627 _N10y            = (_allDirs_calc + ADD_N10 + 1)
                     0028   628 _N10z            = (_allDirs_calc + ADD_N10 + 2)
                     0050   629 _N10xi           = (_allDirs_calc + (ADD_N10) + INVERS_OFFSET)
                     0051   630 _N10yi           = (_allDirs_calc + (ADD_N10) + INVERS_OFFSET + 1)
                     0052   631 _N10zi           = (_allDirs_calc + (ADD_N10) + INVERS_OFFSET + 2)
                            632 
                            633 ;***************************************************************************
                            634 ;***************************************************************************
                            635 ;***************************************************************************
                            636 ;***************************************************************************
                            637 ;***************************************************************************
                            638 ;***************************************************************************
                            639 ;***************************************************************************
                            640 ;***************************************************************************
                            641 ;***************************************************************************
                            642 ;***************************************************************************
                            643 ; include line ->                  INCLUDE "N01.I"
                            644 ; this file is part of Release, written by Malban in 2017
                            645 ;
                     0029   646 _N01x            = (_allDirs_calc + ADD_N01)
                     002A   647 _N01y            = (_allDirs_calc + ADD_N01 + 1)
                     002B   648 _N01z            = (_allDirs_calc + ADD_N01 + 2)
                     0053   649 _N01xi           = (_allDirs_calc + (ADD_N01) + INVERS_OFFSET)
                     0054   650 _N01yi           = (_allDirs_calc + (ADD_N01) + INVERS_OFFSET + 1)
                     0055   651 _N01zi           = (_allDirs_calc + (ADD_N01) + INVERS_OFFSET + 2)
                            652 
                            653 ;***************************************************************************
                            654 ;***************************************************************************
                            655 ;***************************************************************************
                            656 ;***************************************************************************
                            657 ;***************************************************************************
                            658 ;***************************************************************************
                            659 ;***************************************************************************
                            660 ;***************************************************************************
                            661 ;***************************************************************************
                            662 ;***************************************************************************
                            663 ; include line ->                  INCLUDE "0N1.I"
                            664 ; this file is part of Release, written by Malban in 2017
                            665 ;
                     002C   666 _0N1x            = (_allDirs_calc + ADD_0N1)
                     002D   667 _0N1y            = (_allDirs_calc + ADD_0N1 + 1)
                     002E   668 _0N1z            = (_allDirs_calc + ADD_0N1 + 2)
                     0056   669 _0N1xi           = (_allDirs_calc + (ADD_0N1) + INVERS_OFFSET)
                     0057   670 _0N1yi           = (_allDirs_calc + (ADD_0N1) + INVERS_OFFSET + 1)
                     0058   671 _0N1zi           = (_allDirs_calc + (ADD_0N1) + INVERS_OFFSET + 2)
                            672 
                            673 ;***************************************************************************
                            674 ;***************************************************************************
                            675 ;***************************************************************************
                            676 ;***************************************************************************
                            677 ;***************************************************************************
                            678 ;***************************************************************************
                            679 ;***************************************************************************
                            680 ;***************************************************************************
                            681 ;***************************************************************************
                            682 ;***************************************************************************
                            683 ; include line ->                  INCLUDE "N11.I"
                            684 ; this file is part of Release, written by Malban in 2017
                            685 ;
                     002F   686 _N11x            = (_allDirs_calc + ADD_N11)
                     0030   687 _N11y            = (_allDirs_calc + ADD_N11 + 1)
                     0031   688 _N11z            = (_allDirs_calc + ADD_N11 + 2)
                     0059   689 _N11xi           = (_allDirs_calc + (ADD_N11) + INVERS_OFFSET)
                     005A   690 _N11yi           = (_allDirs_calc + (ADD_N11) + INVERS_OFFSET + 1)
                     005B   691 _N11zi           = (_allDirs_calc + (ADD_N11) + INVERS_OFFSET + 2)
                            692 
                            693 ;***************************************************************************
                            694 ;***************************************************************************
                            695 ;***************************************************************************
                            696 ;***************************************************************************
                            697 ;***************************************************************************
                            698 ;***************************************************************************
                            699 ;***************************************************************************
                            700 ;***************************************************************************
                            701 ;***************************************************************************
                            702 ;***************************************************************************
                            703 ; include line ->                  INCLUDE "1N1.I"
                            704 ; this file is part of Release, written by Malban in 2017
                            705 ;
                     0032   706 _1N1x            = (_allDirs_calc + ADD_1N1)
                     0033   707 _1N1y            = (_allDirs_calc + ADD_1N1 + 1)
                     0034   708 _1N1z            = (_allDirs_calc + ADD_1N1 + 2)
                     005C   709 _1N1xi           = (_allDirs_calc + (ADD_1N1) + INVERS_OFFSET)
                     005D   710 _1N1yi           = (_allDirs_calc + (ADD_1N1) + INVERS_OFFSET + 1)
                     005E   711 _1N1zi           = (_allDirs_calc + (ADD_1N1) + INVERS_OFFSET + 2)
                            712 
                            713 ;***************************************************************************
                            714 ;***************************************************************************
                            715 ;***************************************************************************
                            716 ;***************************************************************************
                            717 ;***************************************************************************
                            718 ;***************************************************************************
                            719 ;***************************************************************************
                            720 ;***************************************************************************
                            721 ;***************************************************************************
                            722 ;***************************************************************************
                            723 ; include line ->                  INCLUDE "11N.I"
                            724 ; this file is part of Release, written by Malban in 2017
                            725 ;
                     0035   726 _11Nx            = (_allDirs_calc + ADD_11N)
                     0036   727 _11Ny            = (_allDirs_calc + ADD_11N + 1)
                     0037   728 _11Nz            = (_allDirs_calc + ADD_11N + 2)
                     005F   729 _11Nxi           = (_allDirs_calc + (ADD_11N) + INVERS_OFFSET)
                     0060   730 _11Nyi           = (_allDirs_calc + (ADD_11N) + INVERS_OFFSET + 1)
                     0061   731 _11Nzi           = (_allDirs_calc + (ADD_11N) + INVERS_OFFSET + 2)
                            732 
                            733 ;***************************************************************************
                            734 ;***************************************************************************
                            735 ;***************************************************************************
                            736 ;***************************************************************************
                            737 ;***************************************************************************
                            738 ;***************************************************************************
                            739 ;***************************************************************************
                            740 ;***************************************************************************
                            741 ;***************************************************************************
                            742 ;***************************************************************************
                            743 
                            744 
                            745 
                            746 ;***************************************************************************
                            747 ; HEADER SECTION
                            748 ;***************************************************************************
                            749 ; The cartridge ROM starts at address 0
                            750                     .area .text     
                            751 ; Warning - org line found, my be countering relocatable code!
                            752 ;                    ORG      0 
                            753 
                            754 
                            755 ; include line ->                     INCLUDE  "3d_prg.I"          ; vectrex function includes
                            756 ; this file is part of Release, written by Malban in 2017
                            757 ;
                            758 ;**********************************************************  
                            759 ; input list in X
                            760 ; destroys u
                            761 ; 0 move
                            762 ; negative use as shift
                            763 ; positive end
                            764  .globl asm_draw_3ds
   0000                     765 asm_draw_3ds: 
   0000 EE 02         [ 6]  766        ldu 2,x
   0002 A6 01         [ 5]  767        lda 1,x;
                            768  .globl starts
   0004                     769 starts:
   0004 B7 D0 04      [ 5]  770        sta 0xd004;
   0007 EC C4         [ 5]  771        ldd ,u;
   0009 B7 D0 01      [ 5]  772        sta 0xd001;
   000C 7F D0 00      [ 7]  773        clr 0xd000;
   000F A6 84         [ 4]  774        lda ,x;
   0011 7C D0 00      [ 7]  775        inc 0xd000;
   0014 F7 D0 01      [ 5]  776        stb 0xd001;
   0017 B7 D0 0A      [ 5]  777        sta 0xd00A;
   001A 7F D0 05      [ 7]  778        clr 0xd005;
   001D 30 04         [ 5]  779        leax 4,x;
   001F EE 02         [ 6]  780        ldu 2,x;
   0021 A6 84         [ 4]  781        lda ,x;
   0023 2E 10         [ 3]  782        bgt end1s;
   0025 A6 01         [ 5]  783        lda 1,x;
   0027 C6 40         [ 2]  784        ldb #0x40;
                            785  .globl waits
   0029 F5 D0 0D      [ 5]  786 waits: bitb 0xd00D;
   002C 27 FB         [ 3]  787        beq waits;
   002E C6 00         [ 2]  788        ldb #0
   0030 F7 D0 0A      [ 5]  789        stb 0xd00A;
   0033 20 CF         [ 3]  790        bra starts;
                            791  .globl end1s
   0035 CC 00 40      [ 3]  792 end1s: ldd #0x0040;
                            793  .globl ends
   0038 F5 D0 0D      [ 5]  794 ends:  bitb 0xd00D;
   003B 27 FB         [ 3]  795        beq ends;
   003D B7 D0 0A      [ 5]  796        sta 0xd00A
   0040 39            [ 5]  797  rts
                            798 
                            799  
                            800  .globl asm_draw_3d
   0041                     801 asm_draw_3d:
   0041 EE 01         [ 6]  802        ldu 1,x
                            803  .globl start
   0043 EC C4         [ 5]  804 start: ldd ,u;
   0045 B7 D0 01      [ 5]  805        sta 0xd001;
   0048 7F D0 00      [ 7]  806        clr 0xd000;
   004B A6 84         [ 4]  807        lda ,x;
   004D 7C D0 00      [ 7]  808        inc 0xd000;
   0050 F7 D0 01      [ 5]  809        stb 0xd001;
   0053 B7 D0 0A      [ 5]  810        sta 0xd00A;
   0056 7F D0 05      [ 7]  811        clr 0xd005;
   0059 30 03         [ 5]  812        leax 3,x;
   005B EE 01         [ 6]  813        ldu 1,x;
   005D A6 84         [ 4]  814        lda ,x;
   005F 2E 0D         [ 3]  815        bgt end1;
   0061 CC 00 40      [ 3]  816        ldd #0x0040;
                            817  .globl wait
   0064 F5 D0 0D      [ 5]  818 wait:  bitb 0xd00D;
   0067 27 FB         [ 3]  819        beq wait;
   0069 B7 D0 0A      [ 5]  820        sta 0xd00A;
   006C 20 D5         [ 3]  821        bra start;
                            822  .globl end1
   006E CC 00 40      [ 3]  823 end1:  ldd #0x0040;
                            824  .globl end
   0071 F5 D0 0D      [ 5]  825 end:   bitb 0xd00D;
   0074 27 FB         [ 3]  826        beq end;
   0076 B7 D0 0A      [ 5]  827        sta 0xd00A
   0079 39            [ 5]  828  rts
                            829 
                            830  .globl asm_draw_3d_dp
   007A                     831 asm_draw_3d_dp:
   007A EE 01         [ 6]  832        ldu 1,x
                            833  .globl start_dp
   007C EC C4         [ 5]  834 start_dp: ldd ,u;
   007E 97 01         [ 4]  835        sta *0xd001;
   0080 0F 00         [ 6]  836        clr *0xd000;
   0082 A6 84         [ 4]  837        lda ,x;
   0084 0C 00         [ 6]  838        inc *0xd000;
   0086 D7 01         [ 4]  839        stb *0xd001;
   0088 97 0A         [ 4]  840        sta *0xd00A;
   008A 0F 05         [ 6]  841        clr *0xd005;
   008C 30 03         [ 5]  842        leax 3,x;
   008E EE 01         [ 6]  843        ldu 1,x;
   0090 A6 84         [ 4]  844        lda ,x;
   0092 2E 0B         [ 3]  845        bgt end1_dp;
   0094 CC 00 40      [ 3]  846        ldd #0x0040;
                            847  .globl wait_dp
   0097 D5 0D         [ 4]  848 wait_dp:  bitb *0xd00D;
   0099 27 FC         [ 3]  849        beq wait_dp;
   009B 97 0A         [ 4]  850        sta *0xd00A;
   009D 20 DD         [ 3]  851        bra start_dp;
                            852  .globl end1_dp
   009F CC 00 40      [ 3]  853 end1_dp:  ldd #0x0040;
                            854  .globl end_dp
   00A2 D5 0D         [ 4]  855 end_dp:   bitb *0xd00D;
   00A4 27 FC         [ 3]  856        beq end_dp;
   00A6 97 0A         [ 4]  857        sta *0xd00A
   00A8 39            [ 5]  858  rts
                            859 
                            860 
                            861 ; Cosinus data
                            862  .globl _cosinus3d
   00A9                     863 _cosinus3d: 
   00A9 3F 3E 3D 3C 3A 37   864                     .byte       63, 62, 61, 60, 58, 55, 52, 48, 43, 39, 34 ; 11 
        34 30 2B 27 22
   00B4 1C 17 11 0A 04 FF   865                     .byte       28, 23, 17, 10, 4, -1, -7, -14, -20, -25, -31 ; 22 
        F9 F2 EC E7 E1
   00BF DC D7 D2 CE CB C8   866                     .byte       -36, -41, -46, -50, -53, -56, -59, -61, -62, -62, -62 ; 33 
        C5 C3 C2 C2 C2
   00CA C2 C3 C5 C8 CB CE   867                     .byte       -62, -61, -59, -56, -53, -50, -46, -41, -36, -31, -25 ; 44 
        D2 D7 DC E1 E7
   00D5 EC F2 F9 FF 04 0A   868                     .byte       -20, -14, -7, -1, 4, 10, 17, 23, 28, 34, 39 ; 55 
        11 17 1C 22 27
   00E0 2B 30 34 37 3A 3C   869                     .byte       43, 48, 52, 55, 58, 60, 61, 62, 63 
        3D 3E 3F
                            870 ; Sinus data
                            871  .globl _sinus3d
   00E9                     872 _sinus3d: 
   00E9 00 06 0C 12 18 1E   873                     .byte       0, 6, 12, 18, 24, 30, 35, 40, 45, 49, 52 ; 11 
        23 28 2D 31 34
   00F4 38 3A 3C 3E 3E 3E   874                     .byte       56, 58, 60, 62, 62, 62, 62, 61, 59, 57, 54 ; 22 
        3E 3D 3B 39 36
   00FF 33 2F 2A 26 20 1B   875                     .byte       51, 47, 42, 38, 32, 27, 21, 15, 9, 3, -3 ; 33 
        15 0F 09 03 FD
   010A F7 F1 EB E5 E0 DA   876                     .byte       -9, -15, -21, -27, -32, -38, -42, -47, -51, -54, -57 ; 44 
        D6 D1 CD CA C7
   0115 C5 C3 C2 C2 C2 C2   877                     .byte       -59, -61, -62, -62, -62, -62, -60, -58, -56, -52, -49 ; 55 
        C4 C6 C8 CC CF
   0120 D3 D8 DD E2 E8 EE   878                     .byte       -45, -40, -35, -30, -24, -18, -12, -6, -3 
        F4 FA FD
                            879 
                            880 
                            881  .globl init_2d
   0129                     882 init_2d:
   0129 8E 00 A9      [ 3]  883                     LDX      #_cosinus3d 
   012C CE 00 E9      [ 3]  884                     LDU      #_sinus3d 
   012F F6 00 07      [ 5]  885                     LDB      _angle_x 
   0132 A6 85         [ 5]  886                     LDA      B, X 
   0134 B7 00 01      [ 5]  887                     STA      _cosx 
   0137 A6 C5         [ 5]  888                     LDA      B, U 
   0139 B7 00 02      [ 5]  889                     STA      _sinx 
   013C F6 00 08      [ 5]  890                     LDB      _angle_y 
   013F A6 85         [ 5]  891                     LDA      B, X 
   0141 B7 00 03      [ 5]  892                     STA      _cosy 
   0144 A6 C5         [ 5]  893                     LDA      B, U 
   0146 B7 00 04      [ 5]  894                     STA      _siny 
   0149 F6 00 09      [ 5]  895                     LDB      _angle_z 
   014C A6 85         [ 5]  896                     LDA      B, X 
   014E B7 00 05      [ 5]  897                     STA      _cosz 
   0151 A6 C5         [ 5]  898                     LDA      B, U 
   0153 B7 00 06      [ 5]  899                     STA      _sinz 
                            900 
   0156 B6 00 0B      [ 5]  901  lda _vectorBits+1
   0159 85 01         [ 2]  902  bita #TEST_0_0_0
   015B 27 10         [ 3]  903  beq no0002d
                            904 ; macro call ->                     INIT_0_0_0_A  
                            905 ; macro call ->                  CALC_0_0_0_A _000x, _000y, _000z, _000xi, _000yi, _000zi
   015D 4F            [ 2]  906                  CLRA
   015E B7 00 0E      [ 5]  907                  STA           _000x
   0161 B7 00 0F      [ 5]  908                  STA           _000y
   0164 B7 00 38      [ 5]  909                  STA           _000xi
   0167 B7 00 39      [ 5]  910                  STA           _000yi
   016A B6 00 0B      [ 5]  911  lda _vectorBits+1
                            912  .globl no0002d
   016D                     913 no0002d:
   016D 85 20         [ 2]  914  bita #TEST_0_1_0
   016F 10 27 00 B2   [ 6]  915  lbeq no0102d
                            916 ; macro call ->                     INIT_0_1_0_A  
                            917 ; macro call ->                  CALC_0_1_0_A _010x, _010y, _010z, _010xi, _010yi, _010yi
                            918 ; macro call ->                  A_EQUALS_MUL _cosx, _siny
   0173 F6 00 04      [ 5]  919                  LDB           _siny
   0176 B6 00 01      [ 5]  920                  LDA           _cosx
   0179 2A 07         [ 3]  921                  BPL           mul_Ap5
   017B 40            [ 2]  922                  NEGA
   017C 5D            [ 2]  923                  TSTB
   017D 2A 07         [ 3]  924                  BPL           mul_An_Bp5
   017F 50            [ 2]  925                  NEGB
   0180 20 09         [ 3]  926                  BRA           mul_An_Bn5
                            927  .globl mul_Ap5
   0182                     928 mul_Ap5:
   0182 5D            [ 2]  929                  TSTB
   0183 2A 06         [ 3]  930                  BPL           mul_Ap_Bp5
   0185 50            [ 2]  931                  NEGB
                            932  .globl mul_An_Bp5
   0186                     933 mul_An_Bp5:
   0186 3D            [11]  934                  MUL
   0187 53            [ 2]  935                  COMB                              ; here we can use this as negd
   0188 43            [ 2]  936                  COMA                              ; since the low nibble of b doesn't interest us
   0189 20 01         [ 3]  937                  BRA           mul_end5
                            938  .globl mul_Ap_Bp5
   018B                     939 mul_Ap_Bp5:
                            940  .globl mul_An_Bn5
   018B                     941 mul_An_Bn5:
   018B 3D            [11]  942                  MUL
                            943  .globl mul_end5
   018C                     944 mul_end5:
   018C 58            [ 2]  945                  ASLB                              ; this divides d by 64
   018D 49            [ 2]  946                  ROLA
   018E 58            [ 2]  947                  ASLB
   018F 49            [ 2]  948                  ROLA
                            949 
                            950 ; macro call ->                  STORE_A _010x
   0190 B7 00 1D      [ 5]  951                  STA           _010x
                            952 ; macro call ->                  A_EQUALS_MUL _010x, _sinz
   0193 F6 00 06      [ 5]  953                  LDB           _sinz
   0196 B6 00 1D      [ 5]  954                  LDA           _010x
   0199 2A 07         [ 3]  955                  BPL           mul_Ap7
   019B 40            [ 2]  956                  NEGA
   019C 5D            [ 2]  957                  TSTB
   019D 2A 07         [ 3]  958                  BPL           mul_An_Bp7
   019F 50            [ 2]  959                  NEGB
   01A0 20 09         [ 3]  960                  BRA           mul_An_Bn7
                            961  .globl mul_Ap7
   01A2                     962 mul_Ap7:
   01A2 5D            [ 2]  963                  TSTB
   01A3 2A 06         [ 3]  964                  BPL           mul_Ap_Bp7
   01A5 50            [ 2]  965                  NEGB
                            966  .globl mul_An_Bp7
   01A6                     967 mul_An_Bp7:
   01A6 3D            [11]  968                  MUL
   01A7 53            [ 2]  969                  COMB                              ; here we can use this as negd
   01A8 43            [ 2]  970                  COMA                              ; since the low nibble of b doesn't interest us
   01A9 20 01         [ 3]  971                  BRA           mul_end7
                            972  .globl mul_Ap_Bp7
   01AB                     973 mul_Ap_Bp7:
                            974  .globl mul_An_Bn7
   01AB                     975 mul_An_Bn7:
   01AB 3D            [11]  976                  MUL
                            977  .globl mul_end7
   01AC                     978 mul_end7:
   01AC 58            [ 2]  979                  ASLB                              ; this divides d by 64
   01AD 49            [ 2]  980                  ROLA
   01AE 58            [ 2]  981                  ASLB
   01AF 49            [ 2]  982                  ROLA
                            983 
                            984 ; macro call ->                  STORE_A _010y
   01B0 B7 00 1E      [ 5]  985                  STA           _010y
                            986 ; macro call ->                  A_EQUALS_MUL _sinx, _cosz
   01B3 F6 00 05      [ 5]  987                  LDB           _cosz
   01B6 B6 00 02      [ 5]  988                  LDA           _sinx
   01B9 2A 07         [ 3]  989                  BPL           mul_Ap9
   01BB 40            [ 2]  990                  NEGA
   01BC 5D            [ 2]  991                  TSTB
   01BD 2A 07         [ 3]  992                  BPL           mul_An_Bp9
   01BF 50            [ 2]  993                  NEGB
   01C0 20 09         [ 3]  994                  BRA           mul_An_Bn9
                            995  .globl mul_Ap9
   01C2                     996 mul_Ap9:
   01C2 5D            [ 2]  997                  TSTB
   01C3 2A 06         [ 3]  998                  BPL           mul_Ap_Bp9
   01C5 50            [ 2]  999                  NEGB
                           1000  .globl mul_An_Bp9
   01C6                    1001 mul_An_Bp9:
   01C6 3D            [11] 1002                  MUL
   01C7 53            [ 2] 1003                  COMB                              ; here we can use this as negd
   01C8 43            [ 2] 1004                  COMA                              ; since the low nibble of b doesn't interest us
   01C9 20 01         [ 3] 1005                  BRA           mul_end9
                           1006  .globl mul_Ap_Bp9
   01CB                    1007 mul_Ap_Bp9:
                           1008  .globl mul_An_Bn9
   01CB                    1009 mul_An_Bn9:
   01CB 3D            [11] 1010                  MUL
                           1011  .globl mul_end9
   01CC                    1012 mul_end9:
   01CC 58            [ 2] 1013                  ASLB                              ; this divides d by 64
   01CD 49            [ 2] 1014                  ROLA
   01CE 58            [ 2] 1015                  ASLB
   01CF 49            [ 2] 1016                  ROLA
                           1017 
                           1018 ; macro call ->                  SUB_A_FROM _010y
   01D0 40            [ 2] 1019                  NEGA
                           1020 ; macro call ->                  ADD_A_TO      _010y
   01D1 BB 00 1E      [ 5] 1021                  ADDA          _010y
                           1022 ; macro call ->                  STORE_A       _010y
   01D4 B7 00 1E      [ 5] 1023                  STA           _010y
                           1024 ; macro call ->                  STORE_A_NEG _010yi
   01D7 40            [ 2] 1025                  NEGA
   01D8 B7 00 48      [ 5] 1026                  STA           _010yi
                           1027 ; macro call ->                  A_EQUALS_MUL _010x, _cosz
   01DB F6 00 05      [ 5] 1028                  LDB           _cosz
   01DE B6 00 1D      [ 5] 1029                  LDA           _010x
   01E1 2A 07         [ 3] 1030                  BPL           mul_Ap14
   01E3 40            [ 2] 1031                  NEGA
   01E4 5D            [ 2] 1032                  TSTB
   01E5 2A 07         [ 3] 1033                  BPL           mul_An_Bp14
   01E7 50            [ 2] 1034                  NEGB
   01E8 20 09         [ 3] 1035                  BRA           mul_An_Bn14
                           1036  .globl mul_Ap14
   01EA                    1037 mul_Ap14:
   01EA 5D            [ 2] 1038                  TSTB
   01EB 2A 06         [ 3] 1039                  BPL           mul_Ap_Bp14
   01ED 50            [ 2] 1040                  NEGB
                           1041  .globl mul_An_Bp14
   01EE                    1042 mul_An_Bp14:
   01EE 3D            [11] 1043                  MUL
   01EF 53            [ 2] 1044                  COMB                              ; here we can use this as negd
   01F0 43            [ 2] 1045                  COMA                              ; since the low nibble of b doesn't interest us
   01F1 20 01         [ 3] 1046                  BRA           mul_end14
                           1047  .globl mul_Ap_Bp14
   01F3                    1048 mul_Ap_Bp14:
                           1049  .globl mul_An_Bn14
   01F3                    1050 mul_An_Bn14:
   01F3 3D            [11] 1051                  MUL
                           1052  .globl mul_end14
   01F4                    1053 mul_end14:
   01F4 58            [ 2] 1054                  ASLB                              ; this divides d by 64
   01F5 49            [ 2] 1055                  ROLA
   01F6 58            [ 2] 1056                  ASLB
   01F7 49            [ 2] 1057                  ROLA
                           1058 
                           1059 ; macro call ->                  STORE_A _010x
   01F8 B7 00 1D      [ 5] 1060                  STA           _010x
                           1061 ; macro call ->                  A_EQUALS_MUL _sinx, _sinz
   01FB F6 00 06      [ 5] 1062                  LDB           _sinz
   01FE B6 00 02      [ 5] 1063                  LDA           _sinx
   0201 2A 07         [ 3] 1064                  BPL           mul_Ap16
   0203 40            [ 2] 1065                  NEGA
   0204 5D            [ 2] 1066                  TSTB
   0205 2A 07         [ 3] 1067                  BPL           mul_An_Bp16
   0207 50            [ 2] 1068                  NEGB
   0208 20 09         [ 3] 1069                  BRA           mul_An_Bn16
                           1070  .globl mul_Ap16
   020A                    1071 mul_Ap16:
   020A 5D            [ 2] 1072                  TSTB
   020B 2A 06         [ 3] 1073                  BPL           mul_Ap_Bp16
   020D 50            [ 2] 1074                  NEGB
                           1075  .globl mul_An_Bp16
   020E                    1076 mul_An_Bp16:
   020E 3D            [11] 1077                  MUL
   020F 53            [ 2] 1078                  COMB                              ; here we can use this as negd
   0210 43            [ 2] 1079                  COMA                              ; since the low nibble of b doesn't interest us
   0211 20 01         [ 3] 1080                  BRA           mul_end16
                           1081  .globl mul_Ap_Bp16
   0213                    1082 mul_Ap_Bp16:
                           1083  .globl mul_An_Bn16
   0213                    1084 mul_An_Bn16:
   0213 3D            [11] 1085                  MUL
                           1086  .globl mul_end16
   0214                    1087 mul_end16:
   0214 58            [ 2] 1088                  ASLB                              ; this divides d by 64
   0215 49            [ 2] 1089                  ROLA
   0216 58            [ 2] 1090                  ASLB
   0217 49            [ 2] 1091                  ROLA
                           1092 
                           1093 ; macro call ->                  ADD_A_TO _010x
   0218 BB 00 1D      [ 5] 1094                  ADDA          _010x
                           1095 ; macro call ->                  STORE_A       _010x
   021B B7 00 1D      [ 5] 1096                  STA           _010x
                           1097 ; macro call ->                  STORE_A_NEG _010xi
   021E 40            [ 2] 1098                  NEGA
   021F B7 00 47      [ 5] 1099                  STA           _010xi
   0222 B6 00 0B      [ 5] 1100  lda _vectorBits+1
                           1101  .globl no0102d
   0225                    1102 no0102d:
   0225 85 02         [ 2] 1103  bita #TEST_1_0_0
   0227 27 4B         [ 3] 1104  beq no1002d
                           1105 ; macro call ->                     INIT_1_0_0_A  
                           1106 ; macro call ->                  CALC_1_0_0_A _100x, _100y, _100z, _100xi, _100yi, _100zi
                           1107 ; macro call ->                  A_EQUALS_MUL _cosy, _sinz
   0229 F6 00 06      [ 5] 1108                  LDB           _sinz
   022C B6 00 03      [ 5] 1109                  LDA           _cosy
   022F 2A 07         [ 3] 1110                  BPL           mul_Ap22
   0231 40            [ 2] 1111                  NEGA
   0232 5D            [ 2] 1112                  TSTB
   0233 2A 07         [ 3] 1113                  BPL           mul_An_Bp22
   0235 50            [ 2] 1114                  NEGB
   0236 20 09         [ 3] 1115                  BRA           mul_An_Bn22
                           1116  .globl mul_Ap22
   0238                    1117 mul_Ap22:
   0238 5D            [ 2] 1118                  TSTB
   0239 2A 06         [ 3] 1119                  BPL           mul_Ap_Bp22
   023B 50            [ 2] 1120                  NEGB
                           1121  .globl mul_An_Bp22
   023C                    1122 mul_An_Bp22:
   023C 3D            [11] 1123                  MUL
   023D 53            [ 2] 1124                  COMB                              ; here we can use this as negd
   023E 43            [ 2] 1125                  COMA                              ; since the low nibble of b doesn't interest us
   023F 20 01         [ 3] 1126                  BRA           mul_end22
                           1127  .globl mul_Ap_Bp22
   0241                    1128 mul_Ap_Bp22:
                           1129  .globl mul_An_Bn22
   0241                    1130 mul_An_Bn22:
   0241 3D            [11] 1131                  MUL
                           1132  .globl mul_end22
   0242                    1133 mul_end22:
   0242 58            [ 2] 1134                  ASLB                              ; this divides d by 64
   0243 49            [ 2] 1135                  ROLA
   0244 58            [ 2] 1136                  ASLB
   0245 49            [ 2] 1137                  ROLA
                           1138 
                           1139 ; macro call ->                  STORE_A _100y
   0246 B7 00 12      [ 5] 1140                  STA           _100y
                           1141 ; macro call ->                  STORE_A_NEG _100yi
   0249 40            [ 2] 1142                  NEGA
   024A B7 00 3C      [ 5] 1143                  STA           _100yi
                           1144 ; macro call ->                  A_EQUALS_MUL _cosy, _cosz
   024D F6 00 05      [ 5] 1145                  LDB           _cosz
   0250 B6 00 03      [ 5] 1146                  LDA           _cosy
   0253 2A 07         [ 3] 1147                  BPL           mul_Ap25
   0255 40            [ 2] 1148                  NEGA
   0256 5D            [ 2] 1149                  TSTB
   0257 2A 07         [ 3] 1150                  BPL           mul_An_Bp25
   0259 50            [ 2] 1151                  NEGB
   025A 20 09         [ 3] 1152                  BRA           mul_An_Bn25
                           1153  .globl mul_Ap25
   025C                    1154 mul_Ap25:
   025C 5D            [ 2] 1155                  TSTB
   025D 2A 06         [ 3] 1156                  BPL           mul_Ap_Bp25
   025F 50            [ 2] 1157                  NEGB
                           1158  .globl mul_An_Bp25
   0260                    1159 mul_An_Bp25:
   0260 3D            [11] 1160                  MUL
   0261 53            [ 2] 1161                  COMB                              ; here we can use this as negd
   0262 43            [ 2] 1162                  COMA                              ; since the low nibble of b doesn't interest us
   0263 20 01         [ 3] 1163                  BRA           mul_end25
                           1164  .globl mul_Ap_Bp25
   0265                    1165 mul_Ap_Bp25:
                           1166  .globl mul_An_Bn25
   0265                    1167 mul_An_Bn25:
   0265 3D            [11] 1168                  MUL
                           1169  .globl mul_end25
   0266                    1170 mul_end25:
   0266 58            [ 2] 1171                  ASLB                              ; this divides d by 64
   0267 49            [ 2] 1172                  ROLA
   0268 58            [ 2] 1173                  ASLB
   0269 49            [ 2] 1174                  ROLA
                           1175 
                           1176 ; macro call ->                  STORE_A _100x
   026A B7 00 11      [ 5] 1177                  STA           _100x
                           1178 ; macro call ->                  STORE_A_NEG _100xi
   026D 40            [ 2] 1179                  NEGA
   026E B7 00 3B      [ 5] 1180                  STA           _100xi
   0271 B6 00 0B      [ 5] 1181  lda _vectorBits+1
                           1182  .globl no1002d
   0274                    1183 no1002d:
   0274 85 04         [ 2] 1184  bita #TEST_1_1_0
   0276 10 27 00 B9   [ 6] 1185  lbeq no1102d
                           1186 ; macro call ->                     INIT_1_1_0_A  
                           1187 ; macro call ->                  CALC_1_1_0_A _110x, _110y, _110z, _110xi, _110yi, _110zi
   027A B6 00 02      [ 5] 1188                  LDA   _sinx
   027D 40            [ 2] 1189                  NEGA
   027E B7 00 00      [ 5] 1190                  STA   _helper
                           1191 ; macro call ->                  A_EQUALS_MUL _cosx, _siny
   0281 F6 00 04      [ 5] 1192                  LDB           _siny
   0284 B6 00 01      [ 5] 1193                  LDA           _cosx
   0287 2A 07         [ 3] 1194                  BPL           mul_Ap30
   0289 40            [ 2] 1195                  NEGA
   028A 5D            [ 2] 1196                  TSTB
   028B 2A 07         [ 3] 1197                  BPL           mul_An_Bp30
   028D 50            [ 2] 1198                  NEGB
   028E 20 09         [ 3] 1199                  BRA           mul_An_Bn30
                           1200  .globl mul_Ap30
   0290                    1201 mul_Ap30:
   0290 5D            [ 2] 1202                  TSTB
   0291 2A 06         [ 3] 1203                  BPL           mul_Ap_Bp30
   0293 50            [ 2] 1204                  NEGB
                           1205  .globl mul_An_Bp30
   0294                    1206 mul_An_Bp30:
   0294 3D            [11] 1207                  MUL
   0295 53            [ 2] 1208                  COMB                              ; here we can use this as negd
   0296 43            [ 2] 1209                  COMA                              ; since the low nibble of b doesn't interest us
   0297 20 01         [ 3] 1210                  BRA           mul_end30
                           1211  .globl mul_Ap_Bp30
   0299                    1212 mul_Ap_Bp30:
                           1213  .globl mul_An_Bn30
   0299                    1214 mul_An_Bn30:
   0299 3D            [11] 1215                  MUL
                           1216  .globl mul_end30
   029A                    1217 mul_end30:
   029A 58            [ 2] 1218                  ASLB                              ; this divides d by 64
   029B 49            [ 2] 1219                  ROLA
   029C 58            [ 2] 1220                  ASLB
   029D 49            [ 2] 1221                  ROLA
                           1222 
   029E BB 00 03      [ 5] 1223                  ADDA  _cosy
                           1224 ; macro call ->                  STORE_A _110x
   02A1 B7 00 14      [ 5] 1225                  STA           _110x
                           1226 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   02A4 F6 00 05      [ 5] 1227                  LDB           _cosz
   02A7 B6 00 00      [ 5] 1228                  LDA           _helper
   02AA 2A 07         [ 3] 1229                  BPL           mul_Ap32
   02AC 40            [ 2] 1230                  NEGA
   02AD 5D            [ 2] 1231                  TSTB
   02AE 2A 07         [ 3] 1232                  BPL           mul_An_Bp32
   02B0 50            [ 2] 1233                  NEGB
   02B1 20 09         [ 3] 1234                  BRA           mul_An_Bn32
                           1235  .globl mul_Ap32
   02B3                    1236 mul_Ap32:
   02B3 5D            [ 2] 1237                  TSTB
   02B4 2A 06         [ 3] 1238                  BPL           mul_Ap_Bp32
   02B6 50            [ 2] 1239                  NEGB
                           1240  .globl mul_An_Bp32
   02B7                    1241 mul_An_Bp32:
   02B7 3D            [11] 1242                  MUL
   02B8 53            [ 2] 1243                  COMB                              ; here we can use this as negd
   02B9 43            [ 2] 1244                  COMA                              ; since the low nibble of b doesn't interest us
   02BA 20 01         [ 3] 1245                  BRA           mul_end32
                           1246  .globl mul_Ap_Bp32
   02BC                    1247 mul_Ap_Bp32:
                           1248  .globl mul_An_Bn32
   02BC                    1249 mul_An_Bn32:
   02BC 3D            [11] 1250                  MUL
                           1251  .globl mul_end32
   02BD                    1252 mul_end32:
   02BD 58            [ 2] 1253                  ASLB                              ; this divides d by 64
   02BE 49            [ 2] 1254                  ROLA
   02BF 58            [ 2] 1255                  ASLB
   02C0 49            [ 2] 1256                  ROLA
                           1257 
                           1258 ; macro call ->                  STORE_A _110y
   02C1 B7 00 15      [ 5] 1259                  STA           _110y
                           1260 ; macro call ->                  A_EQUALS_MUL _110x, _sinz
   02C4 F6 00 06      [ 5] 1261                  LDB           _sinz
   02C7 B6 00 14      [ 5] 1262                  LDA           _110x
   02CA 2A 07         [ 3] 1263                  BPL           mul_Ap34
   02CC 40            [ 2] 1264                  NEGA
   02CD 5D            [ 2] 1265                  TSTB
   02CE 2A 07         [ 3] 1266                  BPL           mul_An_Bp34
   02D0 50            [ 2] 1267                  NEGB
   02D1 20 09         [ 3] 1268                  BRA           mul_An_Bn34
                           1269  .globl mul_Ap34
   02D3                    1270 mul_Ap34:
   02D3 5D            [ 2] 1271                  TSTB
   02D4 2A 06         [ 3] 1272                  BPL           mul_Ap_Bp34
   02D6 50            [ 2] 1273                  NEGB
                           1274  .globl mul_An_Bp34
   02D7                    1275 mul_An_Bp34:
   02D7 3D            [11] 1276                  MUL
   02D8 53            [ 2] 1277                  COMB                              ; here we can use this as negd
   02D9 43            [ 2] 1278                  COMA                              ; since the low nibble of b doesn't interest us
   02DA 20 01         [ 3] 1279                  BRA           mul_end34
                           1280  .globl mul_Ap_Bp34
   02DC                    1281 mul_Ap_Bp34:
                           1282  .globl mul_An_Bn34
   02DC                    1283 mul_An_Bn34:
   02DC 3D            [11] 1284                  MUL
                           1285  .globl mul_end34
   02DD                    1286 mul_end34:
   02DD 58            [ 2] 1287                  ASLB                              ; this divides d by 64
   02DE 49            [ 2] 1288                  ROLA
   02DF 58            [ 2] 1289                  ASLB
   02E0 49            [ 2] 1290                  ROLA
                           1291 
                           1292 ; macro call ->                  ADD_A_TO _110y
   02E1 BB 00 15      [ 5] 1293                  ADDA          _110y
                           1294 ; macro call ->                  STORE_A       _110y
   02E4 B7 00 15      [ 5] 1295                  STA           _110y
                           1296 ; macro call ->                  STORE_A_NEG _110yi
   02E7 40            [ 2] 1297                  NEGA
   02E8 B7 00 3F      [ 5] 1298                  STA           _110yi
                           1299 ; macro call ->                  A_EQUALS_MUL _110x, _cosz
   02EB F6 00 05      [ 5] 1300                  LDB           _cosz
   02EE B6 00 14      [ 5] 1301                  LDA           _110x
   02F1 2A 07         [ 3] 1302                  BPL           mul_Ap38
   02F3 40            [ 2] 1303                  NEGA
   02F4 5D            [ 2] 1304                  TSTB
   02F5 2A 07         [ 3] 1305                  BPL           mul_An_Bp38
   02F7 50            [ 2] 1306                  NEGB
   02F8 20 09         [ 3] 1307                  BRA           mul_An_Bn38
                           1308  .globl mul_Ap38
   02FA                    1309 mul_Ap38:
   02FA 5D            [ 2] 1310                  TSTB
   02FB 2A 06         [ 3] 1311                  BPL           mul_Ap_Bp38
   02FD 50            [ 2] 1312                  NEGB
                           1313  .globl mul_An_Bp38
   02FE                    1314 mul_An_Bp38:
   02FE 3D            [11] 1315                  MUL
   02FF 53            [ 2] 1316                  COMB                              ; here we can use this as negd
   0300 43            [ 2] 1317                  COMA                              ; since the low nibble of b doesn't interest us
   0301 20 01         [ 3] 1318                  BRA           mul_end38
                           1319  .globl mul_Ap_Bp38
   0303                    1320 mul_Ap_Bp38:
                           1321  .globl mul_An_Bn38
   0303                    1322 mul_An_Bn38:
   0303 3D            [11] 1323                  MUL
                           1324  .globl mul_end38
   0304                    1325 mul_end38:
   0304 58            [ 2] 1326                  ASLB                              ; this divides d by 64
   0305 49            [ 2] 1327                  ROLA
   0306 58            [ 2] 1328                  ASLB
   0307 49            [ 2] 1329                  ROLA
                           1330 
                           1331 ; macro call ->                  STORE_A _110x
   0308 B7 00 14      [ 5] 1332                  STA           _110x
                           1333 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   030B F6 00 06      [ 5] 1334                  LDB           _sinz
   030E B6 00 00      [ 5] 1335                  LDA           _helper
   0311 2A 07         [ 3] 1336                  BPL           mul_Ap40
   0313 40            [ 2] 1337                  NEGA
   0314 5D            [ 2] 1338                  TSTB
   0315 2A 07         [ 3] 1339                  BPL           mul_An_Bp40
   0317 50            [ 2] 1340                  NEGB
   0318 20 09         [ 3] 1341                  BRA           mul_An_Bn40
                           1342  .globl mul_Ap40
   031A                    1343 mul_Ap40:
   031A 5D            [ 2] 1344                  TSTB
   031B 2A 06         [ 3] 1345                  BPL           mul_Ap_Bp40
   031D 50            [ 2] 1346                  NEGB
                           1347  .globl mul_An_Bp40
   031E                    1348 mul_An_Bp40:
   031E 3D            [11] 1349                  MUL
   031F 53            [ 2] 1350                  COMB                              ; here we can use this as negd
   0320 43            [ 2] 1351                  COMA                              ; since the low nibble of b doesn't interest us
   0321 20 01         [ 3] 1352                  BRA           mul_end40
                           1353  .globl mul_Ap_Bp40
   0323                    1354 mul_Ap_Bp40:
                           1355  .globl mul_An_Bn40
   0323                    1356 mul_An_Bn40:
   0323 3D            [11] 1357                  MUL
                           1358  .globl mul_end40
   0324                    1359 mul_end40:
   0324 58            [ 2] 1360                  ASLB                              ; this divides d by 64
   0325 49            [ 2] 1361                  ROLA
   0326 58            [ 2] 1362                  ASLB
   0327 49            [ 2] 1363                  ROLA
                           1364 
                           1365 ; macro call ->                  SUB_A_FROM _110x
   0328 40            [ 2] 1366                  NEGA
                           1367 ; macro call ->                  ADD_A_TO      _110x
   0329 BB 00 14      [ 5] 1368                  ADDA          _110x
                           1369 ; macro call ->                  STORE_A       _110x
   032C B7 00 14      [ 5] 1370                  STA           _110x
                           1371 ; macro call ->                  STORE_A_NEG _110xi
   032F 40            [ 2] 1372                  NEGA
   0330 B7 00 3E      [ 5] 1373                  STA           _110xi
                           1374  .globl no1102d
   0333                    1375 no1102d:
   0333 B6 00 0A      [ 5] 1376  lda _vectorBits
   0336 85 01         [ 2] 1377  bita #TEST_N_1_0
   0338 10 27 00 B9   [ 6] 1378  lbeq noN102d
                           1379 ; macro call ->                     INIT_N_1_0_A  
                           1380 ; macro call ->                  CALC_N_1_0_A _N10x, _N10y, _N10z, _N10xi, _N10yi, _N10zi
   033C B6 00 02      [ 5] 1381                  LDA   _sinx
   033F 40            [ 2] 1382                  NEGA
   0340 B7 00 00      [ 5] 1383                  STA   _helper
                           1384 ; macro call ->                  A_EQUALS_MUL _cosx, _siny
   0343 F6 00 04      [ 5] 1385                  LDB           _siny
   0346 B6 00 01      [ 5] 1386                  LDA           _cosx
   0349 2A 07         [ 3] 1387                  BPL           mul_Ap47
   034B 40            [ 2] 1388                  NEGA
   034C 5D            [ 2] 1389                  TSTB
   034D 2A 07         [ 3] 1390                  BPL           mul_An_Bp47
   034F 50            [ 2] 1391                  NEGB
   0350 20 09         [ 3] 1392                  BRA           mul_An_Bn47
                           1393  .globl mul_Ap47
   0352                    1394 mul_Ap47:
   0352 5D            [ 2] 1395                  TSTB
   0353 2A 06         [ 3] 1396                  BPL           mul_Ap_Bp47
   0355 50            [ 2] 1397                  NEGB
                           1398  .globl mul_An_Bp47
   0356                    1399 mul_An_Bp47:
   0356 3D            [11] 1400                  MUL
   0357 53            [ 2] 1401                  COMB                              ; here we can use this as negd
   0358 43            [ 2] 1402                  COMA                              ; since the low nibble of b doesn't interest us
   0359 20 01         [ 3] 1403                  BRA           mul_end47
                           1404  .globl mul_Ap_Bp47
   035B                    1405 mul_Ap_Bp47:
                           1406  .globl mul_An_Bn47
   035B                    1407 mul_An_Bn47:
   035B 3D            [11] 1408                  MUL
                           1409  .globl mul_end47
   035C                    1410 mul_end47:
   035C 58            [ 2] 1411                  ASLB                              ; this divides d by 64
   035D 49            [ 2] 1412                  ROLA
   035E 58            [ 2] 1413                  ASLB
   035F 49            [ 2] 1414                  ROLA
                           1415 
   0360 B0 00 03      [ 5] 1416                  SUBA  _cosy
                           1417 ; macro call ->                  STORE_A _N10x
   0363 B7 00 26      [ 5] 1418                  STA           _N10x
                           1419 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   0366 F6 00 05      [ 5] 1420                  LDB           _cosz
   0369 B6 00 00      [ 5] 1421                  LDA           _helper
   036C 2A 07         [ 3] 1422                  BPL           mul_Ap49
   036E 40            [ 2] 1423                  NEGA
   036F 5D            [ 2] 1424                  TSTB
   0370 2A 07         [ 3] 1425                  BPL           mul_An_Bp49
   0372 50            [ 2] 1426                  NEGB
   0373 20 09         [ 3] 1427                  BRA           mul_An_Bn49
                           1428  .globl mul_Ap49
   0375                    1429 mul_Ap49:
   0375 5D            [ 2] 1430                  TSTB
   0376 2A 06         [ 3] 1431                  BPL           mul_Ap_Bp49
   0378 50            [ 2] 1432                  NEGB
                           1433  .globl mul_An_Bp49
   0379                    1434 mul_An_Bp49:
   0379 3D            [11] 1435                  MUL
   037A 53            [ 2] 1436                  COMB                              ; here we can use this as negd
   037B 43            [ 2] 1437                  COMA                              ; since the low nibble of b doesn't interest us
   037C 20 01         [ 3] 1438                  BRA           mul_end49
                           1439  .globl mul_Ap_Bp49
   037E                    1440 mul_Ap_Bp49:
                           1441  .globl mul_An_Bn49
   037E                    1442 mul_An_Bn49:
   037E 3D            [11] 1443                  MUL
                           1444  .globl mul_end49
   037F                    1445 mul_end49:
   037F 58            [ 2] 1446                  ASLB                              ; this divides d by 64
   0380 49            [ 2] 1447                  ROLA
   0381 58            [ 2] 1448                  ASLB
   0382 49            [ 2] 1449                  ROLA
                           1450 
                           1451 ; macro call ->                  STORE_A _N10y
   0383 B7 00 27      [ 5] 1452                  STA           _N10y
                           1453 ; macro call ->                  A_EQUALS_MUL _N10x, _sinz
   0386 F6 00 06      [ 5] 1454                  LDB           _sinz
   0389 B6 00 26      [ 5] 1455                  LDA           _N10x
   038C 2A 07         [ 3] 1456                  BPL           mul_Ap51
   038E 40            [ 2] 1457                  NEGA
   038F 5D            [ 2] 1458                  TSTB
   0390 2A 07         [ 3] 1459                  BPL           mul_An_Bp51
   0392 50            [ 2] 1460                  NEGB
   0393 20 09         [ 3] 1461                  BRA           mul_An_Bn51
                           1462  .globl mul_Ap51
   0395                    1463 mul_Ap51:
   0395 5D            [ 2] 1464                  TSTB
   0396 2A 06         [ 3] 1465                  BPL           mul_Ap_Bp51
   0398 50            [ 2] 1466                  NEGB
                           1467  .globl mul_An_Bp51
   0399                    1468 mul_An_Bp51:
   0399 3D            [11] 1469                  MUL
   039A 53            [ 2] 1470                  COMB                              ; here we can use this as negd
   039B 43            [ 2] 1471                  COMA                              ; since the low nibble of b doesn't interest us
   039C 20 01         [ 3] 1472                  BRA           mul_end51
                           1473  .globl mul_Ap_Bp51
   039E                    1474 mul_Ap_Bp51:
                           1475  .globl mul_An_Bn51
   039E                    1476 mul_An_Bn51:
   039E 3D            [11] 1477                  MUL
                           1478  .globl mul_end51
   039F                    1479 mul_end51:
   039F 58            [ 2] 1480                  ASLB                              ; this divides d by 64
   03A0 49            [ 2] 1481                  ROLA
   03A1 58            [ 2] 1482                  ASLB
   03A2 49            [ 2] 1483                  ROLA
                           1484 
                           1485 ; macro call ->                  ADD_A_TO _N10y
   03A3 BB 00 27      [ 5] 1486                  ADDA          _N10y
                           1487 ; macro call ->                  STORE_A       _N10y
   03A6 B7 00 27      [ 5] 1488                  STA           _N10y
                           1489 ; macro call ->                  STORE_A_NEG _N10yi
   03A9 40            [ 2] 1490                  NEGA
   03AA B7 00 51      [ 5] 1491                  STA           _N10yi
                           1492 ; macro call ->                  A_EQUALS_MUL _N10x, _cosz
   03AD F6 00 05      [ 5] 1493                  LDB           _cosz
   03B0 B6 00 26      [ 5] 1494                  LDA           _N10x
   03B3 2A 07         [ 3] 1495                  BPL           mul_Ap55
   03B5 40            [ 2] 1496                  NEGA
   03B6 5D            [ 2] 1497                  TSTB
   03B7 2A 07         [ 3] 1498                  BPL           mul_An_Bp55
   03B9 50            [ 2] 1499                  NEGB
   03BA 20 09         [ 3] 1500                  BRA           mul_An_Bn55
                           1501  .globl mul_Ap55
   03BC                    1502 mul_Ap55:
   03BC 5D            [ 2] 1503                  TSTB
   03BD 2A 06         [ 3] 1504                  BPL           mul_Ap_Bp55
   03BF 50            [ 2] 1505                  NEGB
                           1506  .globl mul_An_Bp55
   03C0                    1507 mul_An_Bp55:
   03C0 3D            [11] 1508                  MUL
   03C1 53            [ 2] 1509                  COMB                              ; here we can use this as negd
   03C2 43            [ 2] 1510                  COMA                              ; since the low nibble of b doesn't interest us
   03C3 20 01         [ 3] 1511                  BRA           mul_end55
                           1512  .globl mul_Ap_Bp55
   03C5                    1513 mul_Ap_Bp55:
                           1514  .globl mul_An_Bn55
   03C5                    1515 mul_An_Bn55:
   03C5 3D            [11] 1516                  MUL
                           1517  .globl mul_end55
   03C6                    1518 mul_end55:
   03C6 58            [ 2] 1519                  ASLB                              ; this divides d by 64
   03C7 49            [ 2] 1520                  ROLA
   03C8 58            [ 2] 1521                  ASLB
   03C9 49            [ 2] 1522                  ROLA
                           1523 
                           1524 ; macro call ->                  STORE_A _N10x
   03CA B7 00 26      [ 5] 1525                  STA           _N10x
                           1526 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   03CD F6 00 06      [ 5] 1527                  LDB           _sinz
   03D0 B6 00 00      [ 5] 1528                  LDA           _helper
   03D3 2A 07         [ 3] 1529                  BPL           mul_Ap57
   03D5 40            [ 2] 1530                  NEGA
   03D6 5D            [ 2] 1531                  TSTB
   03D7 2A 07         [ 3] 1532                  BPL           mul_An_Bp57
   03D9 50            [ 2] 1533                  NEGB
   03DA 20 09         [ 3] 1534                  BRA           mul_An_Bn57
                           1535  .globl mul_Ap57
   03DC                    1536 mul_Ap57:
   03DC 5D            [ 2] 1537                  TSTB
   03DD 2A 06         [ 3] 1538                  BPL           mul_Ap_Bp57
   03DF 50            [ 2] 1539                  NEGB
                           1540  .globl mul_An_Bp57
   03E0                    1541 mul_An_Bp57:
   03E0 3D            [11] 1542                  MUL
   03E1 53            [ 2] 1543                  COMB                              ; here we can use this as negd
   03E2 43            [ 2] 1544                  COMA                              ; since the low nibble of b doesn't interest us
   03E3 20 01         [ 3] 1545                  BRA           mul_end57
                           1546  .globl mul_Ap_Bp57
   03E5                    1547 mul_Ap_Bp57:
                           1548  .globl mul_An_Bn57
   03E5                    1549 mul_An_Bn57:
   03E5 3D            [11] 1550                  MUL
                           1551  .globl mul_end57
   03E6                    1552 mul_end57:
   03E6 58            [ 2] 1553                  ASLB                              ; this divides d by 64
   03E7 49            [ 2] 1554                  ROLA
   03E8 58            [ 2] 1555                  ASLB
   03E9 49            [ 2] 1556                  ROLA
                           1557 
                           1558 ; macro call ->                  SUB_A_FROM _N10x
   03EA 40            [ 2] 1559                  NEGA
                           1560 ; macro call ->                  ADD_A_TO      _N10x
   03EB BB 00 26      [ 5] 1561                  ADDA          _N10x
                           1562 ; macro call ->                  STORE_A       _N10x
   03EE B7 00 26      [ 5] 1563                  STA           _N10x
                           1564 ; macro call ->                  STORE_A_NEG _N10xi
   03F1 40            [ 2] 1565                  NEGA
   03F2 B7 00 50      [ 5] 1566                  STA           _N10xi
                           1567  .globl noN102d
   03F5                    1568 noN102d:
   03F5 39            [ 5] 1569                     RTS     
                           1570 
                           1571 
                           1572 
                           1573  .globl init_all
   03F6                    1574 init_all:
   03F6 8E 00 A9      [ 3] 1575                     LDX      #_cosinus3d 
   03F9 CE 00 E9      [ 3] 1576                     LDU      #_sinus3d 
   03FC F6 00 07      [ 5] 1577                     LDB      _angle_x 
   03FF A6 85         [ 5] 1578                     LDA      B, X 
   0401 B7 00 01      [ 5] 1579                     STA      _cosx 
   0404 A6 C5         [ 5] 1580                     LDA      B, U 
   0406 B7 00 02      [ 5] 1581                     STA      _sinx 
   0409 F6 00 08      [ 5] 1582                     LDB      _angle_y 
   040C A6 85         [ 5] 1583                     LDA      B, X 
   040E B7 00 03      [ 5] 1584                     STA      _cosy 
   0411 A6 C5         [ 5] 1585                     LDA      B, U 
   0413 B7 00 04      [ 5] 1586                     STA      _siny 
   0416 F6 00 09      [ 5] 1587                     LDB      _angle_z 
   0419 A6 85         [ 5] 1588                     LDA      B, X 
   041B B7 00 05      [ 5] 1589                     STA      _cosz 
   041E A6 C5         [ 5] 1590                     LDA      B, U 
   0420 B7 00 06      [ 5] 1591                     STA      _sinz 
                           1592 
                     0001  1593 DO_Z_KOORDINATE = 1
                           1594 
   0423 B6 00 0B      [ 5] 1595  lda _vectorBits+1
   0426 85 01         [ 2] 1596  bita #TEST_0_0_0
   0428 27 16         [ 3] 1597  beq no000
                           1598 ; macro call ->                     INIT_0_0_0_A  
                           1599 ; macro call ->                  CALC_0_0_0_A _000x, _000y, _000z, _000xi, _000yi, _000zi
   042A 4F            [ 2] 1600                  CLRA
   042B B7 00 0E      [ 5] 1601                  STA           _000x
   042E B7 00 0F      [ 5] 1602                  STA           _000y
   0431 B7 00 38      [ 5] 1603                  STA           _000xi
   0434 B7 00 39      [ 5] 1604                  STA           _000yi
   0437 B7 00 10      [ 5] 1605                  STA _000z
   043A B7 00 3A      [ 5] 1606                  STA _000zi
   043D B6 00 0B      [ 5] 1607  lda _vectorBits+1
                           1608  .globl no000
   0440                    1609 no000:
   0440 85 02         [ 2] 1610  bita #TEST_1_0_0
   0442 27 52         [ 3] 1611  beq no100
                           1612 ; macro call ->                     INIT_1_0_0_A  
                           1613 ; macro call ->                  CALC_1_0_0_A _100x, _100y, _100z, _100xi, _100yi, _100zi
   0444 4F            [ 2] 1614                  CLRA
   0445 B7 00 13      [ 5] 1615                  STA _100z
   0448 B7 00 3D      [ 5] 1616                  STA _100zi
                           1617 ; macro call ->                  A_EQUALS_MUL _cosy, _sinz
   044B F6 00 06      [ 5] 1618                  LDB           _sinz
   044E B6 00 03      [ 5] 1619                  LDA           _cosy
   0451 2A 07         [ 3] 1620                  BPL           mul_Ap66
   0453 40            [ 2] 1621                  NEGA
   0454 5D            [ 2] 1622                  TSTB
   0455 2A 07         [ 3] 1623                  BPL           mul_An_Bp66
   0457 50            [ 2] 1624                  NEGB
   0458 20 09         [ 3] 1625                  BRA           mul_An_Bn66
                           1626  .globl mul_Ap66
   045A                    1627 mul_Ap66:
   045A 5D            [ 2] 1628                  TSTB
   045B 2A 06         [ 3] 1629                  BPL           mul_Ap_Bp66
   045D 50            [ 2] 1630                  NEGB
                           1631  .globl mul_An_Bp66
   045E                    1632 mul_An_Bp66:
   045E 3D            [11] 1633                  MUL
   045F 53            [ 2] 1634                  COMB                              ; here we can use this as negd
   0460 43            [ 2] 1635                  COMA                              ; since the low nibble of b doesn't interest us
   0461 20 01         [ 3] 1636                  BRA           mul_end66
                           1637  .globl mul_Ap_Bp66
   0463                    1638 mul_Ap_Bp66:
                           1639  .globl mul_An_Bn66
   0463                    1640 mul_An_Bn66:
   0463 3D            [11] 1641                  MUL
                           1642  .globl mul_end66
   0464                    1643 mul_end66:
   0464 58            [ 2] 1644                  ASLB                              ; this divides d by 64
   0465 49            [ 2] 1645                  ROLA
   0466 58            [ 2] 1646                  ASLB
   0467 49            [ 2] 1647                  ROLA
                           1648 
                           1649 ; macro call ->                  STORE_A _100y
   0468 B7 00 12      [ 5] 1650                  STA           _100y
                           1651 ; macro call ->                  STORE_A_NEG _100yi
   046B 40            [ 2] 1652                  NEGA
   046C B7 00 3C      [ 5] 1653                  STA           _100yi
                           1654 ; macro call ->                  A_EQUALS_MUL _cosy, _cosz
   046F F6 00 05      [ 5] 1655                  LDB           _cosz
   0472 B6 00 03      [ 5] 1656                  LDA           _cosy
   0475 2A 07         [ 3] 1657                  BPL           mul_Ap69
   0477 40            [ 2] 1658                  NEGA
   0478 5D            [ 2] 1659                  TSTB
   0479 2A 07         [ 3] 1660                  BPL           mul_An_Bp69
   047B 50            [ 2] 1661                  NEGB
   047C 20 09         [ 3] 1662                  BRA           mul_An_Bn69
                           1663  .globl mul_Ap69
   047E                    1664 mul_Ap69:
   047E 5D            [ 2] 1665                  TSTB
   047F 2A 06         [ 3] 1666                  BPL           mul_Ap_Bp69
   0481 50            [ 2] 1667                  NEGB
                           1668  .globl mul_An_Bp69
   0482                    1669 mul_An_Bp69:
   0482 3D            [11] 1670                  MUL
   0483 53            [ 2] 1671                  COMB                              ; here we can use this as negd
   0484 43            [ 2] 1672                  COMA                              ; since the low nibble of b doesn't interest us
   0485 20 01         [ 3] 1673                  BRA           mul_end69
                           1674  .globl mul_Ap_Bp69
   0487                    1675 mul_Ap_Bp69:
                           1676  .globl mul_An_Bn69
   0487                    1677 mul_An_Bn69:
   0487 3D            [11] 1678                  MUL
                           1679  .globl mul_end69
   0488                    1680 mul_end69:
   0488 58            [ 2] 1681                  ASLB                              ; this divides d by 64
   0489 49            [ 2] 1682                  ROLA
   048A 58            [ 2] 1683                  ASLB
   048B 49            [ 2] 1684                  ROLA
                           1685 
                           1686 ; macro call ->                  STORE_A _100x
   048C B7 00 11      [ 5] 1687                  STA           _100x
                           1688 ; macro call ->                  STORE_A_NEG _100xi
   048F 40            [ 2] 1689                  NEGA
   0490 B7 00 3B      [ 5] 1690                  STA           _100xi
   0493 B6 00 0B      [ 5] 1691  lda _vectorBits+1
                           1692  .globl no100
   0496                    1693 no100:
   0496 85 04         [ 2] 1694  bita #TEST_1_1_0
   0498 10 27 00 C6   [ 6] 1695  lbeq no110
                           1696 ; macro call ->                     INIT_1_1_0_A  
                           1697 ; macro call ->                  CALC_1_1_0_A _110x, _110y, _110z, _110xi, _110yi, _110zi
   049C B6 00 01      [ 5] 1698                  LDA _cosx
   049F B7 00 16      [ 5] 1699                  STA _110z
   04A2 40            [ 2] 1700                  NEGA
   04A3 B7 00 40      [ 5] 1701                  STA _110zi
   04A6 B6 00 02      [ 5] 1702                  LDA   _sinx
   04A9 40            [ 2] 1703                  NEGA
   04AA B7 00 00      [ 5] 1704                  STA   _helper
                           1705 ; macro call ->                  A_EQUALS_MUL _cosx, _siny
   04AD F6 00 04      [ 5] 1706                  LDB           _siny
   04B0 B6 00 01      [ 5] 1707                  LDA           _cosx
   04B3 2A 07         [ 3] 1708                  BPL           mul_Ap74
   04B5 40            [ 2] 1709                  NEGA
   04B6 5D            [ 2] 1710                  TSTB
   04B7 2A 07         [ 3] 1711                  BPL           mul_An_Bp74
   04B9 50            [ 2] 1712                  NEGB
   04BA 20 09         [ 3] 1713                  BRA           mul_An_Bn74
                           1714  .globl mul_Ap74
   04BC                    1715 mul_Ap74:
   04BC 5D            [ 2] 1716                  TSTB
   04BD 2A 06         [ 3] 1717                  BPL           mul_Ap_Bp74
   04BF 50            [ 2] 1718                  NEGB
                           1719  .globl mul_An_Bp74
   04C0                    1720 mul_An_Bp74:
   04C0 3D            [11] 1721                  MUL
   04C1 53            [ 2] 1722                  COMB                              ; here we can use this as negd
   04C2 43            [ 2] 1723                  COMA                              ; since the low nibble of b doesn't interest us
   04C3 20 01         [ 3] 1724                  BRA           mul_end74
                           1725  .globl mul_Ap_Bp74
   04C5                    1726 mul_Ap_Bp74:
                           1727  .globl mul_An_Bn74
   04C5                    1728 mul_An_Bn74:
   04C5 3D            [11] 1729                  MUL
                           1730  .globl mul_end74
   04C6                    1731 mul_end74:
   04C6 58            [ 2] 1732                  ASLB                              ; this divides d by 64
   04C7 49            [ 2] 1733                  ROLA
   04C8 58            [ 2] 1734                  ASLB
   04C9 49            [ 2] 1735                  ROLA
                           1736 
   04CA BB 00 03      [ 5] 1737                  ADDA  _cosy
                           1738 ; macro call ->                  STORE_A _110x
   04CD B7 00 14      [ 5] 1739                  STA           _110x
                           1740 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   04D0 F6 00 05      [ 5] 1741                  LDB           _cosz
   04D3 B6 00 00      [ 5] 1742                  LDA           _helper
   04D6 2A 07         [ 3] 1743                  BPL           mul_Ap76
   04D8 40            [ 2] 1744                  NEGA
   04D9 5D            [ 2] 1745                  TSTB
   04DA 2A 07         [ 3] 1746                  BPL           mul_An_Bp76
   04DC 50            [ 2] 1747                  NEGB
   04DD 20 09         [ 3] 1748                  BRA           mul_An_Bn76
                           1749  .globl mul_Ap76
   04DF                    1750 mul_Ap76:
   04DF 5D            [ 2] 1751                  TSTB
   04E0 2A 06         [ 3] 1752                  BPL           mul_Ap_Bp76
   04E2 50            [ 2] 1753                  NEGB
                           1754  .globl mul_An_Bp76
   04E3                    1755 mul_An_Bp76:
   04E3 3D            [11] 1756                  MUL
   04E4 53            [ 2] 1757                  COMB                              ; here we can use this as negd
   04E5 43            [ 2] 1758                  COMA                              ; since the low nibble of b doesn't interest us
   04E6 20 01         [ 3] 1759                  BRA           mul_end76
                           1760  .globl mul_Ap_Bp76
   04E8                    1761 mul_Ap_Bp76:
                           1762  .globl mul_An_Bn76
   04E8                    1763 mul_An_Bn76:
   04E8 3D            [11] 1764                  MUL
                           1765  .globl mul_end76
   04E9                    1766 mul_end76:
   04E9 58            [ 2] 1767                  ASLB                              ; this divides d by 64
   04EA 49            [ 2] 1768                  ROLA
   04EB 58            [ 2] 1769                  ASLB
   04EC 49            [ 2] 1770                  ROLA
                           1771 
                           1772 ; macro call ->                  STORE_A _110y
   04ED B7 00 15      [ 5] 1773                  STA           _110y
                           1774 ; macro call ->                  A_EQUALS_MUL _110x, _sinz
   04F0 F6 00 06      [ 5] 1775                  LDB           _sinz
   04F3 B6 00 14      [ 5] 1776                  LDA           _110x
   04F6 2A 07         [ 3] 1777                  BPL           mul_Ap78
   04F8 40            [ 2] 1778                  NEGA
   04F9 5D            [ 2] 1779                  TSTB
   04FA 2A 07         [ 3] 1780                  BPL           mul_An_Bp78
   04FC 50            [ 2] 1781                  NEGB
   04FD 20 09         [ 3] 1782                  BRA           mul_An_Bn78
                           1783  .globl mul_Ap78
   04FF                    1784 mul_Ap78:
   04FF 5D            [ 2] 1785                  TSTB
   0500 2A 06         [ 3] 1786                  BPL           mul_Ap_Bp78
   0502 50            [ 2] 1787                  NEGB
                           1788  .globl mul_An_Bp78
   0503                    1789 mul_An_Bp78:
   0503 3D            [11] 1790                  MUL
   0504 53            [ 2] 1791                  COMB                              ; here we can use this as negd
   0505 43            [ 2] 1792                  COMA                              ; since the low nibble of b doesn't interest us
   0506 20 01         [ 3] 1793                  BRA           mul_end78
                           1794  .globl mul_Ap_Bp78
   0508                    1795 mul_Ap_Bp78:
                           1796  .globl mul_An_Bn78
   0508                    1797 mul_An_Bn78:
   0508 3D            [11] 1798                  MUL
                           1799  .globl mul_end78
   0509                    1800 mul_end78:
   0509 58            [ 2] 1801                  ASLB                              ; this divides d by 64
   050A 49            [ 2] 1802                  ROLA
   050B 58            [ 2] 1803                  ASLB
   050C 49            [ 2] 1804                  ROLA
                           1805 
                           1806 ; macro call ->                  ADD_A_TO _110y
   050D BB 00 15      [ 5] 1807                  ADDA          _110y
                           1808 ; macro call ->                  STORE_A       _110y
   0510 B7 00 15      [ 5] 1809                  STA           _110y
                           1810 ; macro call ->                  STORE_A_NEG _110yi
   0513 40            [ 2] 1811                  NEGA
   0514 B7 00 3F      [ 5] 1812                  STA           _110yi
                           1813 ; macro call ->                  A_EQUALS_MUL _110x, _cosz
   0517 F6 00 05      [ 5] 1814                  LDB           _cosz
   051A B6 00 14      [ 5] 1815                  LDA           _110x
   051D 2A 07         [ 3] 1816                  BPL           mul_Ap82
   051F 40            [ 2] 1817                  NEGA
   0520 5D            [ 2] 1818                  TSTB
   0521 2A 07         [ 3] 1819                  BPL           mul_An_Bp82
   0523 50            [ 2] 1820                  NEGB
   0524 20 09         [ 3] 1821                  BRA           mul_An_Bn82
                           1822  .globl mul_Ap82
   0526                    1823 mul_Ap82:
   0526 5D            [ 2] 1824                  TSTB
   0527 2A 06         [ 3] 1825                  BPL           mul_Ap_Bp82
   0529 50            [ 2] 1826                  NEGB
                           1827  .globl mul_An_Bp82
   052A                    1828 mul_An_Bp82:
   052A 3D            [11] 1829                  MUL
   052B 53            [ 2] 1830                  COMB                              ; here we can use this as negd
   052C 43            [ 2] 1831                  COMA                              ; since the low nibble of b doesn't interest us
   052D 20 01         [ 3] 1832                  BRA           mul_end82
                           1833  .globl mul_Ap_Bp82
   052F                    1834 mul_Ap_Bp82:
                           1835  .globl mul_An_Bn82
   052F                    1836 mul_An_Bn82:
   052F 3D            [11] 1837                  MUL
                           1838  .globl mul_end82
   0530                    1839 mul_end82:
   0530 58            [ 2] 1840                  ASLB                              ; this divides d by 64
   0531 49            [ 2] 1841                  ROLA
   0532 58            [ 2] 1842                  ASLB
   0533 49            [ 2] 1843                  ROLA
                           1844 
                           1845 ; macro call ->                  STORE_A _110x
   0534 B7 00 14      [ 5] 1846                  STA           _110x
                           1847 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   0537 F6 00 06      [ 5] 1848                  LDB           _sinz
   053A B6 00 00      [ 5] 1849                  LDA           _helper
   053D 2A 07         [ 3] 1850                  BPL           mul_Ap84
   053F 40            [ 2] 1851                  NEGA
   0540 5D            [ 2] 1852                  TSTB
   0541 2A 07         [ 3] 1853                  BPL           mul_An_Bp84
   0543 50            [ 2] 1854                  NEGB
   0544 20 09         [ 3] 1855                  BRA           mul_An_Bn84
                           1856  .globl mul_Ap84
   0546                    1857 mul_Ap84:
   0546 5D            [ 2] 1858                  TSTB
   0547 2A 06         [ 3] 1859                  BPL           mul_Ap_Bp84
   0549 50            [ 2] 1860                  NEGB
                           1861  .globl mul_An_Bp84
   054A                    1862 mul_An_Bp84:
   054A 3D            [11] 1863                  MUL
   054B 53            [ 2] 1864                  COMB                              ; here we can use this as negd
   054C 43            [ 2] 1865                  COMA                              ; since the low nibble of b doesn't interest us
   054D 20 01         [ 3] 1866                  BRA           mul_end84
                           1867  .globl mul_Ap_Bp84
   054F                    1868 mul_Ap_Bp84:
                           1869  .globl mul_An_Bn84
   054F                    1870 mul_An_Bn84:
   054F 3D            [11] 1871                  MUL
                           1872  .globl mul_end84
   0550                    1873 mul_end84:
   0550 58            [ 2] 1874                  ASLB                              ; this divides d by 64
   0551 49            [ 2] 1875                  ROLA
   0552 58            [ 2] 1876                  ASLB
   0553 49            [ 2] 1877                  ROLA
                           1878 
                           1879 ; macro call ->                  SUB_A_FROM _110x
   0554 40            [ 2] 1880                  NEGA
                           1881 ; macro call ->                  ADD_A_TO      _110x
   0555 BB 00 14      [ 5] 1882                  ADDA          _110x
                           1883 ; macro call ->                  STORE_A       _110x
   0558 B7 00 14      [ 5] 1884                  STA           _110x
                           1885 ; macro call ->                  STORE_A_NEG _110xi
   055B 40            [ 2] 1886                  NEGA
   055C B7 00 3E      [ 5] 1887                  STA           _110xi
   055F B6 00 0B      [ 5] 1888  lda _vectorBits+1
                           1889  .globl no110
   0562                    1890 no110:
   0562 85 08         [ 2] 1891  bita #TEST_1_0_1
   0564 10 27 00 BF   [ 6] 1892  lbeq no101
                           1893 ; macro call ->                     INIT_1_0_1_A  
                           1894 ; macro call ->                  CALC_1_0_1_A _101x, _101y, _101z, _101xi, _101yi, _101zi
   0568 B6 00 02      [ 5] 1895                  LDA _sinx
   056B B7 00 19      [ 5] 1896                  STA _101z
   056E 40            [ 2] 1897                  NEGA
   056F B7 00 43      [ 5] 1898                  STA _101zi
                           1899 ; macro call ->                  A_EQUALS_MUL _sinx, _siny
   0572 F6 00 04      [ 5] 1900                  LDB           _siny
   0575 B6 00 02      [ 5] 1901                  LDA           _sinx
   0578 2A 07         [ 3] 1902                  BPL           mul_Ap91
   057A 40            [ 2] 1903                  NEGA
   057B 5D            [ 2] 1904                  TSTB
   057C 2A 07         [ 3] 1905                  BPL           mul_An_Bp91
   057E 50            [ 2] 1906                  NEGB
   057F 20 09         [ 3] 1907                  BRA           mul_An_Bn91
                           1908  .globl mul_Ap91
   0581                    1909 mul_Ap91:
   0581 5D            [ 2] 1910                  TSTB
   0582 2A 06         [ 3] 1911                  BPL           mul_Ap_Bp91
   0584 50            [ 2] 1912                  NEGB
                           1913  .globl mul_An_Bp91
   0585                    1914 mul_An_Bp91:
   0585 3D            [11] 1915                  MUL
   0586 53            [ 2] 1916                  COMB                              ; here we can use this as negd
   0587 43            [ 2] 1917                  COMA                              ; since the low nibble of b doesn't interest us
   0588 20 01         [ 3] 1918                  BRA           mul_end91
                           1919  .globl mul_Ap_Bp91
   058A                    1920 mul_Ap_Bp91:
                           1921  .globl mul_An_Bn91
   058A                    1922 mul_An_Bn91:
   058A 3D            [11] 1923                  MUL
                           1924  .globl mul_end91
   058B                    1925 mul_end91:
   058B 58            [ 2] 1926                  ASLB                              ; this divides d by 64
   058C 49            [ 2] 1927                  ROLA
   058D 58            [ 2] 1928                  ASLB
   058E 49            [ 2] 1929                  ROLA
                           1930 
   058F BB 00 03      [ 5] 1931                  ADDA   _cosy
                           1932 ; macro call ->                  STORE_A _101x
   0592 B7 00 17      [ 5] 1933                  STA           _101x
                           1934 ; macro call ->                  A_EQUALS_MUL _cosx, _cosz
   0595 F6 00 05      [ 5] 1935                  LDB           _cosz
   0598 B6 00 01      [ 5] 1936                  LDA           _cosx
   059B 2A 07         [ 3] 1937                  BPL           mul_Ap93
   059D 40            [ 2] 1938                  NEGA
   059E 5D            [ 2] 1939                  TSTB
   059F 2A 07         [ 3] 1940                  BPL           mul_An_Bp93
   05A1 50            [ 2] 1941                  NEGB
   05A2 20 09         [ 3] 1942                  BRA           mul_An_Bn93
                           1943  .globl mul_Ap93
   05A4                    1944 mul_Ap93:
   05A4 5D            [ 2] 1945                  TSTB
   05A5 2A 06         [ 3] 1946                  BPL           mul_Ap_Bp93
   05A7 50            [ 2] 1947                  NEGB
                           1948  .globl mul_An_Bp93
   05A8                    1949 mul_An_Bp93:
   05A8 3D            [11] 1950                  MUL
   05A9 53            [ 2] 1951                  COMB                              ; here we can use this as negd
   05AA 43            [ 2] 1952                  COMA                              ; since the low nibble of b doesn't interest us
   05AB 20 01         [ 3] 1953                  BRA           mul_end93
                           1954  .globl mul_Ap_Bp93
   05AD                    1955 mul_Ap_Bp93:
                           1956  .globl mul_An_Bn93
   05AD                    1957 mul_An_Bn93:
   05AD 3D            [11] 1958                  MUL
                           1959  .globl mul_end93
   05AE                    1960 mul_end93:
   05AE 58            [ 2] 1961                  ASLB                              ; this divides d by 64
   05AF 49            [ 2] 1962                  ROLA
   05B0 58            [ 2] 1963                  ASLB
   05B1 49            [ 2] 1964                  ROLA
                           1965 
                           1966 ; macro call ->                  STORE_A _101y
   05B2 B7 00 18      [ 5] 1967                  STA           _101y
                           1968 ; macro call ->                  A_EQUALS_MUL _101x, _sinz
   05B5 F6 00 06      [ 5] 1969                  LDB           _sinz
   05B8 B6 00 17      [ 5] 1970                  LDA           _101x
   05BB 2A 07         [ 3] 1971                  BPL           mul_Ap95
   05BD 40            [ 2] 1972                  NEGA
   05BE 5D            [ 2] 1973                  TSTB
   05BF 2A 07         [ 3] 1974                  BPL           mul_An_Bp95
   05C1 50            [ 2] 1975                  NEGB
   05C2 20 09         [ 3] 1976                  BRA           mul_An_Bn95
                           1977  .globl mul_Ap95
   05C4                    1978 mul_Ap95:
   05C4 5D            [ 2] 1979                  TSTB
   05C5 2A 06         [ 3] 1980                  BPL           mul_Ap_Bp95
   05C7 50            [ 2] 1981                  NEGB
                           1982  .globl mul_An_Bp95
   05C8                    1983 mul_An_Bp95:
   05C8 3D            [11] 1984                  MUL
   05C9 53            [ 2] 1985                  COMB                              ; here we can use this as negd
   05CA 43            [ 2] 1986                  COMA                              ; since the low nibble of b doesn't interest us
   05CB 20 01         [ 3] 1987                  BRA           mul_end95
                           1988  .globl mul_Ap_Bp95
   05CD                    1989 mul_Ap_Bp95:
                           1990  .globl mul_An_Bn95
   05CD                    1991 mul_An_Bn95:
   05CD 3D            [11] 1992                  MUL
                           1993  .globl mul_end95
   05CE                    1994 mul_end95:
   05CE 58            [ 2] 1995                  ASLB                              ; this divides d by 64
   05CF 49            [ 2] 1996                  ROLA
   05D0 58            [ 2] 1997                  ASLB
   05D1 49            [ 2] 1998                  ROLA
                           1999 
                           2000 ; macro call ->                  ADD_A_TO _101y
   05D2 BB 00 18      [ 5] 2001                  ADDA          _101y
                           2002 ; macro call ->                  STORE_A       _101y
   05D5 B7 00 18      [ 5] 2003                  STA           _101y
                           2004 ; macro call ->                  STORE_A_NEG _101yi
   05D8 40            [ 2] 2005                  NEGA
   05D9 B7 00 42      [ 5] 2006                  STA           _101yi
                           2007 ; macro call ->                  A_EQUALS_MUL _101x, _cosz
   05DC F6 00 05      [ 5] 2008                  LDB           _cosz
   05DF B6 00 17      [ 5] 2009                  LDA           _101x
   05E2 2A 07         [ 3] 2010                  BPL           mul_Ap99
   05E4 40            [ 2] 2011                  NEGA
   05E5 5D            [ 2] 2012                  TSTB
   05E6 2A 07         [ 3] 2013                  BPL           mul_An_Bp99
   05E8 50            [ 2] 2014                  NEGB
   05E9 20 09         [ 3] 2015                  BRA           mul_An_Bn99
                           2016  .globl mul_Ap99
   05EB                    2017 mul_Ap99:
   05EB 5D            [ 2] 2018                  TSTB
   05EC 2A 06         [ 3] 2019                  BPL           mul_Ap_Bp99
   05EE 50            [ 2] 2020                  NEGB
                           2021  .globl mul_An_Bp99
   05EF                    2022 mul_An_Bp99:
   05EF 3D            [11] 2023                  MUL
   05F0 53            [ 2] 2024                  COMB                              ; here we can use this as negd
   05F1 43            [ 2] 2025                  COMA                              ; since the low nibble of b doesn't interest us
   05F2 20 01         [ 3] 2026                  BRA           mul_end99
                           2027  .globl mul_Ap_Bp99
   05F4                    2028 mul_Ap_Bp99:
                           2029  .globl mul_An_Bn99
   05F4                    2030 mul_An_Bn99:
   05F4 3D            [11] 2031                  MUL
                           2032  .globl mul_end99
   05F5                    2033 mul_end99:
   05F5 58            [ 2] 2034                  ASLB                              ; this divides d by 64
   05F6 49            [ 2] 2035                  ROLA
   05F7 58            [ 2] 2036                  ASLB
   05F8 49            [ 2] 2037                  ROLA
                           2038 
                           2039 ; macro call ->                  STORE_A _101x
   05F9 B7 00 17      [ 5] 2040                  STA           _101x
                           2041 ; macro call ->                  A_EQUALS_MUL _cosx, _sinz
   05FC F6 00 06      [ 5] 2042                  LDB           _sinz
   05FF B6 00 01      [ 5] 2043                  LDA           _cosx
   0602 2A 07         [ 3] 2044                  BPL           mul_Ap101
   0604 40            [ 2] 2045                  NEGA
   0605 5D            [ 2] 2046                  TSTB
   0606 2A 07         [ 3] 2047                  BPL           mul_An_Bp101
   0608 50            [ 2] 2048                  NEGB
   0609 20 09         [ 3] 2049                  BRA           mul_An_Bn101
                           2050  .globl mul_Ap101
   060B                    2051 mul_Ap101:
   060B 5D            [ 2] 2052                  TSTB
   060C 2A 06         [ 3] 2053                  BPL           mul_Ap_Bp101
   060E 50            [ 2] 2054                  NEGB
                           2055  .globl mul_An_Bp101
   060F                    2056 mul_An_Bp101:
   060F 3D            [11] 2057                  MUL
   0610 53            [ 2] 2058                  COMB                              ; here we can use this as negd
   0611 43            [ 2] 2059                  COMA                              ; since the low nibble of b doesn't interest us
   0612 20 01         [ 3] 2060                  BRA           mul_end101
                           2061  .globl mul_Ap_Bp101
   0614                    2062 mul_Ap_Bp101:
                           2063  .globl mul_An_Bn101
   0614                    2064 mul_An_Bn101:
   0614 3D            [11] 2065                  MUL
                           2066  .globl mul_end101
   0615                    2067 mul_end101:
   0615 58            [ 2] 2068                  ASLB                              ; this divides d by 64
   0616 49            [ 2] 2069                  ROLA
   0617 58            [ 2] 2070                  ASLB
   0618 49            [ 2] 2071                  ROLA
                           2072 
                           2073 ; macro call ->                  SUB_A_FROM _101x
   0619 40            [ 2] 2074                  NEGA
                           2075 ; macro call ->                  ADD_A_TO      _101x
   061A BB 00 17      [ 5] 2076                  ADDA          _101x
                           2077 ; macro call ->                  STORE_A       _101x
   061D B7 00 17      [ 5] 2078                  STA           _101x
                           2079 ; macro call ->                  STORE_A_NEG _101xi
   0620 40            [ 2] 2080                  NEGA
   0621 B7 00 41      [ 5] 2081                  STA           _101xi
   0624 B6 00 0B      [ 5] 2082  lda _vectorBits+1
                           2083  .globl no101
   0627                    2084 no101:
   0627 85 10         [ 2] 2085  bita #TEST_1_1_1
   0629 10 27 00 D4   [ 6] 2086  lbeq no111
                           2087 ; macro call ->                     INIT_1_1_1_A  
                           2088 ; macro call ->                  CALC_1_1_1_A _111x, _111y, _111z, _111xi, _111yi, _111zi
   062D B6 00 01      [ 5] 2089                  LDA _cosx
   0630 BB 00 02      [ 5] 2090                  ADDA _sinx
   0633 B7 00 1C      [ 5] 2091                  STA _111z
   0636 40            [ 2] 2092                  NEGA
   0637 B7 00 46      [ 5] 2093                  STA _111zi
   063A B6 00 02      [ 5] 2094                  LDA   _sinx
   063D BB 00 01      [ 5] 2095                  ADDA  _cosx
   0640 B7 00 1C      [ 5] 2096                  STA   _111z
                           2097 
   0643 B6 00 01      [ 5] 2098                  LDA   _cosx
   0646 B0 00 02      [ 5] 2099                  SUBA  _sinx
   0649 B7 00 00      [ 5] 2100                  STA   _helper
                           2101 
                           2102 ; macro call ->                  A_EQUALS_MUL _111z, _siny
   064C F6 00 04      [ 5] 2103                  LDB           _siny
   064F B6 00 1C      [ 5] 2104                  LDA           _111z
   0652 2A 07         [ 3] 2105                  BPL           mul_Ap108
   0654 40            [ 2] 2106                  NEGA
   0655 5D            [ 2] 2107                  TSTB
   0656 2A 07         [ 3] 2108                  BPL           mul_An_Bp108
   0658 50            [ 2] 2109                  NEGB
   0659 20 09         [ 3] 2110                  BRA           mul_An_Bn108
                           2111  .globl mul_Ap108
   065B                    2112 mul_Ap108:
   065B 5D            [ 2] 2113                  TSTB
   065C 2A 06         [ 3] 2114                  BPL           mul_Ap_Bp108
   065E 50            [ 2] 2115                  NEGB
                           2116  .globl mul_An_Bp108
   065F                    2117 mul_An_Bp108:
   065F 3D            [11] 2118                  MUL
   0660 53            [ 2] 2119                  COMB                              ; here we can use this as negd
   0661 43            [ 2] 2120                  COMA                              ; since the low nibble of b doesn't interest us
   0662 20 01         [ 3] 2121                  BRA           mul_end108
                           2122  .globl mul_Ap_Bp108
   0664                    2123 mul_Ap_Bp108:
                           2124  .globl mul_An_Bn108
   0664                    2125 mul_An_Bn108:
   0664 3D            [11] 2126                  MUL
                           2127  .globl mul_end108
   0665                    2128 mul_end108:
   0665 58            [ 2] 2129                  ASLB                              ; this divides d by 64
   0666 49            [ 2] 2130                  ROLA
   0667 58            [ 2] 2131                  ASLB
   0668 49            [ 2] 2132                  ROLA
                           2133 
   0669 BB 00 03      [ 5] 2134                  ADDA  _cosy
                           2135 ; macro call ->                  STORE_A _111x
   066C B7 00 1A      [ 5] 2136                  STA           _111x
                           2137 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   066F F6 00 05      [ 5] 2138                  LDB           _cosz
   0672 B6 00 00      [ 5] 2139                  LDA           _helper
   0675 2A 07         [ 3] 2140                  BPL           mul_Ap110
   0677 40            [ 2] 2141                  NEGA
   0678 5D            [ 2] 2142                  TSTB
   0679 2A 07         [ 3] 2143                  BPL           mul_An_Bp110
   067B 50            [ 2] 2144                  NEGB
   067C 20 09         [ 3] 2145                  BRA           mul_An_Bn110
                           2146  .globl mul_Ap110
   067E                    2147 mul_Ap110:
   067E 5D            [ 2] 2148                  TSTB
   067F 2A 06         [ 3] 2149                  BPL           mul_Ap_Bp110
   0681 50            [ 2] 2150                  NEGB
                           2151  .globl mul_An_Bp110
   0682                    2152 mul_An_Bp110:
   0682 3D            [11] 2153                  MUL
   0683 53            [ 2] 2154                  COMB                              ; here we can use this as negd
   0684 43            [ 2] 2155                  COMA                              ; since the low nibble of b doesn't interest us
   0685 20 01         [ 3] 2156                  BRA           mul_end110
                           2157  .globl mul_Ap_Bp110
   0687                    2158 mul_Ap_Bp110:
                           2159  .globl mul_An_Bn110
   0687                    2160 mul_An_Bn110:
   0687 3D            [11] 2161                  MUL
                           2162  .globl mul_end110
   0688                    2163 mul_end110:
   0688 58            [ 2] 2164                  ASLB                              ; this divides d by 64
   0689 49            [ 2] 2165                  ROLA
   068A 58            [ 2] 2166                  ASLB
   068B 49            [ 2] 2167                  ROLA
                           2168 
                           2169 ; macro call ->                  STORE_A _111y
   068C B7 00 1B      [ 5] 2170                  STA           _111y
                           2171 ; macro call ->                  A_EQUALS_MUL _111x, _sinz
   068F F6 00 06      [ 5] 2172                  LDB           _sinz
   0692 B6 00 1A      [ 5] 2173                  LDA           _111x
   0695 2A 07         [ 3] 2174                  BPL           mul_Ap112
   0697 40            [ 2] 2175                  NEGA
   0698 5D            [ 2] 2176                  TSTB
   0699 2A 07         [ 3] 2177                  BPL           mul_An_Bp112
   069B 50            [ 2] 2178                  NEGB
   069C 20 09         [ 3] 2179                  BRA           mul_An_Bn112
                           2180  .globl mul_Ap112
   069E                    2181 mul_Ap112:
   069E 5D            [ 2] 2182                  TSTB
   069F 2A 06         [ 3] 2183                  BPL           mul_Ap_Bp112
   06A1 50            [ 2] 2184                  NEGB
                           2185  .globl mul_An_Bp112
   06A2                    2186 mul_An_Bp112:
   06A2 3D            [11] 2187                  MUL
   06A3 53            [ 2] 2188                  COMB                              ; here we can use this as negd
   06A4 43            [ 2] 2189                  COMA                              ; since the low nibble of b doesn't interest us
   06A5 20 01         [ 3] 2190                  BRA           mul_end112
                           2191  .globl mul_Ap_Bp112
   06A7                    2192 mul_Ap_Bp112:
                           2193  .globl mul_An_Bn112
   06A7                    2194 mul_An_Bn112:
   06A7 3D            [11] 2195                  MUL
                           2196  .globl mul_end112
   06A8                    2197 mul_end112:
   06A8 58            [ 2] 2198                  ASLB                              ; this divides d by 64
   06A9 49            [ 2] 2199                  ROLA
   06AA 58            [ 2] 2200                  ASLB
   06AB 49            [ 2] 2201                  ROLA
                           2202 
                           2203 ; macro call ->                  ADD_A_TO _111y
   06AC BB 00 1B      [ 5] 2204                  ADDA          _111y
                           2205 ; macro call ->                  STORE_A       _111y
   06AF B7 00 1B      [ 5] 2206                  STA           _111y
                           2207 ; macro call ->                  STORE_A_NEG _111yi
   06B2 40            [ 2] 2208                  NEGA
   06B3 B7 00 45      [ 5] 2209                  STA           _111yi
                           2210 ; macro call ->                  A_EQUALS_MUL _111x, _cosz
   06B6 F6 00 05      [ 5] 2211                  LDB           _cosz
   06B9 B6 00 1A      [ 5] 2212                  LDA           _111x
   06BC 2A 07         [ 3] 2213                  BPL           mul_Ap116
   06BE 40            [ 2] 2214                  NEGA
   06BF 5D            [ 2] 2215                  TSTB
   06C0 2A 07         [ 3] 2216                  BPL           mul_An_Bp116
   06C2 50            [ 2] 2217                  NEGB
   06C3 20 09         [ 3] 2218                  BRA           mul_An_Bn116
                           2219  .globl mul_Ap116
   06C5                    2220 mul_Ap116:
   06C5 5D            [ 2] 2221                  TSTB
   06C6 2A 06         [ 3] 2222                  BPL           mul_Ap_Bp116
   06C8 50            [ 2] 2223                  NEGB
                           2224  .globl mul_An_Bp116
   06C9                    2225 mul_An_Bp116:
   06C9 3D            [11] 2226                  MUL
   06CA 53            [ 2] 2227                  COMB                              ; here we can use this as negd
   06CB 43            [ 2] 2228                  COMA                              ; since the low nibble of b doesn't interest us
   06CC 20 01         [ 3] 2229                  BRA           mul_end116
                           2230  .globl mul_Ap_Bp116
   06CE                    2231 mul_Ap_Bp116:
                           2232  .globl mul_An_Bn116
   06CE                    2233 mul_An_Bn116:
   06CE 3D            [11] 2234                  MUL
                           2235  .globl mul_end116
   06CF                    2236 mul_end116:
   06CF 58            [ 2] 2237                  ASLB                              ; this divides d by 64
   06D0 49            [ 2] 2238                  ROLA
   06D1 58            [ 2] 2239                  ASLB
   06D2 49            [ 2] 2240                  ROLA
                           2241 
                           2242 ; macro call ->                  STORE_A _111x
   06D3 B7 00 1A      [ 5] 2243                  STA           _111x
                           2244 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   06D6 F6 00 06      [ 5] 2245                  LDB           _sinz
   06D9 B6 00 00      [ 5] 2246                  LDA           _helper
   06DC 2A 07         [ 3] 2247                  BPL           mul_Ap118
   06DE 40            [ 2] 2248                  NEGA
   06DF 5D            [ 2] 2249                  TSTB
   06E0 2A 07         [ 3] 2250                  BPL           mul_An_Bp118
   06E2 50            [ 2] 2251                  NEGB
   06E3 20 09         [ 3] 2252                  BRA           mul_An_Bn118
                           2253  .globl mul_Ap118
   06E5                    2254 mul_Ap118:
   06E5 5D            [ 2] 2255                  TSTB
   06E6 2A 06         [ 3] 2256                  BPL           mul_Ap_Bp118
   06E8 50            [ 2] 2257                  NEGB
                           2258  .globl mul_An_Bp118
   06E9                    2259 mul_An_Bp118:
   06E9 3D            [11] 2260                  MUL
   06EA 53            [ 2] 2261                  COMB                              ; here we can use this as negd
   06EB 43            [ 2] 2262                  COMA                              ; since the low nibble of b doesn't interest us
   06EC 20 01         [ 3] 2263                  BRA           mul_end118
                           2264  .globl mul_Ap_Bp118
   06EE                    2265 mul_Ap_Bp118:
                           2266  .globl mul_An_Bn118
   06EE                    2267 mul_An_Bn118:
   06EE 3D            [11] 2268                  MUL
                           2269  .globl mul_end118
   06EF                    2270 mul_end118:
   06EF 58            [ 2] 2271                  ASLB                              ; this divides d by 64
   06F0 49            [ 2] 2272                  ROLA
   06F1 58            [ 2] 2273                  ASLB
   06F2 49            [ 2] 2274                  ROLA
                           2275 
                           2276 ; macro call ->                  SUB_A_FROM _111x
   06F3 40            [ 2] 2277                  NEGA
                           2278 ; macro call ->                  ADD_A_TO      _111x
   06F4 BB 00 1A      [ 5] 2279                  ADDA          _111x
                           2280 ; macro call ->                  STORE_A       _111x
   06F7 B7 00 1A      [ 5] 2281                  STA           _111x
                           2282 ; macro call ->                  STORE_A_NEG _111xi
   06FA 40            [ 2] 2283                  NEGA
   06FB B7 00 44      [ 5] 2284                  STA           _111xi
   06FE B6 00 0B      [ 5] 2285  lda _vectorBits+1
                           2286  .globl no111
   0701                    2287 no111:
   0701 85 20         [ 2] 2288  bita #TEST_0_1_0
   0703 10 27 00 BC   [ 6] 2289  lbeq no010
                           2290 ; macro call ->                     INIT_0_1_0_A  
                           2291 ; macro call ->                  CALC_0_1_0_A _010x, _010y, _010z, _010xi, _010yi, _010yi
   0707 B6 00 01      [ 5] 2292                  LDA _cosx
   070A B7 00 1F      [ 5] 2293                  STA _010z
   070D 40            [ 2] 2294                  NEGA
   070E B7 00 48      [ 5] 2295                  STA _010yi
                           2296 ; macro call ->                  A_EQUALS_MUL _cosx, _siny
   0711 F6 00 04      [ 5] 2297                  LDB           _siny
   0714 B6 00 01      [ 5] 2298                  LDA           _cosx
   0717 2A 07         [ 3] 2299                  BPL           mul_Ap125
   0719 40            [ 2] 2300                  NEGA
   071A 5D            [ 2] 2301                  TSTB
   071B 2A 07         [ 3] 2302                  BPL           mul_An_Bp125
   071D 50            [ 2] 2303                  NEGB
   071E 20 09         [ 3] 2304                  BRA           mul_An_Bn125
                           2305  .globl mul_Ap125
   0720                    2306 mul_Ap125:
   0720 5D            [ 2] 2307                  TSTB
   0721 2A 06         [ 3] 2308                  BPL           mul_Ap_Bp125
   0723 50            [ 2] 2309                  NEGB
                           2310  .globl mul_An_Bp125
   0724                    2311 mul_An_Bp125:
   0724 3D            [11] 2312                  MUL
   0725 53            [ 2] 2313                  COMB                              ; here we can use this as negd
   0726 43            [ 2] 2314                  COMA                              ; since the low nibble of b doesn't interest us
   0727 20 01         [ 3] 2315                  BRA           mul_end125
                           2316  .globl mul_Ap_Bp125
   0729                    2317 mul_Ap_Bp125:
                           2318  .globl mul_An_Bn125
   0729                    2319 mul_An_Bn125:
   0729 3D            [11] 2320                  MUL
                           2321  .globl mul_end125
   072A                    2322 mul_end125:
   072A 58            [ 2] 2323                  ASLB                              ; this divides d by 64
   072B 49            [ 2] 2324                  ROLA
   072C 58            [ 2] 2325                  ASLB
   072D 49            [ 2] 2326                  ROLA
                           2327 
                           2328 ; macro call ->                  STORE_A _010x
   072E B7 00 1D      [ 5] 2329                  STA           _010x
                           2330 ; macro call ->                  A_EQUALS_MUL _010x, _sinz
   0731 F6 00 06      [ 5] 2331                  LDB           _sinz
   0734 B6 00 1D      [ 5] 2332                  LDA           _010x
   0737 2A 07         [ 3] 2333                  BPL           mul_Ap127
   0739 40            [ 2] 2334                  NEGA
   073A 5D            [ 2] 2335                  TSTB
   073B 2A 07         [ 3] 2336                  BPL           mul_An_Bp127
   073D 50            [ 2] 2337                  NEGB
   073E 20 09         [ 3] 2338                  BRA           mul_An_Bn127
                           2339  .globl mul_Ap127
   0740                    2340 mul_Ap127:
   0740 5D            [ 2] 2341                  TSTB
   0741 2A 06         [ 3] 2342                  BPL           mul_Ap_Bp127
   0743 50            [ 2] 2343                  NEGB
                           2344  .globl mul_An_Bp127
   0744                    2345 mul_An_Bp127:
   0744 3D            [11] 2346                  MUL
   0745 53            [ 2] 2347                  COMB                              ; here we can use this as negd
   0746 43            [ 2] 2348                  COMA                              ; since the low nibble of b doesn't interest us
   0747 20 01         [ 3] 2349                  BRA           mul_end127
                           2350  .globl mul_Ap_Bp127
   0749                    2351 mul_Ap_Bp127:
                           2352  .globl mul_An_Bn127
   0749                    2353 mul_An_Bn127:
   0749 3D            [11] 2354                  MUL
                           2355  .globl mul_end127
   074A                    2356 mul_end127:
   074A 58            [ 2] 2357                  ASLB                              ; this divides d by 64
   074B 49            [ 2] 2358                  ROLA
   074C 58            [ 2] 2359                  ASLB
   074D 49            [ 2] 2360                  ROLA
                           2361 
                           2362 ; macro call ->                  STORE_A _010y
   074E B7 00 1E      [ 5] 2363                  STA           _010y
                           2364 ; macro call ->                  A_EQUALS_MUL _sinx, _cosz
   0751 F6 00 05      [ 5] 2365                  LDB           _cosz
   0754 B6 00 02      [ 5] 2366                  LDA           _sinx
   0757 2A 07         [ 3] 2367                  BPL           mul_Ap129
   0759 40            [ 2] 2368                  NEGA
   075A 5D            [ 2] 2369                  TSTB
   075B 2A 07         [ 3] 2370                  BPL           mul_An_Bp129
   075D 50            [ 2] 2371                  NEGB
   075E 20 09         [ 3] 2372                  BRA           mul_An_Bn129
                           2373  .globl mul_Ap129
   0760                    2374 mul_Ap129:
   0760 5D            [ 2] 2375                  TSTB
   0761 2A 06         [ 3] 2376                  BPL           mul_Ap_Bp129
   0763 50            [ 2] 2377                  NEGB
                           2378  .globl mul_An_Bp129
   0764                    2379 mul_An_Bp129:
   0764 3D            [11] 2380                  MUL
   0765 53            [ 2] 2381                  COMB                              ; here we can use this as negd
   0766 43            [ 2] 2382                  COMA                              ; since the low nibble of b doesn't interest us
   0767 20 01         [ 3] 2383                  BRA           mul_end129
                           2384  .globl mul_Ap_Bp129
   0769                    2385 mul_Ap_Bp129:
                           2386  .globl mul_An_Bn129
   0769                    2387 mul_An_Bn129:
   0769 3D            [11] 2388                  MUL
                           2389  .globl mul_end129
   076A                    2390 mul_end129:
   076A 58            [ 2] 2391                  ASLB                              ; this divides d by 64
   076B 49            [ 2] 2392                  ROLA
   076C 58            [ 2] 2393                  ASLB
   076D 49            [ 2] 2394                  ROLA
                           2395 
                           2396 ; macro call ->                  SUB_A_FROM _010y
   076E 40            [ 2] 2397                  NEGA
                           2398 ; macro call ->                  ADD_A_TO      _010y
   076F BB 00 1E      [ 5] 2399                  ADDA          _010y
                           2400 ; macro call ->                  STORE_A       _010y
   0772 B7 00 1E      [ 5] 2401                  STA           _010y
                           2402 ; macro call ->                  STORE_A_NEG _010yi
   0775 40            [ 2] 2403                  NEGA
   0776 B7 00 48      [ 5] 2404                  STA           _010yi
                           2405 ; macro call ->                  A_EQUALS_MUL _010x, _cosz
   0779 F6 00 05      [ 5] 2406                  LDB           _cosz
   077C B6 00 1D      [ 5] 2407                  LDA           _010x
   077F 2A 07         [ 3] 2408                  BPL           mul_Ap134
   0781 40            [ 2] 2409                  NEGA
   0782 5D            [ 2] 2410                  TSTB
   0783 2A 07         [ 3] 2411                  BPL           mul_An_Bp134
   0785 50            [ 2] 2412                  NEGB
   0786 20 09         [ 3] 2413                  BRA           mul_An_Bn134
                           2414  .globl mul_Ap134
   0788                    2415 mul_Ap134:
   0788 5D            [ 2] 2416                  TSTB
   0789 2A 06         [ 3] 2417                  BPL           mul_Ap_Bp134
   078B 50            [ 2] 2418                  NEGB
                           2419  .globl mul_An_Bp134
   078C                    2420 mul_An_Bp134:
   078C 3D            [11] 2421                  MUL
   078D 53            [ 2] 2422                  COMB                              ; here we can use this as negd
   078E 43            [ 2] 2423                  COMA                              ; since the low nibble of b doesn't interest us
   078F 20 01         [ 3] 2424                  BRA           mul_end134
                           2425  .globl mul_Ap_Bp134
   0791                    2426 mul_Ap_Bp134:
                           2427  .globl mul_An_Bn134
   0791                    2428 mul_An_Bn134:
   0791 3D            [11] 2429                  MUL
                           2430  .globl mul_end134
   0792                    2431 mul_end134:
   0792 58            [ 2] 2432                  ASLB                              ; this divides d by 64
   0793 49            [ 2] 2433                  ROLA
   0794 58            [ 2] 2434                  ASLB
   0795 49            [ 2] 2435                  ROLA
                           2436 
                           2437 ; macro call ->                  STORE_A _010x
   0796 B7 00 1D      [ 5] 2438                  STA           _010x
                           2439 ; macro call ->                  A_EQUALS_MUL _sinx, _sinz
   0799 F6 00 06      [ 5] 2440                  LDB           _sinz
   079C B6 00 02      [ 5] 2441                  LDA           _sinx
   079F 2A 07         [ 3] 2442                  BPL           mul_Ap136
   07A1 40            [ 2] 2443                  NEGA
   07A2 5D            [ 2] 2444                  TSTB
   07A3 2A 07         [ 3] 2445                  BPL           mul_An_Bp136
   07A5 50            [ 2] 2446                  NEGB
   07A6 20 09         [ 3] 2447                  BRA           mul_An_Bn136
                           2448  .globl mul_Ap136
   07A8                    2449 mul_Ap136:
   07A8 5D            [ 2] 2450                  TSTB
   07A9 2A 06         [ 3] 2451                  BPL           mul_Ap_Bp136
   07AB 50            [ 2] 2452                  NEGB
                           2453  .globl mul_An_Bp136
   07AC                    2454 mul_An_Bp136:
   07AC 3D            [11] 2455                  MUL
   07AD 53            [ 2] 2456                  COMB                              ; here we can use this as negd
   07AE 43            [ 2] 2457                  COMA                              ; since the low nibble of b doesn't interest us
   07AF 20 01         [ 3] 2458                  BRA           mul_end136
                           2459  .globl mul_Ap_Bp136
   07B1                    2460 mul_Ap_Bp136:
                           2461  .globl mul_An_Bn136
   07B1                    2462 mul_An_Bn136:
   07B1 3D            [11] 2463                  MUL
                           2464  .globl mul_end136
   07B2                    2465 mul_end136:
   07B2 58            [ 2] 2466                  ASLB                              ; this divides d by 64
   07B3 49            [ 2] 2467                  ROLA
   07B4 58            [ 2] 2468                  ASLB
   07B5 49            [ 2] 2469                  ROLA
                           2470 
                           2471 ; macro call ->                  ADD_A_TO _010x
   07B6 BB 00 1D      [ 5] 2472                  ADDA          _010x
                           2473 ; macro call ->                  STORE_A       _010x
   07B9 B7 00 1D      [ 5] 2474                  STA           _010x
                           2475 ; macro call ->                  STORE_A_NEG _010xi
   07BC 40            [ 2] 2476                  NEGA
   07BD B7 00 47      [ 5] 2477                  STA           _010xi
   07C0 B6 00 0B      [ 5] 2478  lda _vectorBits+1
                           2479  .globl no010
   07C3                    2480 no010:
   07C3 85 40         [ 2] 2481  bita #TEST_0_1_1
   07C5 10 27 00 D1   [ 6] 2482  lbeq no011
                           2483 ; macro call ->                     INIT_0_1_1_A  
                           2484 ; macro call ->                  CALC_0_1_1_A _011x, _011y, _011z, _011xi, _011yi, _011zi
   07C9 B6 00 01      [ 5] 2485                  LDA _cosx
   07CC BB 00 02      [ 5] 2486                  ADDA _sinx
   07CF B7 00 22      [ 5] 2487                  STA _011z
   07D2 40            [ 2] 2488                  NEGA
   07D3 B7 00 4C      [ 5] 2489                  STA _011zi
   07D6 B6 00 02      [ 5] 2490                  LDA   _sinx
   07D9 BB 00 01      [ 5] 2491                  ADDA  _cosx
   07DC B7 00 22      [ 5] 2492                  STA   _011z
   07DF B6 00 01      [ 5] 2493                  LDA   _cosx
   07E2 B0 00 02      [ 5] 2494                  SUBA  _sinx
   07E5 B7 00 00      [ 5] 2495                  STA   _helper
                           2496 ; macro call ->                  A_EQUALS_MUL _011z, _siny
   07E8 F6 00 04      [ 5] 2497                  LDB           _siny
   07EB B6 00 22      [ 5] 2498                  LDA           _011z
   07EE 2A 07         [ 3] 2499                  BPL           mul_Ap142
   07F0 40            [ 2] 2500                  NEGA
   07F1 5D            [ 2] 2501                  TSTB
   07F2 2A 07         [ 3] 2502                  BPL           mul_An_Bp142
   07F4 50            [ 2] 2503                  NEGB
   07F5 20 09         [ 3] 2504                  BRA           mul_An_Bn142
                           2505  .globl mul_Ap142
   07F7                    2506 mul_Ap142:
   07F7 5D            [ 2] 2507                  TSTB
   07F8 2A 06         [ 3] 2508                  BPL           mul_Ap_Bp142
   07FA 50            [ 2] 2509                  NEGB
                           2510  .globl mul_An_Bp142
   07FB                    2511 mul_An_Bp142:
   07FB 3D            [11] 2512                  MUL
   07FC 53            [ 2] 2513                  COMB                              ; here we can use this as negd
   07FD 43            [ 2] 2514                  COMA                              ; since the low nibble of b doesn't interest us
   07FE 20 01         [ 3] 2515                  BRA           mul_end142
                           2516  .globl mul_Ap_Bp142
   0800                    2517 mul_Ap_Bp142:
                           2518  .globl mul_An_Bn142
   0800                    2519 mul_An_Bn142:
   0800 3D            [11] 2520                  MUL
                           2521  .globl mul_end142
   0801                    2522 mul_end142:
   0801 58            [ 2] 2523                  ASLB                              ; this divides d by 64
   0802 49            [ 2] 2524                  ROLA
   0803 58            [ 2] 2525                  ASLB
   0804 49            [ 2] 2526                  ROLA
                           2527 
                           2528 ; macro call ->                  STORE_A _011x
   0805 B7 00 20      [ 5] 2529                  STA           _011x
                           2530 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   0808 F6 00 05      [ 5] 2531                  LDB           _cosz
   080B B6 00 00      [ 5] 2532                  LDA           _helper
   080E 2A 07         [ 3] 2533                  BPL           mul_Ap144
   0810 40            [ 2] 2534                  NEGA
   0811 5D            [ 2] 2535                  TSTB
   0812 2A 07         [ 3] 2536                  BPL           mul_An_Bp144
   0814 50            [ 2] 2537                  NEGB
   0815 20 09         [ 3] 2538                  BRA           mul_An_Bn144
                           2539  .globl mul_Ap144
   0817                    2540 mul_Ap144:
   0817 5D            [ 2] 2541                  TSTB
   0818 2A 06         [ 3] 2542                  BPL           mul_Ap_Bp144
   081A 50            [ 2] 2543                  NEGB
                           2544  .globl mul_An_Bp144
   081B                    2545 mul_An_Bp144:
   081B 3D            [11] 2546                  MUL
   081C 53            [ 2] 2547                  COMB                              ; here we can use this as negd
   081D 43            [ 2] 2548                  COMA                              ; since the low nibble of b doesn't interest us
   081E 20 01         [ 3] 2549                  BRA           mul_end144
                           2550  .globl mul_Ap_Bp144
   0820                    2551 mul_Ap_Bp144:
                           2552  .globl mul_An_Bn144
   0820                    2553 mul_An_Bn144:
   0820 3D            [11] 2554                  MUL
                           2555  .globl mul_end144
   0821                    2556 mul_end144:
   0821 58            [ 2] 2557                  ASLB                              ; this divides d by 64
   0822 49            [ 2] 2558                  ROLA
   0823 58            [ 2] 2559                  ASLB
   0824 49            [ 2] 2560                  ROLA
                           2561 
                           2562 ; macro call ->                  STORE_A _011y
   0825 B7 00 21      [ 5] 2563                  STA           _011y
                           2564 ; macro call ->                  A_EQUALS_MUL _011x, _sinz
   0828 F6 00 06      [ 5] 2565                  LDB           _sinz
   082B B6 00 20      [ 5] 2566                  LDA           _011x
   082E 2A 07         [ 3] 2567                  BPL           mul_Ap146
   0830 40            [ 2] 2568                  NEGA
   0831 5D            [ 2] 2569                  TSTB
   0832 2A 07         [ 3] 2570                  BPL           mul_An_Bp146
   0834 50            [ 2] 2571                  NEGB
   0835 20 09         [ 3] 2572                  BRA           mul_An_Bn146
                           2573  .globl mul_Ap146
   0837                    2574 mul_Ap146:
   0837 5D            [ 2] 2575                  TSTB
   0838 2A 06         [ 3] 2576                  BPL           mul_Ap_Bp146
   083A 50            [ 2] 2577                  NEGB
                           2578  .globl mul_An_Bp146
   083B                    2579 mul_An_Bp146:
   083B 3D            [11] 2580                  MUL
   083C 53            [ 2] 2581                  COMB                              ; here we can use this as negd
   083D 43            [ 2] 2582                  COMA                              ; since the low nibble of b doesn't interest us
   083E 20 01         [ 3] 2583                  BRA           mul_end146
                           2584  .globl mul_Ap_Bp146
   0840                    2585 mul_Ap_Bp146:
                           2586  .globl mul_An_Bn146
   0840                    2587 mul_An_Bn146:
   0840 3D            [11] 2588                  MUL
                           2589  .globl mul_end146
   0841                    2590 mul_end146:
   0841 58            [ 2] 2591                  ASLB                              ; this divides d by 64
   0842 49            [ 2] 2592                  ROLA
   0843 58            [ 2] 2593                  ASLB
   0844 49            [ 2] 2594                  ROLA
                           2595 
                           2596 ; macro call ->                  ADD_A_TO _011y
   0845 BB 00 21      [ 5] 2597                  ADDA          _011y
                           2598 ; macro call ->                  STORE_A       _011y
   0848 B7 00 21      [ 5] 2599                  STA           _011y
                           2600 ; macro call ->                  STORE_A_NEG _011yi
   084B 40            [ 2] 2601                  NEGA
   084C B7 00 4B      [ 5] 2602                  STA           _011yi
                           2603 ; macro call ->                  A_EQUALS_MUL _011x, _cosz
   084F F6 00 05      [ 5] 2604                  LDB           _cosz
   0852 B6 00 20      [ 5] 2605                  LDA           _011x
   0855 2A 07         [ 3] 2606                  BPL           mul_Ap150
   0857 40            [ 2] 2607                  NEGA
   0858 5D            [ 2] 2608                  TSTB
   0859 2A 07         [ 3] 2609                  BPL           mul_An_Bp150
   085B 50            [ 2] 2610                  NEGB
   085C 20 09         [ 3] 2611                  BRA           mul_An_Bn150
                           2612  .globl mul_Ap150
   085E                    2613 mul_Ap150:
   085E 5D            [ 2] 2614                  TSTB
   085F 2A 06         [ 3] 2615                  BPL           mul_Ap_Bp150
   0861 50            [ 2] 2616                  NEGB
                           2617  .globl mul_An_Bp150
   0862                    2618 mul_An_Bp150:
   0862 3D            [11] 2619                  MUL
   0863 53            [ 2] 2620                  COMB                              ; here we can use this as negd
   0864 43            [ 2] 2621                  COMA                              ; since the low nibble of b doesn't interest us
   0865 20 01         [ 3] 2622                  BRA           mul_end150
                           2623  .globl mul_Ap_Bp150
   0867                    2624 mul_Ap_Bp150:
                           2625  .globl mul_An_Bn150
   0867                    2626 mul_An_Bn150:
   0867 3D            [11] 2627                  MUL
                           2628  .globl mul_end150
   0868                    2629 mul_end150:
   0868 58            [ 2] 2630                  ASLB                              ; this divides d by 64
   0869 49            [ 2] 2631                  ROLA
   086A 58            [ 2] 2632                  ASLB
   086B 49            [ 2] 2633                  ROLA
                           2634 
                           2635 ; macro call ->                  STORE_A _011x
   086C B7 00 20      [ 5] 2636                  STA           _011x
                           2637 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   086F F6 00 06      [ 5] 2638                  LDB           _sinz
   0872 B6 00 00      [ 5] 2639                  LDA           _helper
   0875 2A 07         [ 3] 2640                  BPL           mul_Ap152
   0877 40            [ 2] 2641                  NEGA
   0878 5D            [ 2] 2642                  TSTB
   0879 2A 07         [ 3] 2643                  BPL           mul_An_Bp152
   087B 50            [ 2] 2644                  NEGB
   087C 20 09         [ 3] 2645                  BRA           mul_An_Bn152
                           2646  .globl mul_Ap152
   087E                    2647 mul_Ap152:
   087E 5D            [ 2] 2648                  TSTB
   087F 2A 06         [ 3] 2649                  BPL           mul_Ap_Bp152
   0881 50            [ 2] 2650                  NEGB
                           2651  .globl mul_An_Bp152
   0882                    2652 mul_An_Bp152:
   0882 3D            [11] 2653                  MUL
   0883 53            [ 2] 2654                  COMB                              ; here we can use this as negd
   0884 43            [ 2] 2655                  COMA                              ; since the low nibble of b doesn't interest us
   0885 20 01         [ 3] 2656                  BRA           mul_end152
                           2657  .globl mul_Ap_Bp152
   0887                    2658 mul_Ap_Bp152:
                           2659  .globl mul_An_Bn152
   0887                    2660 mul_An_Bn152:
   0887 3D            [11] 2661                  MUL
                           2662  .globl mul_end152
   0888                    2663 mul_end152:
   0888 58            [ 2] 2664                  ASLB                              ; this divides d by 64
   0889 49            [ 2] 2665                  ROLA
   088A 58            [ 2] 2666                  ASLB
   088B 49            [ 2] 2667                  ROLA
                           2668 
                           2669 ; macro call ->                  SUB_A_FROM _011x
   088C 40            [ 2] 2670                  NEGA
                           2671 ; macro call ->                  ADD_A_TO      _011x
   088D BB 00 20      [ 5] 2672                  ADDA          _011x
                           2673 ; macro call ->                  STORE_A       _011x
   0890 B7 00 20      [ 5] 2674                  STA           _011x
                           2675 ; macro call ->                  STORE_A_NEG _011xi
   0893 40            [ 2] 2676                  NEGA
   0894 B7 00 4A      [ 5] 2677                  STA           _011xi
   0897 B6 00 0B      [ 5] 2678  lda _vectorBits+1
                           2679  .globl no011
   089A                    2680 no011:
   089A 85 80         [ 2] 2681  bita #TEST_0_0_1
   089C 10 27 00 B9   [ 6] 2682  lbeq no001
                           2683 ; macro call ->                     INIT_0_0_1_A  
                           2684 ; macro call ->                  CALC_0_0_1_A _001x, _001y, _001z, _001xi, _001yi, _001zi
   08A0 B6 00 02      [ 5] 2685                  LDA _sinx
   08A3 B7 00 25      [ 5] 2686                  STA _001z
   08A6 40            [ 2] 2687                  NEGA
   08A7 B7 00 4F      [ 5] 2688                  STA _001zi
                           2689 ; macro call ->                  A_EQUALS_MUL _sinx, _siny
   08AA F6 00 04      [ 5] 2690                  LDB           _siny
   08AD B6 00 02      [ 5] 2691                  LDA           _sinx
   08B0 2A 07         [ 3] 2692                  BPL           mul_Ap159
   08B2 40            [ 2] 2693                  NEGA
   08B3 5D            [ 2] 2694                  TSTB
   08B4 2A 07         [ 3] 2695                  BPL           mul_An_Bp159
   08B6 50            [ 2] 2696                  NEGB
   08B7 20 09         [ 3] 2697                  BRA           mul_An_Bn159
                           2698  .globl mul_Ap159
   08B9                    2699 mul_Ap159:
   08B9 5D            [ 2] 2700                  TSTB
   08BA 2A 06         [ 3] 2701                  BPL           mul_Ap_Bp159
   08BC 50            [ 2] 2702                  NEGB
                           2703  .globl mul_An_Bp159
   08BD                    2704 mul_An_Bp159:
   08BD 3D            [11] 2705                  MUL
   08BE 53            [ 2] 2706                  COMB                              ; here we can use this as negd
   08BF 43            [ 2] 2707                  COMA                              ; since the low nibble of b doesn't interest us
   08C0 20 01         [ 3] 2708                  BRA           mul_end159
                           2709  .globl mul_Ap_Bp159
   08C2                    2710 mul_Ap_Bp159:
                           2711  .globl mul_An_Bn159
   08C2                    2712 mul_An_Bn159:
   08C2 3D            [11] 2713                  MUL
                           2714  .globl mul_end159
   08C3                    2715 mul_end159:
   08C3 58            [ 2] 2716                  ASLB                              ; this divides d by 64
   08C4 49            [ 2] 2717                  ROLA
   08C5 58            [ 2] 2718                  ASLB
   08C6 49            [ 2] 2719                  ROLA
                           2720 
                           2721 ; macro call ->                  STORE_A _001x
   08C7 B7 00 23      [ 5] 2722                  STA           _001x
                           2723 ; macro call ->                  A_EQUALS_MUL _cosx, _cosz
   08CA F6 00 05      [ 5] 2724                  LDB           _cosz
   08CD B6 00 01      [ 5] 2725                  LDA           _cosx
   08D0 2A 07         [ 3] 2726                  BPL           mul_Ap161
   08D2 40            [ 2] 2727                  NEGA
   08D3 5D            [ 2] 2728                  TSTB
   08D4 2A 07         [ 3] 2729                  BPL           mul_An_Bp161
   08D6 50            [ 2] 2730                  NEGB
   08D7 20 09         [ 3] 2731                  BRA           mul_An_Bn161
                           2732  .globl mul_Ap161
   08D9                    2733 mul_Ap161:
   08D9 5D            [ 2] 2734                  TSTB
   08DA 2A 06         [ 3] 2735                  BPL           mul_Ap_Bp161
   08DC 50            [ 2] 2736                  NEGB
                           2737  .globl mul_An_Bp161
   08DD                    2738 mul_An_Bp161:
   08DD 3D            [11] 2739                  MUL
   08DE 53            [ 2] 2740                  COMB                              ; here we can use this as negd
   08DF 43            [ 2] 2741                  COMA                              ; since the low nibble of b doesn't interest us
   08E0 20 01         [ 3] 2742                  BRA           mul_end161
                           2743  .globl mul_Ap_Bp161
   08E2                    2744 mul_Ap_Bp161:
                           2745  .globl mul_An_Bn161
   08E2                    2746 mul_An_Bn161:
   08E2 3D            [11] 2747                  MUL
                           2748  .globl mul_end161
   08E3                    2749 mul_end161:
   08E3 58            [ 2] 2750                  ASLB                              ; this divides d by 64
   08E4 49            [ 2] 2751                  ROLA
   08E5 58            [ 2] 2752                  ASLB
   08E6 49            [ 2] 2753                  ROLA
                           2754 
                           2755 ; macro call ->                  STORE_A _001y
   08E7 B7 00 24      [ 5] 2756                  STA           _001y
                           2757 ; macro call ->                  A_EQUALS_MUL _001x, _sinz
   08EA F6 00 06      [ 5] 2758                  LDB           _sinz
   08ED B6 00 23      [ 5] 2759                  LDA           _001x
   08F0 2A 07         [ 3] 2760                  BPL           mul_Ap163
   08F2 40            [ 2] 2761                  NEGA
   08F3 5D            [ 2] 2762                  TSTB
   08F4 2A 07         [ 3] 2763                  BPL           mul_An_Bp163
   08F6 50            [ 2] 2764                  NEGB
   08F7 20 09         [ 3] 2765                  BRA           mul_An_Bn163
                           2766  .globl mul_Ap163
   08F9                    2767 mul_Ap163:
   08F9 5D            [ 2] 2768                  TSTB
   08FA 2A 06         [ 3] 2769                  BPL           mul_Ap_Bp163
   08FC 50            [ 2] 2770                  NEGB
                           2771  .globl mul_An_Bp163
   08FD                    2772 mul_An_Bp163:
   08FD 3D            [11] 2773                  MUL
   08FE 53            [ 2] 2774                  COMB                              ; here we can use this as negd
   08FF 43            [ 2] 2775                  COMA                              ; since the low nibble of b doesn't interest us
   0900 20 01         [ 3] 2776                  BRA           mul_end163
                           2777  .globl mul_Ap_Bp163
   0902                    2778 mul_Ap_Bp163:
                           2779  .globl mul_An_Bn163
   0902                    2780 mul_An_Bn163:
   0902 3D            [11] 2781                  MUL
                           2782  .globl mul_end163
   0903                    2783 mul_end163:
   0903 58            [ 2] 2784                  ASLB                              ; this divides d by 64
   0904 49            [ 2] 2785                  ROLA
   0905 58            [ 2] 2786                  ASLB
   0906 49            [ 2] 2787                  ROLA
                           2788 
                           2789 ; macro call ->                  ADD_A_TO _001y
   0907 BB 00 24      [ 5] 2790                  ADDA          _001y
                           2791 ; macro call ->                  STORE_A       _001y
   090A B7 00 24      [ 5] 2792                  STA           _001y
                           2793 ; macro call ->                  STORE_A_NEG _001yi
   090D 40            [ 2] 2794                  NEGA
   090E B7 00 4E      [ 5] 2795                  STA           _001yi
                           2796 ; macro call ->                  A_EQUALS_MUL _001x, _cosz
   0911 F6 00 05      [ 5] 2797                  LDB           _cosz
   0914 B6 00 23      [ 5] 2798                  LDA           _001x
   0917 2A 07         [ 3] 2799                  BPL           mul_Ap167
   0919 40            [ 2] 2800                  NEGA
   091A 5D            [ 2] 2801                  TSTB
   091B 2A 07         [ 3] 2802                  BPL           mul_An_Bp167
   091D 50            [ 2] 2803                  NEGB
   091E 20 09         [ 3] 2804                  BRA           mul_An_Bn167
                           2805  .globl mul_Ap167
   0920                    2806 mul_Ap167:
   0920 5D            [ 2] 2807                  TSTB
   0921 2A 06         [ 3] 2808                  BPL           mul_Ap_Bp167
   0923 50            [ 2] 2809                  NEGB
                           2810  .globl mul_An_Bp167
   0924                    2811 mul_An_Bp167:
   0924 3D            [11] 2812                  MUL
   0925 53            [ 2] 2813                  COMB                              ; here we can use this as negd
   0926 43            [ 2] 2814                  COMA                              ; since the low nibble of b doesn't interest us
   0927 20 01         [ 3] 2815                  BRA           mul_end167
                           2816  .globl mul_Ap_Bp167
   0929                    2817 mul_Ap_Bp167:
                           2818  .globl mul_An_Bn167
   0929                    2819 mul_An_Bn167:
   0929 3D            [11] 2820                  MUL
                           2821  .globl mul_end167
   092A                    2822 mul_end167:
   092A 58            [ 2] 2823                  ASLB                              ; this divides d by 64
   092B 49            [ 2] 2824                  ROLA
   092C 58            [ 2] 2825                  ASLB
   092D 49            [ 2] 2826                  ROLA
                           2827 
                           2828 ; macro call ->                  STORE_A _001x
   092E B7 00 23      [ 5] 2829                  STA           _001x
                           2830 ; macro call ->                  A_EQUALS_MUL _cosx, _sinz
   0931 F6 00 06      [ 5] 2831                  LDB           _sinz
   0934 B6 00 01      [ 5] 2832                  LDA           _cosx
   0937 2A 07         [ 3] 2833                  BPL           mul_Ap169
   0939 40            [ 2] 2834                  NEGA
   093A 5D            [ 2] 2835                  TSTB
   093B 2A 07         [ 3] 2836                  BPL           mul_An_Bp169
   093D 50            [ 2] 2837                  NEGB
   093E 20 09         [ 3] 2838                  BRA           mul_An_Bn169
                           2839  .globl mul_Ap169
   0940                    2840 mul_Ap169:
   0940 5D            [ 2] 2841                  TSTB
   0941 2A 06         [ 3] 2842                  BPL           mul_Ap_Bp169
   0943 50            [ 2] 2843                  NEGB
                           2844  .globl mul_An_Bp169
   0944                    2845 mul_An_Bp169:
   0944 3D            [11] 2846                  MUL
   0945 53            [ 2] 2847                  COMB                              ; here we can use this as negd
   0946 43            [ 2] 2848                  COMA                              ; since the low nibble of b doesn't interest us
   0947 20 01         [ 3] 2849                  BRA           mul_end169
                           2850  .globl mul_Ap_Bp169
   0949                    2851 mul_Ap_Bp169:
                           2852  .globl mul_An_Bn169
   0949                    2853 mul_An_Bn169:
   0949 3D            [11] 2854                  MUL
                           2855  .globl mul_end169
   094A                    2856 mul_end169:
   094A 58            [ 2] 2857                  ASLB                              ; this divides d by 64
   094B 49            [ 2] 2858                  ROLA
   094C 58            [ 2] 2859                  ASLB
   094D 49            [ 2] 2860                  ROLA
                           2861 
                           2862 ; macro call ->                  SUB_A_FROM _001x
   094E 40            [ 2] 2863                  NEGA
                           2864 ; macro call ->                  ADD_A_TO      _001x
   094F BB 00 23      [ 5] 2865                  ADDA          _001x
                           2866 ; macro call ->                  STORE_A       _001x
   0952 B7 00 23      [ 5] 2867                  STA           _001x
                           2868 ; macro call ->                  STORE_A_NEG _001xi
   0955 40            [ 2] 2869                  NEGA
   0956 B7 00 4D      [ 5] 2870                  STA           _001xi
                           2871  .globl no001
   0959                    2872 no001:
   0959 B6 00 0A      [ 5] 2873  lda _vectorBits
   095C 85 01         [ 2] 2874  bita #TEST_N_1_0
   095E 10 27 00 C6   [ 6] 2875  lbeq noN10
                           2876 ; macro call ->                     INIT_N_1_0_A  
                           2877 ; macro call ->                  CALC_N_1_0_A _N10x, _N10y, _N10z, _N10xi, _N10yi, _N10zi
   0962 B6 00 01      [ 5] 2878                  LDA _cosx
   0965 B7 00 28      [ 5] 2879                  STA _N10z
   0968 40            [ 2] 2880                  NEGA
   0969 B7 00 52      [ 5] 2881                  STA _N10zi
   096C B6 00 02      [ 5] 2882                  LDA   _sinx
   096F 40            [ 2] 2883                  NEGA
   0970 B7 00 00      [ 5] 2884                  STA   _helper
                           2885 ; macro call ->                  A_EQUALS_MUL _cosx, _siny
   0973 F6 00 04      [ 5] 2886                  LDB           _siny
   0976 B6 00 01      [ 5] 2887                  LDA           _cosx
   0979 2A 07         [ 3] 2888                  BPL           mul_Ap176
   097B 40            [ 2] 2889                  NEGA
   097C 5D            [ 2] 2890                  TSTB
   097D 2A 07         [ 3] 2891                  BPL           mul_An_Bp176
   097F 50            [ 2] 2892                  NEGB
   0980 20 09         [ 3] 2893                  BRA           mul_An_Bn176
                           2894  .globl mul_Ap176
   0982                    2895 mul_Ap176:
   0982 5D            [ 2] 2896                  TSTB
   0983 2A 06         [ 3] 2897                  BPL           mul_Ap_Bp176
   0985 50            [ 2] 2898                  NEGB
                           2899  .globl mul_An_Bp176
   0986                    2900 mul_An_Bp176:
   0986 3D            [11] 2901                  MUL
   0987 53            [ 2] 2902                  COMB                              ; here we can use this as negd
   0988 43            [ 2] 2903                  COMA                              ; since the low nibble of b doesn't interest us
   0989 20 01         [ 3] 2904                  BRA           mul_end176
                           2905  .globl mul_Ap_Bp176
   098B                    2906 mul_Ap_Bp176:
                           2907  .globl mul_An_Bn176
   098B                    2908 mul_An_Bn176:
   098B 3D            [11] 2909                  MUL
                           2910  .globl mul_end176
   098C                    2911 mul_end176:
   098C 58            [ 2] 2912                  ASLB                              ; this divides d by 64
   098D 49            [ 2] 2913                  ROLA
   098E 58            [ 2] 2914                  ASLB
   098F 49            [ 2] 2915                  ROLA
                           2916 
   0990 B0 00 03      [ 5] 2917                  SUBA  _cosy
                           2918 ; macro call ->                  STORE_A _N10x
   0993 B7 00 26      [ 5] 2919                  STA           _N10x
                           2920 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   0996 F6 00 05      [ 5] 2921                  LDB           _cosz
   0999 B6 00 00      [ 5] 2922                  LDA           _helper
   099C 2A 07         [ 3] 2923                  BPL           mul_Ap178
   099E 40            [ 2] 2924                  NEGA
   099F 5D            [ 2] 2925                  TSTB
   09A0 2A 07         [ 3] 2926                  BPL           mul_An_Bp178
   09A2 50            [ 2] 2927                  NEGB
   09A3 20 09         [ 3] 2928                  BRA           mul_An_Bn178
                           2929  .globl mul_Ap178
   09A5                    2930 mul_Ap178:
   09A5 5D            [ 2] 2931                  TSTB
   09A6 2A 06         [ 3] 2932                  BPL           mul_Ap_Bp178
   09A8 50            [ 2] 2933                  NEGB
                           2934  .globl mul_An_Bp178
   09A9                    2935 mul_An_Bp178:
   09A9 3D            [11] 2936                  MUL
   09AA 53            [ 2] 2937                  COMB                              ; here we can use this as negd
   09AB 43            [ 2] 2938                  COMA                              ; since the low nibble of b doesn't interest us
   09AC 20 01         [ 3] 2939                  BRA           mul_end178
                           2940  .globl mul_Ap_Bp178
   09AE                    2941 mul_Ap_Bp178:
                           2942  .globl mul_An_Bn178
   09AE                    2943 mul_An_Bn178:
   09AE 3D            [11] 2944                  MUL
                           2945  .globl mul_end178
   09AF                    2946 mul_end178:
   09AF 58            [ 2] 2947                  ASLB                              ; this divides d by 64
   09B0 49            [ 2] 2948                  ROLA
   09B1 58            [ 2] 2949                  ASLB
   09B2 49            [ 2] 2950                  ROLA
                           2951 
                           2952 ; macro call ->                  STORE_A _N10y
   09B3 B7 00 27      [ 5] 2953                  STA           _N10y
                           2954 ; macro call ->                  A_EQUALS_MUL _N10x, _sinz
   09B6 F6 00 06      [ 5] 2955                  LDB           _sinz
   09B9 B6 00 26      [ 5] 2956                  LDA           _N10x
   09BC 2A 07         [ 3] 2957                  BPL           mul_Ap180
   09BE 40            [ 2] 2958                  NEGA
   09BF 5D            [ 2] 2959                  TSTB
   09C0 2A 07         [ 3] 2960                  BPL           mul_An_Bp180
   09C2 50            [ 2] 2961                  NEGB
   09C3 20 09         [ 3] 2962                  BRA           mul_An_Bn180
                           2963  .globl mul_Ap180
   09C5                    2964 mul_Ap180:
   09C5 5D            [ 2] 2965                  TSTB
   09C6 2A 06         [ 3] 2966                  BPL           mul_Ap_Bp180
   09C8 50            [ 2] 2967                  NEGB
                           2968  .globl mul_An_Bp180
   09C9                    2969 mul_An_Bp180:
   09C9 3D            [11] 2970                  MUL
   09CA 53            [ 2] 2971                  COMB                              ; here we can use this as negd
   09CB 43            [ 2] 2972                  COMA                              ; since the low nibble of b doesn't interest us
   09CC 20 01         [ 3] 2973                  BRA           mul_end180
                           2974  .globl mul_Ap_Bp180
   09CE                    2975 mul_Ap_Bp180:
                           2976  .globl mul_An_Bn180
   09CE                    2977 mul_An_Bn180:
   09CE 3D            [11] 2978                  MUL
                           2979  .globl mul_end180
   09CF                    2980 mul_end180:
   09CF 58            [ 2] 2981                  ASLB                              ; this divides d by 64
   09D0 49            [ 2] 2982                  ROLA
   09D1 58            [ 2] 2983                  ASLB
   09D2 49            [ 2] 2984                  ROLA
                           2985 
                           2986 ; macro call ->                  ADD_A_TO _N10y
   09D3 BB 00 27      [ 5] 2987                  ADDA          _N10y
                           2988 ; macro call ->                  STORE_A       _N10y
   09D6 B7 00 27      [ 5] 2989                  STA           _N10y
                           2990 ; macro call ->                  STORE_A_NEG _N10yi
   09D9 40            [ 2] 2991                  NEGA
   09DA B7 00 51      [ 5] 2992                  STA           _N10yi
                           2993 ; macro call ->                  A_EQUALS_MUL _N10x, _cosz
   09DD F6 00 05      [ 5] 2994                  LDB           _cosz
   09E0 B6 00 26      [ 5] 2995                  LDA           _N10x
   09E3 2A 07         [ 3] 2996                  BPL           mul_Ap184
   09E5 40            [ 2] 2997                  NEGA
   09E6 5D            [ 2] 2998                  TSTB
   09E7 2A 07         [ 3] 2999                  BPL           mul_An_Bp184
   09E9 50            [ 2] 3000                  NEGB
   09EA 20 09         [ 3] 3001                  BRA           mul_An_Bn184
                           3002  .globl mul_Ap184
   09EC                    3003 mul_Ap184:
   09EC 5D            [ 2] 3004                  TSTB
   09ED 2A 06         [ 3] 3005                  BPL           mul_Ap_Bp184
   09EF 50            [ 2] 3006                  NEGB
                           3007  .globl mul_An_Bp184
   09F0                    3008 mul_An_Bp184:
   09F0 3D            [11] 3009                  MUL
   09F1 53            [ 2] 3010                  COMB                              ; here we can use this as negd
   09F2 43            [ 2] 3011                  COMA                              ; since the low nibble of b doesn't interest us
   09F3 20 01         [ 3] 3012                  BRA           mul_end184
                           3013  .globl mul_Ap_Bp184
   09F5                    3014 mul_Ap_Bp184:
                           3015  .globl mul_An_Bn184
   09F5                    3016 mul_An_Bn184:
   09F5 3D            [11] 3017                  MUL
                           3018  .globl mul_end184
   09F6                    3019 mul_end184:
   09F6 58            [ 2] 3020                  ASLB                              ; this divides d by 64
   09F7 49            [ 2] 3021                  ROLA
   09F8 58            [ 2] 3022                  ASLB
   09F9 49            [ 2] 3023                  ROLA
                           3024 
                           3025 ; macro call ->                  STORE_A _N10x
   09FA B7 00 26      [ 5] 3026                  STA           _N10x
                           3027 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   09FD F6 00 06      [ 5] 3028                  LDB           _sinz
   0A00 B6 00 00      [ 5] 3029                  LDA           _helper
   0A03 2A 07         [ 3] 3030                  BPL           mul_Ap186
   0A05 40            [ 2] 3031                  NEGA
   0A06 5D            [ 2] 3032                  TSTB
   0A07 2A 07         [ 3] 3033                  BPL           mul_An_Bp186
   0A09 50            [ 2] 3034                  NEGB
   0A0A 20 09         [ 3] 3035                  BRA           mul_An_Bn186
                           3036  .globl mul_Ap186
   0A0C                    3037 mul_Ap186:
   0A0C 5D            [ 2] 3038                  TSTB
   0A0D 2A 06         [ 3] 3039                  BPL           mul_Ap_Bp186
   0A0F 50            [ 2] 3040                  NEGB
                           3041  .globl mul_An_Bp186
   0A10                    3042 mul_An_Bp186:
   0A10 3D            [11] 3043                  MUL
   0A11 53            [ 2] 3044                  COMB                              ; here we can use this as negd
   0A12 43            [ 2] 3045                  COMA                              ; since the low nibble of b doesn't interest us
   0A13 20 01         [ 3] 3046                  BRA           mul_end186
                           3047  .globl mul_Ap_Bp186
   0A15                    3048 mul_Ap_Bp186:
                           3049  .globl mul_An_Bn186
   0A15                    3050 mul_An_Bn186:
   0A15 3D            [11] 3051                  MUL
                           3052  .globl mul_end186
   0A16                    3053 mul_end186:
   0A16 58            [ 2] 3054                  ASLB                              ; this divides d by 64
   0A17 49            [ 2] 3055                  ROLA
   0A18 58            [ 2] 3056                  ASLB
   0A19 49            [ 2] 3057                  ROLA
                           3058 
                           3059 ; macro call ->                  SUB_A_FROM _N10x
   0A1A 40            [ 2] 3060                  NEGA
                           3061 ; macro call ->                  ADD_A_TO      _N10x
   0A1B BB 00 26      [ 5] 3062                  ADDA          _N10x
                           3063 ; macro call ->                  STORE_A       _N10x
   0A1E B7 00 26      [ 5] 3064                  STA           _N10x
                           3065 ; macro call ->                  STORE_A_NEG _N10xi
   0A21 40            [ 2] 3066                  NEGA
   0A22 B7 00 50      [ 5] 3067                  STA           _N10xi
   0A25 B6 00 0A      [ 5] 3068  lda _vectorBits
                           3069  .globl noN10
   0A28                    3070 noN10:
   0A28 85 02         [ 2] 3071  bita #TEST_N_0_1
   0A2A 10 27 00 BF   [ 6] 3072  lbeq noN01
                           3073 ; macro call ->                     INIT_N_0_1_A  
                           3074 ; macro call ->                  CALC_N_0_1_A _N01x, _N01y, _N01z, _N01xi, _N01yi, _N01zi
   0A2E B6 00 02      [ 5] 3075                  LDA _sinx
   0A31 B7 00 2B      [ 5] 3076                  STA _N01z
   0A34 40            [ 2] 3077                  NEGA
   0A35 B7 00 55      [ 5] 3078                  STA _N01zi
                           3079 ; macro call ->                  A_EQUALS_MUL _sinx, _siny
   0A38 F6 00 04      [ 5] 3080                  LDB           _siny
   0A3B B6 00 02      [ 5] 3081                  LDA           _sinx
   0A3E 2A 07         [ 3] 3082                  BPL           mul_Ap193
   0A40 40            [ 2] 3083                  NEGA
   0A41 5D            [ 2] 3084                  TSTB
   0A42 2A 07         [ 3] 3085                  BPL           mul_An_Bp193
   0A44 50            [ 2] 3086                  NEGB
   0A45 20 09         [ 3] 3087                  BRA           mul_An_Bn193
                           3088  .globl mul_Ap193
   0A47                    3089 mul_Ap193:
   0A47 5D            [ 2] 3090                  TSTB
   0A48 2A 06         [ 3] 3091                  BPL           mul_Ap_Bp193
   0A4A 50            [ 2] 3092                  NEGB
                           3093  .globl mul_An_Bp193
   0A4B                    3094 mul_An_Bp193:
   0A4B 3D            [11] 3095                  MUL
   0A4C 53            [ 2] 3096                  COMB                              ; here we can use this as negd
   0A4D 43            [ 2] 3097                  COMA                              ; since the low nibble of b doesn't interest us
   0A4E 20 01         [ 3] 3098                  BRA           mul_end193
                           3099  .globl mul_Ap_Bp193
   0A50                    3100 mul_Ap_Bp193:
                           3101  .globl mul_An_Bn193
   0A50                    3102 mul_An_Bn193:
   0A50 3D            [11] 3103                  MUL
                           3104  .globl mul_end193
   0A51                    3105 mul_end193:
   0A51 58            [ 2] 3106                  ASLB                              ; this divides d by 64
   0A52 49            [ 2] 3107                  ROLA
   0A53 58            [ 2] 3108                  ASLB
   0A54 49            [ 2] 3109                  ROLA
                           3110 
   0A55 B0 00 03      [ 5] 3111                  SUBA   _cosy
                           3112 ; macro call ->                  STORE_A _N01x
   0A58 B7 00 29      [ 5] 3113                  STA           _N01x
                           3114 ; macro call ->                  A_EQUALS_MUL _cosx, _cosz
   0A5B F6 00 05      [ 5] 3115                  LDB           _cosz
   0A5E B6 00 01      [ 5] 3116                  LDA           _cosx
   0A61 2A 07         [ 3] 3117                  BPL           mul_Ap195
   0A63 40            [ 2] 3118                  NEGA
   0A64 5D            [ 2] 3119                  TSTB
   0A65 2A 07         [ 3] 3120                  BPL           mul_An_Bp195
   0A67 50            [ 2] 3121                  NEGB
   0A68 20 09         [ 3] 3122                  BRA           mul_An_Bn195
                           3123  .globl mul_Ap195
   0A6A                    3124 mul_Ap195:
   0A6A 5D            [ 2] 3125                  TSTB
   0A6B 2A 06         [ 3] 3126                  BPL           mul_Ap_Bp195
   0A6D 50            [ 2] 3127                  NEGB
                           3128  .globl mul_An_Bp195
   0A6E                    3129 mul_An_Bp195:
   0A6E 3D            [11] 3130                  MUL
   0A6F 53            [ 2] 3131                  COMB                              ; here we can use this as negd
   0A70 43            [ 2] 3132                  COMA                              ; since the low nibble of b doesn't interest us
   0A71 20 01         [ 3] 3133                  BRA           mul_end195
                           3134  .globl mul_Ap_Bp195
   0A73                    3135 mul_Ap_Bp195:
                           3136  .globl mul_An_Bn195
   0A73                    3137 mul_An_Bn195:
   0A73 3D            [11] 3138                  MUL
                           3139  .globl mul_end195
   0A74                    3140 mul_end195:
   0A74 58            [ 2] 3141                  ASLB                              ; this divides d by 64
   0A75 49            [ 2] 3142                  ROLA
   0A76 58            [ 2] 3143                  ASLB
   0A77 49            [ 2] 3144                  ROLA
                           3145 
                           3146 ; macro call ->                  STORE_A _N01y
   0A78 B7 00 2A      [ 5] 3147                  STA           _N01y
                           3148 ; macro call ->                  A_EQUALS_MUL _N01x, _sinz
   0A7B F6 00 06      [ 5] 3149                  LDB           _sinz
   0A7E B6 00 29      [ 5] 3150                  LDA           _N01x
   0A81 2A 07         [ 3] 3151                  BPL           mul_Ap197
   0A83 40            [ 2] 3152                  NEGA
   0A84 5D            [ 2] 3153                  TSTB
   0A85 2A 07         [ 3] 3154                  BPL           mul_An_Bp197
   0A87 50            [ 2] 3155                  NEGB
   0A88 20 09         [ 3] 3156                  BRA           mul_An_Bn197
                           3157  .globl mul_Ap197
   0A8A                    3158 mul_Ap197:
   0A8A 5D            [ 2] 3159                  TSTB
   0A8B 2A 06         [ 3] 3160                  BPL           mul_Ap_Bp197
   0A8D 50            [ 2] 3161                  NEGB
                           3162  .globl mul_An_Bp197
   0A8E                    3163 mul_An_Bp197:
   0A8E 3D            [11] 3164                  MUL
   0A8F 53            [ 2] 3165                  COMB                              ; here we can use this as negd
   0A90 43            [ 2] 3166                  COMA                              ; since the low nibble of b doesn't interest us
   0A91 20 01         [ 3] 3167                  BRA           mul_end197
                           3168  .globl mul_Ap_Bp197
   0A93                    3169 mul_Ap_Bp197:
                           3170  .globl mul_An_Bn197
   0A93                    3171 mul_An_Bn197:
   0A93 3D            [11] 3172                  MUL
                           3173  .globl mul_end197
   0A94                    3174 mul_end197:
   0A94 58            [ 2] 3175                  ASLB                              ; this divides d by 64
   0A95 49            [ 2] 3176                  ROLA
   0A96 58            [ 2] 3177                  ASLB
   0A97 49            [ 2] 3178                  ROLA
                           3179 
                           3180 ; macro call ->                  ADD_A_TO _N01y
   0A98 BB 00 2A      [ 5] 3181                  ADDA          _N01y
                           3182 ; macro call ->                  STORE_A       _N01y
   0A9B B7 00 2A      [ 5] 3183                  STA           _N01y
                           3184 ; macro call ->                  STORE_A_NEG _N01yi
   0A9E 40            [ 2] 3185                  NEGA
   0A9F B7 00 54      [ 5] 3186                  STA           _N01yi
                           3187 ; macro call ->                  A_EQUALS_MUL _N01x, _cosz
   0AA2 F6 00 05      [ 5] 3188                  LDB           _cosz
   0AA5 B6 00 29      [ 5] 3189                  LDA           _N01x
   0AA8 2A 07         [ 3] 3190                  BPL           mul_Ap201
   0AAA 40            [ 2] 3191                  NEGA
   0AAB 5D            [ 2] 3192                  TSTB
   0AAC 2A 07         [ 3] 3193                  BPL           mul_An_Bp201
   0AAE 50            [ 2] 3194                  NEGB
   0AAF 20 09         [ 3] 3195                  BRA           mul_An_Bn201
                           3196  .globl mul_Ap201
   0AB1                    3197 mul_Ap201:
   0AB1 5D            [ 2] 3198                  TSTB
   0AB2 2A 06         [ 3] 3199                  BPL           mul_Ap_Bp201
   0AB4 50            [ 2] 3200                  NEGB
                           3201  .globl mul_An_Bp201
   0AB5                    3202 mul_An_Bp201:
   0AB5 3D            [11] 3203                  MUL
   0AB6 53            [ 2] 3204                  COMB                              ; here we can use this as negd
   0AB7 43            [ 2] 3205                  COMA                              ; since the low nibble of b doesn't interest us
   0AB8 20 01         [ 3] 3206                  BRA           mul_end201
                           3207  .globl mul_Ap_Bp201
   0ABA                    3208 mul_Ap_Bp201:
                           3209  .globl mul_An_Bn201
   0ABA                    3210 mul_An_Bn201:
   0ABA 3D            [11] 3211                  MUL
                           3212  .globl mul_end201
   0ABB                    3213 mul_end201:
   0ABB 58            [ 2] 3214                  ASLB                              ; this divides d by 64
   0ABC 49            [ 2] 3215                  ROLA
   0ABD 58            [ 2] 3216                  ASLB
   0ABE 49            [ 2] 3217                  ROLA
                           3218 
                           3219 ; macro call ->                  STORE_A _N01x
   0ABF B7 00 29      [ 5] 3220                  STA           _N01x
                           3221 ; macro call ->                  A_EQUALS_MUL _cosx, _sinz
   0AC2 F6 00 06      [ 5] 3222                  LDB           _sinz
   0AC5 B6 00 01      [ 5] 3223                  LDA           _cosx
   0AC8 2A 07         [ 3] 3224                  BPL           mul_Ap203
   0ACA 40            [ 2] 3225                  NEGA
   0ACB 5D            [ 2] 3226                  TSTB
   0ACC 2A 07         [ 3] 3227                  BPL           mul_An_Bp203
   0ACE 50            [ 2] 3228                  NEGB
   0ACF 20 09         [ 3] 3229                  BRA           mul_An_Bn203
                           3230  .globl mul_Ap203
   0AD1                    3231 mul_Ap203:
   0AD1 5D            [ 2] 3232                  TSTB
   0AD2 2A 06         [ 3] 3233                  BPL           mul_Ap_Bp203
   0AD4 50            [ 2] 3234                  NEGB
                           3235  .globl mul_An_Bp203
   0AD5                    3236 mul_An_Bp203:
   0AD5 3D            [11] 3237                  MUL
   0AD6 53            [ 2] 3238                  COMB                              ; here we can use this as negd
   0AD7 43            [ 2] 3239                  COMA                              ; since the low nibble of b doesn't interest us
   0AD8 20 01         [ 3] 3240                  BRA           mul_end203
                           3241  .globl mul_Ap_Bp203
   0ADA                    3242 mul_Ap_Bp203:
                           3243  .globl mul_An_Bn203
   0ADA                    3244 mul_An_Bn203:
   0ADA 3D            [11] 3245                  MUL
                           3246  .globl mul_end203
   0ADB                    3247 mul_end203:
   0ADB 58            [ 2] 3248                  ASLB                              ; this divides d by 64
   0ADC 49            [ 2] 3249                  ROLA
   0ADD 58            [ 2] 3250                  ASLB
   0ADE 49            [ 2] 3251                  ROLA
                           3252 
                           3253 ; macro call ->                  SUB_A_FROM _N01x
   0ADF 40            [ 2] 3254                  NEGA
                           3255 ; macro call ->                  ADD_A_TO      _N01x
   0AE0 BB 00 29      [ 5] 3256                  ADDA          _N01x
                           3257 ; macro call ->                  STORE_A       _N01x
   0AE3 B7 00 29      [ 5] 3258                  STA           _N01x
                           3259 ; macro call ->                  STORE_A_NEG _N01xi
   0AE6 40            [ 2] 3260                  NEGA
   0AE7 B7 00 53      [ 5] 3261                  STA           _N01xi
   0AEA B6 00 0A      [ 5] 3262  lda _vectorBits
                           3263  .globl noN01
   0AED                    3264 noN01:
   0AED 85 04         [ 2] 3265  bita #TEST_0_N_1
   0AEF 10 27 00 D1   [ 6] 3266  lbeq no0N1
                           3267 ; macro call ->                     INIT_0_N_1_A  
                           3268 ; macro call ->                  CALC_0_N_1_A _0N1x, _0N1y, _0N1z, _0N1xi, _0N1yi, _0N1zi
   0AF3 B6 00 02      [ 5] 3269                  LDA _sinx
   0AF6 B0 00 01      [ 5] 3270                  SUBA _cosx
   0AF9 B7 00 2E      [ 5] 3271                  STA _0N1z
   0AFC 40            [ 2] 3272                  NEGA
   0AFD B7 00 58      [ 5] 3273                  STA _0N1zi
   0B00 B6 00 02      [ 5] 3274                  LDA   _sinx
   0B03 B0 00 01      [ 5] 3275                  SUBA  _cosx
   0B06 B7 00 2E      [ 5] 3276                  STA   _0N1z
   0B09 B6 00 01      [ 5] 3277                  LDA   _cosx
   0B0C BB 00 02      [ 5] 3278                  ADDA  _sinx
   0B0F B7 00 00      [ 5] 3279                  STA   _helper
                           3280 ; macro call ->                  A_EQUALS_MUL _0N1z, _siny
   0B12 F6 00 04      [ 5] 3281                  LDB           _siny
   0B15 B6 00 2E      [ 5] 3282                  LDA           _0N1z
   0B18 2A 07         [ 3] 3283                  BPL           mul_Ap210
   0B1A 40            [ 2] 3284                  NEGA
   0B1B 5D            [ 2] 3285                  TSTB
   0B1C 2A 07         [ 3] 3286                  BPL           mul_An_Bp210
   0B1E 50            [ 2] 3287                  NEGB
   0B1F 20 09         [ 3] 3288                  BRA           mul_An_Bn210
                           3289  .globl mul_Ap210
   0B21                    3290 mul_Ap210:
   0B21 5D            [ 2] 3291                  TSTB
   0B22 2A 06         [ 3] 3292                  BPL           mul_Ap_Bp210
   0B24 50            [ 2] 3293                  NEGB
                           3294  .globl mul_An_Bp210
   0B25                    3295 mul_An_Bp210:
   0B25 3D            [11] 3296                  MUL
   0B26 53            [ 2] 3297                  COMB                              ; here we can use this as negd
   0B27 43            [ 2] 3298                  COMA                              ; since the low nibble of b doesn't interest us
   0B28 20 01         [ 3] 3299                  BRA           mul_end210
                           3300  .globl mul_Ap_Bp210
   0B2A                    3301 mul_Ap_Bp210:
                           3302  .globl mul_An_Bn210
   0B2A                    3303 mul_An_Bn210:
   0B2A 3D            [11] 3304                  MUL
                           3305  .globl mul_end210
   0B2B                    3306 mul_end210:
   0B2B 58            [ 2] 3307                  ASLB                              ; this divides d by 64
   0B2C 49            [ 2] 3308                  ROLA
   0B2D 58            [ 2] 3309                  ASLB
   0B2E 49            [ 2] 3310                  ROLA
                           3311 
                           3312 ; macro call ->                  STORE_A _0N1x
   0B2F B7 00 2C      [ 5] 3313                  STA           _0N1x
                           3314 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   0B32 F6 00 05      [ 5] 3315                  LDB           _cosz
   0B35 B6 00 00      [ 5] 3316                  LDA           _helper
   0B38 2A 07         [ 3] 3317                  BPL           mul_Ap212
   0B3A 40            [ 2] 3318                  NEGA
   0B3B 5D            [ 2] 3319                  TSTB
   0B3C 2A 07         [ 3] 3320                  BPL           mul_An_Bp212
   0B3E 50            [ 2] 3321                  NEGB
   0B3F 20 09         [ 3] 3322                  BRA           mul_An_Bn212
                           3323  .globl mul_Ap212
   0B41                    3324 mul_Ap212:
   0B41 5D            [ 2] 3325                  TSTB
   0B42 2A 06         [ 3] 3326                  BPL           mul_Ap_Bp212
   0B44 50            [ 2] 3327                  NEGB
                           3328  .globl mul_An_Bp212
   0B45                    3329 mul_An_Bp212:
   0B45 3D            [11] 3330                  MUL
   0B46 53            [ 2] 3331                  COMB                              ; here we can use this as negd
   0B47 43            [ 2] 3332                  COMA                              ; since the low nibble of b doesn't interest us
   0B48 20 01         [ 3] 3333                  BRA           mul_end212
                           3334  .globl mul_Ap_Bp212
   0B4A                    3335 mul_Ap_Bp212:
                           3336  .globl mul_An_Bn212
   0B4A                    3337 mul_An_Bn212:
   0B4A 3D            [11] 3338                  MUL
                           3339  .globl mul_end212
   0B4B                    3340 mul_end212:
   0B4B 58            [ 2] 3341                  ASLB                              ; this divides d by 64
   0B4C 49            [ 2] 3342                  ROLA
   0B4D 58            [ 2] 3343                  ASLB
   0B4E 49            [ 2] 3344                  ROLA
                           3345 
                           3346 ; macro call ->                  STORE_A _0N1y
   0B4F B7 00 2D      [ 5] 3347                  STA           _0N1y
                           3348 ; macro call ->                  A_EQUALS_MUL _0N1x, _sinz
   0B52 F6 00 06      [ 5] 3349                  LDB           _sinz
   0B55 B6 00 2C      [ 5] 3350                  LDA           _0N1x
   0B58 2A 07         [ 3] 3351                  BPL           mul_Ap214
   0B5A 40            [ 2] 3352                  NEGA
   0B5B 5D            [ 2] 3353                  TSTB
   0B5C 2A 07         [ 3] 3354                  BPL           mul_An_Bp214
   0B5E 50            [ 2] 3355                  NEGB
   0B5F 20 09         [ 3] 3356                  BRA           mul_An_Bn214
                           3357  .globl mul_Ap214
   0B61                    3358 mul_Ap214:
   0B61 5D            [ 2] 3359                  TSTB
   0B62 2A 06         [ 3] 3360                  BPL           mul_Ap_Bp214
   0B64 50            [ 2] 3361                  NEGB
                           3362  .globl mul_An_Bp214
   0B65                    3363 mul_An_Bp214:
   0B65 3D            [11] 3364                  MUL
   0B66 53            [ 2] 3365                  COMB                              ; here we can use this as negd
   0B67 43            [ 2] 3366                  COMA                              ; since the low nibble of b doesn't interest us
   0B68 20 01         [ 3] 3367                  BRA           mul_end214
                           3368  .globl mul_Ap_Bp214
   0B6A                    3369 mul_Ap_Bp214:
                           3370  .globl mul_An_Bn214
   0B6A                    3371 mul_An_Bn214:
   0B6A 3D            [11] 3372                  MUL
                           3373  .globl mul_end214
   0B6B                    3374 mul_end214:
   0B6B 58            [ 2] 3375                  ASLB                              ; this divides d by 64
   0B6C 49            [ 2] 3376                  ROLA
   0B6D 58            [ 2] 3377                  ASLB
   0B6E 49            [ 2] 3378                  ROLA
                           3379 
                           3380 ; macro call ->                  ADD_A_TO _0N1y
   0B6F BB 00 2D      [ 5] 3381                  ADDA          _0N1y
                           3382 ; macro call ->                  STORE_A       _0N1y
   0B72 B7 00 2D      [ 5] 3383                  STA           _0N1y
                           3384 ; macro call ->                  STORE_A_NEG _0N1yi
   0B75 40            [ 2] 3385                  NEGA
   0B76 B7 00 57      [ 5] 3386                  STA           _0N1yi
                           3387 ; macro call ->                  A_EQUALS_MUL _0N1x, _cosz
   0B79 F6 00 05      [ 5] 3388                  LDB           _cosz
   0B7C B6 00 2C      [ 5] 3389                  LDA           _0N1x
   0B7F 2A 07         [ 3] 3390                  BPL           mul_Ap218
   0B81 40            [ 2] 3391                  NEGA
   0B82 5D            [ 2] 3392                  TSTB
   0B83 2A 07         [ 3] 3393                  BPL           mul_An_Bp218
   0B85 50            [ 2] 3394                  NEGB
   0B86 20 09         [ 3] 3395                  BRA           mul_An_Bn218
                           3396  .globl mul_Ap218
   0B88                    3397 mul_Ap218:
   0B88 5D            [ 2] 3398                  TSTB
   0B89 2A 06         [ 3] 3399                  BPL           mul_Ap_Bp218
   0B8B 50            [ 2] 3400                  NEGB
                           3401  .globl mul_An_Bp218
   0B8C                    3402 mul_An_Bp218:
   0B8C 3D            [11] 3403                  MUL
   0B8D 53            [ 2] 3404                  COMB                              ; here we can use this as negd
   0B8E 43            [ 2] 3405                  COMA                              ; since the low nibble of b doesn't interest us
   0B8F 20 01         [ 3] 3406                  BRA           mul_end218
                           3407  .globl mul_Ap_Bp218
   0B91                    3408 mul_Ap_Bp218:
                           3409  .globl mul_An_Bn218
   0B91                    3410 mul_An_Bn218:
   0B91 3D            [11] 3411                  MUL
                           3412  .globl mul_end218
   0B92                    3413 mul_end218:
   0B92 58            [ 2] 3414                  ASLB                              ; this divides d by 64
   0B93 49            [ 2] 3415                  ROLA
   0B94 58            [ 2] 3416                  ASLB
   0B95 49            [ 2] 3417                  ROLA
                           3418 
                           3419 ; macro call ->                  STORE_A _0N1x
   0B96 B7 00 2C      [ 5] 3420                  STA           _0N1x
                           3421 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   0B99 F6 00 06      [ 5] 3422                  LDB           _sinz
   0B9C B6 00 00      [ 5] 3423                  LDA           _helper
   0B9F 2A 07         [ 3] 3424                  BPL           mul_Ap220
   0BA1 40            [ 2] 3425                  NEGA
   0BA2 5D            [ 2] 3426                  TSTB
   0BA3 2A 07         [ 3] 3427                  BPL           mul_An_Bp220
   0BA5 50            [ 2] 3428                  NEGB
   0BA6 20 09         [ 3] 3429                  BRA           mul_An_Bn220
                           3430  .globl mul_Ap220
   0BA8                    3431 mul_Ap220:
   0BA8 5D            [ 2] 3432                  TSTB
   0BA9 2A 06         [ 3] 3433                  BPL           mul_Ap_Bp220
   0BAB 50            [ 2] 3434                  NEGB
                           3435  .globl mul_An_Bp220
   0BAC                    3436 mul_An_Bp220:
   0BAC 3D            [11] 3437                  MUL
   0BAD 53            [ 2] 3438                  COMB                              ; here we can use this as negd
   0BAE 43            [ 2] 3439                  COMA                              ; since the low nibble of b doesn't interest us
   0BAF 20 01         [ 3] 3440                  BRA           mul_end220
                           3441  .globl mul_Ap_Bp220
   0BB1                    3442 mul_Ap_Bp220:
                           3443  .globl mul_An_Bn220
   0BB1                    3444 mul_An_Bn220:
   0BB1 3D            [11] 3445                  MUL
                           3446  .globl mul_end220
   0BB2                    3447 mul_end220:
   0BB2 58            [ 2] 3448                  ASLB                              ; this divides d by 64
   0BB3 49            [ 2] 3449                  ROLA
   0BB4 58            [ 2] 3450                  ASLB
   0BB5 49            [ 2] 3451                  ROLA
                           3452 
                           3453 ; macro call ->                  SUB_A_FROM _0N1x
   0BB6 40            [ 2] 3454                  NEGA
                           3455 ; macro call ->                  ADD_A_TO      _0N1x
   0BB7 BB 00 2C      [ 5] 3456                  ADDA          _0N1x
                           3457 ; macro call ->                  STORE_A       _0N1x
   0BBA B7 00 2C      [ 5] 3458                  STA           _0N1x
                           3459 ; macro call ->                  STORE_A_NEG _0N1xi
   0BBD 40            [ 2] 3460                  NEGA
   0BBE B7 00 56      [ 5] 3461                  STA           _0N1xi
   0BC1 B6 00 0A      [ 5] 3462  lda _vectorBits
                           3463  .globl no0N1
   0BC4                    3464 no0N1:
   0BC4 85 08         [ 2] 3465  bita #TEST_N_1_1
   0BC6 10 27 00 D4   [ 6] 3466  lbeq noN11
                           3467 ; macro call ->                     INIT_N_1_1_A  
                           3468 ; macro call ->                  CALC_N_1_1_A _N11x, _N11y, _N11z, _N11xi, _N11yi, _N11zi
   0BCA B6 00 01      [ 5] 3469                  LDA _cosx
   0BCD BB 00 02      [ 5] 3470                  ADDA _sinx
   0BD0 B7 00 31      [ 5] 3471                  STA _N11z
   0BD3 40            [ 2] 3472                  NEGA
   0BD4 B7 00 5B      [ 5] 3473                  STA _N11zi
   0BD7 B6 00 02      [ 5] 3474                  LDA   _sinx
   0BDA BB 00 01      [ 5] 3475                  ADDA  _cosx
   0BDD B7 00 31      [ 5] 3476                  STA   _N11z
                           3477 
   0BE0 B6 00 01      [ 5] 3478                  LDA   _cosx
   0BE3 B0 00 02      [ 5] 3479                  SUBA  _sinx
   0BE6 B7 00 00      [ 5] 3480                  STA   _helper
                           3481 
                           3482 ; macro call ->                  A_EQUALS_MUL _N11z, _siny
   0BE9 F6 00 04      [ 5] 3483                  LDB           _siny
   0BEC B6 00 31      [ 5] 3484                  LDA           _N11z
   0BEF 2A 07         [ 3] 3485                  BPL           mul_Ap227
   0BF1 40            [ 2] 3486                  NEGA
   0BF2 5D            [ 2] 3487                  TSTB
   0BF3 2A 07         [ 3] 3488                  BPL           mul_An_Bp227
   0BF5 50            [ 2] 3489                  NEGB
   0BF6 20 09         [ 3] 3490                  BRA           mul_An_Bn227
                           3491  .globl mul_Ap227
   0BF8                    3492 mul_Ap227:
   0BF8 5D            [ 2] 3493                  TSTB
   0BF9 2A 06         [ 3] 3494                  BPL           mul_Ap_Bp227
   0BFB 50            [ 2] 3495                  NEGB
                           3496  .globl mul_An_Bp227
   0BFC                    3497 mul_An_Bp227:
   0BFC 3D            [11] 3498                  MUL
   0BFD 53            [ 2] 3499                  COMB                              ; here we can use this as negd
   0BFE 43            [ 2] 3500                  COMA                              ; since the low nibble of b doesn't interest us
   0BFF 20 01         [ 3] 3501                  BRA           mul_end227
                           3502  .globl mul_Ap_Bp227
   0C01                    3503 mul_Ap_Bp227:
                           3504  .globl mul_An_Bn227
   0C01                    3505 mul_An_Bn227:
   0C01 3D            [11] 3506                  MUL
                           3507  .globl mul_end227
   0C02                    3508 mul_end227:
   0C02 58            [ 2] 3509                  ASLB                              ; this divides d by 64
   0C03 49            [ 2] 3510                  ROLA
   0C04 58            [ 2] 3511                  ASLB
   0C05 49            [ 2] 3512                  ROLA
                           3513 
   0C06 B0 00 03      [ 5] 3514                  SUBA  _cosy
                           3515 ; macro call ->                  STORE_A _N11x
   0C09 B7 00 2F      [ 5] 3516                  STA           _N11x
                           3517 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   0C0C F6 00 05      [ 5] 3518                  LDB           _cosz
   0C0F B6 00 00      [ 5] 3519                  LDA           _helper
   0C12 2A 07         [ 3] 3520                  BPL           mul_Ap229
   0C14 40            [ 2] 3521                  NEGA
   0C15 5D            [ 2] 3522                  TSTB
   0C16 2A 07         [ 3] 3523                  BPL           mul_An_Bp229
   0C18 50            [ 2] 3524                  NEGB
   0C19 20 09         [ 3] 3525                  BRA           mul_An_Bn229
                           3526  .globl mul_Ap229
   0C1B                    3527 mul_Ap229:
   0C1B 5D            [ 2] 3528                  TSTB
   0C1C 2A 06         [ 3] 3529                  BPL           mul_Ap_Bp229
   0C1E 50            [ 2] 3530                  NEGB
                           3531  .globl mul_An_Bp229
   0C1F                    3532 mul_An_Bp229:
   0C1F 3D            [11] 3533                  MUL
   0C20 53            [ 2] 3534                  COMB                              ; here we can use this as negd
   0C21 43            [ 2] 3535                  COMA                              ; since the low nibble of b doesn't interest us
   0C22 20 01         [ 3] 3536                  BRA           mul_end229
                           3537  .globl mul_Ap_Bp229
   0C24                    3538 mul_Ap_Bp229:
                           3539  .globl mul_An_Bn229
   0C24                    3540 mul_An_Bn229:
   0C24 3D            [11] 3541                  MUL
                           3542  .globl mul_end229
   0C25                    3543 mul_end229:
   0C25 58            [ 2] 3544                  ASLB                              ; this divides d by 64
   0C26 49            [ 2] 3545                  ROLA
   0C27 58            [ 2] 3546                  ASLB
   0C28 49            [ 2] 3547                  ROLA
                           3548 
                           3549 ; macro call ->                  STORE_A _N11y
   0C29 B7 00 30      [ 5] 3550                  STA           _N11y
                           3551 ; macro call ->                  A_EQUALS_MUL _N11x, _sinz
   0C2C F6 00 06      [ 5] 3552                  LDB           _sinz
   0C2F B6 00 2F      [ 5] 3553                  LDA           _N11x
   0C32 2A 07         [ 3] 3554                  BPL           mul_Ap231
   0C34 40            [ 2] 3555                  NEGA
   0C35 5D            [ 2] 3556                  TSTB
   0C36 2A 07         [ 3] 3557                  BPL           mul_An_Bp231
   0C38 50            [ 2] 3558                  NEGB
   0C39 20 09         [ 3] 3559                  BRA           mul_An_Bn231
                           3560  .globl mul_Ap231
   0C3B                    3561 mul_Ap231:
   0C3B 5D            [ 2] 3562                  TSTB
   0C3C 2A 06         [ 3] 3563                  BPL           mul_Ap_Bp231
   0C3E 50            [ 2] 3564                  NEGB
                           3565  .globl mul_An_Bp231
   0C3F                    3566 mul_An_Bp231:
   0C3F 3D            [11] 3567                  MUL
   0C40 53            [ 2] 3568                  COMB                              ; here we can use this as negd
   0C41 43            [ 2] 3569                  COMA                              ; since the low nibble of b doesn't interest us
   0C42 20 01         [ 3] 3570                  BRA           mul_end231
                           3571  .globl mul_Ap_Bp231
   0C44                    3572 mul_Ap_Bp231:
                           3573  .globl mul_An_Bn231
   0C44                    3574 mul_An_Bn231:
   0C44 3D            [11] 3575                  MUL
                           3576  .globl mul_end231
   0C45                    3577 mul_end231:
   0C45 58            [ 2] 3578                  ASLB                              ; this divides d by 64
   0C46 49            [ 2] 3579                  ROLA
   0C47 58            [ 2] 3580                  ASLB
   0C48 49            [ 2] 3581                  ROLA
                           3582 
                           3583 ; macro call ->                  ADD_A_TO _N11y
   0C49 BB 00 30      [ 5] 3584                  ADDA          _N11y
                           3585 ; macro call ->                  STORE_A       _N11y
   0C4C B7 00 30      [ 5] 3586                  STA           _N11y
                           3587 ; macro call ->                  STORE_A_NEG _N11yi
   0C4F 40            [ 2] 3588                  NEGA
   0C50 B7 00 5A      [ 5] 3589                  STA           _N11yi
                           3590 ; macro call ->                  A_EQUALS_MUL _N11x, _cosz
   0C53 F6 00 05      [ 5] 3591                  LDB           _cosz
   0C56 B6 00 2F      [ 5] 3592                  LDA           _N11x
   0C59 2A 07         [ 3] 3593                  BPL           mul_Ap235
   0C5B 40            [ 2] 3594                  NEGA
   0C5C 5D            [ 2] 3595                  TSTB
   0C5D 2A 07         [ 3] 3596                  BPL           mul_An_Bp235
   0C5F 50            [ 2] 3597                  NEGB
   0C60 20 09         [ 3] 3598                  BRA           mul_An_Bn235
                           3599  .globl mul_Ap235
   0C62                    3600 mul_Ap235:
   0C62 5D            [ 2] 3601                  TSTB
   0C63 2A 06         [ 3] 3602                  BPL           mul_Ap_Bp235
   0C65 50            [ 2] 3603                  NEGB
                           3604  .globl mul_An_Bp235
   0C66                    3605 mul_An_Bp235:
   0C66 3D            [11] 3606                  MUL
   0C67 53            [ 2] 3607                  COMB                              ; here we can use this as negd
   0C68 43            [ 2] 3608                  COMA                              ; since the low nibble of b doesn't interest us
   0C69 20 01         [ 3] 3609                  BRA           mul_end235
                           3610  .globl mul_Ap_Bp235
   0C6B                    3611 mul_Ap_Bp235:
                           3612  .globl mul_An_Bn235
   0C6B                    3613 mul_An_Bn235:
   0C6B 3D            [11] 3614                  MUL
                           3615  .globl mul_end235
   0C6C                    3616 mul_end235:
   0C6C 58            [ 2] 3617                  ASLB                              ; this divides d by 64
   0C6D 49            [ 2] 3618                  ROLA
   0C6E 58            [ 2] 3619                  ASLB
   0C6F 49            [ 2] 3620                  ROLA
                           3621 
                           3622 ; macro call ->                  STORE_A _N11x
   0C70 B7 00 2F      [ 5] 3623                  STA           _N11x
                           3624 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   0C73 F6 00 06      [ 5] 3625                  LDB           _sinz
   0C76 B6 00 00      [ 5] 3626                  LDA           _helper
   0C79 2A 07         [ 3] 3627                  BPL           mul_Ap237
   0C7B 40            [ 2] 3628                  NEGA
   0C7C 5D            [ 2] 3629                  TSTB
   0C7D 2A 07         [ 3] 3630                  BPL           mul_An_Bp237
   0C7F 50            [ 2] 3631                  NEGB
   0C80 20 09         [ 3] 3632                  BRA           mul_An_Bn237
                           3633  .globl mul_Ap237
   0C82                    3634 mul_Ap237:
   0C82 5D            [ 2] 3635                  TSTB
   0C83 2A 06         [ 3] 3636                  BPL           mul_Ap_Bp237
   0C85 50            [ 2] 3637                  NEGB
                           3638  .globl mul_An_Bp237
   0C86                    3639 mul_An_Bp237:
   0C86 3D            [11] 3640                  MUL
   0C87 53            [ 2] 3641                  COMB                              ; here we can use this as negd
   0C88 43            [ 2] 3642                  COMA                              ; since the low nibble of b doesn't interest us
   0C89 20 01         [ 3] 3643                  BRA           mul_end237
                           3644  .globl mul_Ap_Bp237
   0C8B                    3645 mul_Ap_Bp237:
                           3646  .globl mul_An_Bn237
   0C8B                    3647 mul_An_Bn237:
   0C8B 3D            [11] 3648                  MUL
                           3649  .globl mul_end237
   0C8C                    3650 mul_end237:
   0C8C 58            [ 2] 3651                  ASLB                              ; this divides d by 64
   0C8D 49            [ 2] 3652                  ROLA
   0C8E 58            [ 2] 3653                  ASLB
   0C8F 49            [ 2] 3654                  ROLA
                           3655 
                           3656 ; macro call ->                  SUB_A_FROM _N11x
   0C90 40            [ 2] 3657                  NEGA
                           3658 ; macro call ->                  ADD_A_TO      _N11x
   0C91 BB 00 2F      [ 5] 3659                  ADDA          _N11x
                           3660 ; macro call ->                  STORE_A       _N11x
   0C94 B7 00 2F      [ 5] 3661                  STA           _N11x
                           3662 ; macro call ->                  STORE_A_NEG _N11xi
   0C97 40            [ 2] 3663                  NEGA
   0C98 B7 00 59      [ 5] 3664                  STA           _N11xi
   0C9B B6 00 0A      [ 5] 3665  lda _vectorBits
                           3666  .globl noN11
   0C9E                    3667 noN11:
   0C9E 85 10         [ 2] 3668  bita #TEST_1_N_1
   0CA0 10 27 00 D4   [ 6] 3669  lbeq no1N1
                           3670 ; macro call ->                     INIT_1_N_1_A  
                           3671 ; macro call ->                  CALC_1_N_1_A _1N1x, _1N1y, _1N1z, _1N1xi, _1N1yi, _1N1zi
   0CA4 B6 00 02      [ 5] 3672                  LDA _sinx
   0CA7 B0 00 01      [ 5] 3673                  SUBA _cosx
   0CAA B7 00 34      [ 5] 3674                  STA _1N1z
   0CAD 40            [ 2] 3675                  NEGA
   0CAE B7 00 5E      [ 5] 3676                  STA _1N1zi
   0CB1 B6 00 02      [ 5] 3677                  LDA   _sinx
   0CB4 B0 00 01      [ 5] 3678                  SUBA  _cosx
   0CB7 B7 00 34      [ 5] 3679                  STA   _1N1z
                           3680 
   0CBA B6 00 01      [ 5] 3681                  LDA   _cosx
   0CBD BB 00 02      [ 5] 3682                  ADDA  _sinx
   0CC0 B7 00 00      [ 5] 3683                  STA   _helper
                           3684 
                           3685 ; macro call ->                  A_EQUALS_MUL _1N1z, _siny
   0CC3 F6 00 04      [ 5] 3686                  LDB           _siny
   0CC6 B6 00 34      [ 5] 3687                  LDA           _1N1z
   0CC9 2A 07         [ 3] 3688                  BPL           mul_Ap244
   0CCB 40            [ 2] 3689                  NEGA
   0CCC 5D            [ 2] 3690                  TSTB
   0CCD 2A 07         [ 3] 3691                  BPL           mul_An_Bp244
   0CCF 50            [ 2] 3692                  NEGB
   0CD0 20 09         [ 3] 3693                  BRA           mul_An_Bn244
                           3694  .globl mul_Ap244
   0CD2                    3695 mul_Ap244:
   0CD2 5D            [ 2] 3696                  TSTB
   0CD3 2A 06         [ 3] 3697                  BPL           mul_Ap_Bp244
   0CD5 50            [ 2] 3698                  NEGB
                           3699  .globl mul_An_Bp244
   0CD6                    3700 mul_An_Bp244:
   0CD6 3D            [11] 3701                  MUL
   0CD7 53            [ 2] 3702                  COMB                              ; here we can use this as negd
   0CD8 43            [ 2] 3703                  COMA                              ; since the low nibble of b doesn't interest us
   0CD9 20 01         [ 3] 3704                  BRA           mul_end244
                           3705  .globl mul_Ap_Bp244
   0CDB                    3706 mul_Ap_Bp244:
                           3707  .globl mul_An_Bn244
   0CDB                    3708 mul_An_Bn244:
   0CDB 3D            [11] 3709                  MUL
                           3710  .globl mul_end244
   0CDC                    3711 mul_end244:
   0CDC 58            [ 2] 3712                  ASLB                              ; this divides d by 64
   0CDD 49            [ 2] 3713                  ROLA
   0CDE 58            [ 2] 3714                  ASLB
   0CDF 49            [ 2] 3715                  ROLA
                           3716 
   0CE0 BB 00 03      [ 5] 3717                  ADDA  _cosy
                           3718 ; macro call ->                  STORE_A _1N1x
   0CE3 B7 00 32      [ 5] 3719                  STA           _1N1x
                           3720 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   0CE6 F6 00 05      [ 5] 3721                  LDB           _cosz
   0CE9 B6 00 00      [ 5] 3722                  LDA           _helper
   0CEC 2A 07         [ 3] 3723                  BPL           mul_Ap246
   0CEE 40            [ 2] 3724                  NEGA
   0CEF 5D            [ 2] 3725                  TSTB
   0CF0 2A 07         [ 3] 3726                  BPL           mul_An_Bp246
   0CF2 50            [ 2] 3727                  NEGB
   0CF3 20 09         [ 3] 3728                  BRA           mul_An_Bn246
                           3729  .globl mul_Ap246
   0CF5                    3730 mul_Ap246:
   0CF5 5D            [ 2] 3731                  TSTB
   0CF6 2A 06         [ 3] 3732                  BPL           mul_Ap_Bp246
   0CF8 50            [ 2] 3733                  NEGB
                           3734  .globl mul_An_Bp246
   0CF9                    3735 mul_An_Bp246:
   0CF9 3D            [11] 3736                  MUL
   0CFA 53            [ 2] 3737                  COMB                              ; here we can use this as negd
   0CFB 43            [ 2] 3738                  COMA                              ; since the low nibble of b doesn't interest us
   0CFC 20 01         [ 3] 3739                  BRA           mul_end246
                           3740  .globl mul_Ap_Bp246
   0CFE                    3741 mul_Ap_Bp246:
                           3742  .globl mul_An_Bn246
   0CFE                    3743 mul_An_Bn246:
   0CFE 3D            [11] 3744                  MUL
                           3745  .globl mul_end246
   0CFF                    3746 mul_end246:
   0CFF 58            [ 2] 3747                  ASLB                              ; this divides d by 64
   0D00 49            [ 2] 3748                  ROLA
   0D01 58            [ 2] 3749                  ASLB
   0D02 49            [ 2] 3750                  ROLA
                           3751 
                           3752 ; macro call ->                  STORE_A _1N1y
   0D03 B7 00 33      [ 5] 3753                  STA           _1N1y
                           3754 ; macro call ->                  A_EQUALS_MUL _1N1x, _sinz
   0D06 F6 00 06      [ 5] 3755                  LDB           _sinz
   0D09 B6 00 32      [ 5] 3756                  LDA           _1N1x
   0D0C 2A 07         [ 3] 3757                  BPL           mul_Ap248
   0D0E 40            [ 2] 3758                  NEGA
   0D0F 5D            [ 2] 3759                  TSTB
   0D10 2A 07         [ 3] 3760                  BPL           mul_An_Bp248
   0D12 50            [ 2] 3761                  NEGB
   0D13 20 09         [ 3] 3762                  BRA           mul_An_Bn248
                           3763  .globl mul_Ap248
   0D15                    3764 mul_Ap248:
   0D15 5D            [ 2] 3765                  TSTB
   0D16 2A 06         [ 3] 3766                  BPL           mul_Ap_Bp248
   0D18 50            [ 2] 3767                  NEGB
                           3768  .globl mul_An_Bp248
   0D19                    3769 mul_An_Bp248:
   0D19 3D            [11] 3770                  MUL
   0D1A 53            [ 2] 3771                  COMB                              ; here we can use this as negd
   0D1B 43            [ 2] 3772                  COMA                              ; since the low nibble of b doesn't interest us
   0D1C 20 01         [ 3] 3773                  BRA           mul_end248
                           3774  .globl mul_Ap_Bp248
   0D1E                    3775 mul_Ap_Bp248:
                           3776  .globl mul_An_Bn248
   0D1E                    3777 mul_An_Bn248:
   0D1E 3D            [11] 3778                  MUL
                           3779  .globl mul_end248
   0D1F                    3780 mul_end248:
   0D1F 58            [ 2] 3781                  ASLB                              ; this divides d by 64
   0D20 49            [ 2] 3782                  ROLA
   0D21 58            [ 2] 3783                  ASLB
   0D22 49            [ 2] 3784                  ROLA
                           3785 
                           3786 ; macro call ->                  ADD_A_TO _1N1y
   0D23 BB 00 33      [ 5] 3787                  ADDA          _1N1y
                           3788 ; macro call ->                  STORE_A       _1N1y
   0D26 B7 00 33      [ 5] 3789                  STA           _1N1y
                           3790 ; macro call ->                  STORE_A_NEG _1N1yi
   0D29 40            [ 2] 3791                  NEGA
   0D2A B7 00 5D      [ 5] 3792                  STA           _1N1yi
                           3793 ; macro call ->                  A_EQUALS_MUL _1N1x, _cosz
   0D2D F6 00 05      [ 5] 3794                  LDB           _cosz
   0D30 B6 00 32      [ 5] 3795                  LDA           _1N1x
   0D33 2A 07         [ 3] 3796                  BPL           mul_Ap252
   0D35 40            [ 2] 3797                  NEGA
   0D36 5D            [ 2] 3798                  TSTB
   0D37 2A 07         [ 3] 3799                  BPL           mul_An_Bp252
   0D39 50            [ 2] 3800                  NEGB
   0D3A 20 09         [ 3] 3801                  BRA           mul_An_Bn252
                           3802  .globl mul_Ap252
   0D3C                    3803 mul_Ap252:
   0D3C 5D            [ 2] 3804                  TSTB
   0D3D 2A 06         [ 3] 3805                  BPL           mul_Ap_Bp252
   0D3F 50            [ 2] 3806                  NEGB
                           3807  .globl mul_An_Bp252
   0D40                    3808 mul_An_Bp252:
   0D40 3D            [11] 3809                  MUL
   0D41 53            [ 2] 3810                  COMB                              ; here we can use this as negd
   0D42 43            [ 2] 3811                  COMA                              ; since the low nibble of b doesn't interest us
   0D43 20 01         [ 3] 3812                  BRA           mul_end252
                           3813  .globl mul_Ap_Bp252
   0D45                    3814 mul_Ap_Bp252:
                           3815  .globl mul_An_Bn252
   0D45                    3816 mul_An_Bn252:
   0D45 3D            [11] 3817                  MUL
                           3818  .globl mul_end252
   0D46                    3819 mul_end252:
   0D46 58            [ 2] 3820                  ASLB                              ; this divides d by 64
   0D47 49            [ 2] 3821                  ROLA
   0D48 58            [ 2] 3822                  ASLB
   0D49 49            [ 2] 3823                  ROLA
                           3824 
                           3825 ; macro call ->                  STORE_A _1N1x
   0D4A B7 00 32      [ 5] 3826                  STA           _1N1x
                           3827 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   0D4D F6 00 06      [ 5] 3828                  LDB           _sinz
   0D50 B6 00 00      [ 5] 3829                  LDA           _helper
   0D53 2A 07         [ 3] 3830                  BPL           mul_Ap254
   0D55 40            [ 2] 3831                  NEGA
   0D56 5D            [ 2] 3832                  TSTB
   0D57 2A 07         [ 3] 3833                  BPL           mul_An_Bp254
   0D59 50            [ 2] 3834                  NEGB
   0D5A 20 09         [ 3] 3835                  BRA           mul_An_Bn254
                           3836  .globl mul_Ap254
   0D5C                    3837 mul_Ap254:
   0D5C 5D            [ 2] 3838                  TSTB
   0D5D 2A 06         [ 3] 3839                  BPL           mul_Ap_Bp254
   0D5F 50            [ 2] 3840                  NEGB
                           3841  .globl mul_An_Bp254
   0D60                    3842 mul_An_Bp254:
   0D60 3D            [11] 3843                  MUL
   0D61 53            [ 2] 3844                  COMB                              ; here we can use this as negd
   0D62 43            [ 2] 3845                  COMA                              ; since the low nibble of b doesn't interest us
   0D63 20 01         [ 3] 3846                  BRA           mul_end254
                           3847  .globl mul_Ap_Bp254
   0D65                    3848 mul_Ap_Bp254:
                           3849  .globl mul_An_Bn254
   0D65                    3850 mul_An_Bn254:
   0D65 3D            [11] 3851                  MUL
                           3852  .globl mul_end254
   0D66                    3853 mul_end254:
   0D66 58            [ 2] 3854                  ASLB                              ; this divides d by 64
   0D67 49            [ 2] 3855                  ROLA
   0D68 58            [ 2] 3856                  ASLB
   0D69 49            [ 2] 3857                  ROLA
                           3858 
                           3859 ; macro call ->                  SUB_A_FROM _1N1x
   0D6A 40            [ 2] 3860                  NEGA
                           3861 ; macro call ->                  ADD_A_TO      _1N1x
   0D6B BB 00 32      [ 5] 3862                  ADDA          _1N1x
                           3863 ; macro call ->                  STORE_A       _1N1x
   0D6E B7 00 32      [ 5] 3864                  STA           _1N1x
                           3865 ; macro call ->                  STORE_A_NEG _1N1xi
   0D71 40            [ 2] 3866                  NEGA
   0D72 B7 00 5C      [ 5] 3867                  STA           _1N1xi
   0D75 B6 00 0A      [ 5] 3868  lda _vectorBits
                           3869  .globl no1N1
   0D78                    3870 no1N1:
   0D78 85 20         [ 2] 3871  bita #TEST_1_1_N
   0D7A 10 27 00 D2   [ 6] 3872  lbeq no11N
                           3873 ; macro call ->                     INIT_1_1_N_A  
                           3874 ; macro call ->                  CALC_1_1_N_A _11Nx, _11Ny, _11Nz, _11Nxi, _11Nyi, _11Nzi
   0D7E B6 00 01      [ 5] 3875                  LDA _cosx
   0D81 B0 00 02      [ 5] 3876                  SUBA _sinx
   0D84 B7 00 37      [ 5] 3877                  STA _11Nz
   0D87 40            [ 2] 3878                  NEGA
   0D88 B7 00 61      [ 5] 3879                  STA _11Nzi
   0D8B B6 00 01      [ 5] 3880                  LDA   _cosx
   0D8E B0 00 02      [ 5] 3881                  SUBA  _sinx
   0D91 B7 00 37      [ 5] 3882                  STA   _11Nz
                           3883 
   0D94 B6 00 01      [ 5] 3884                  LDA   _cosx
   0D97 40            [ 2] 3885                  NEGA
   0D98 B0 00 02      [ 5] 3886                  SUBA  _sinx
   0D9B B7 00 00      [ 5] 3887                  STA   _helper
                           3888 
                           3889 ; macro call ->                  A_EQUALS_MUL _11Nz, _siny
   0D9E F6 00 04      [ 5] 3890                  LDB           _siny
   0DA1 B6 00 37      [ 5] 3891                  LDA           _11Nz
   0DA4 2A 07         [ 3] 3892                  BPL           mul_Ap261
   0DA6 40            [ 2] 3893                  NEGA
   0DA7 5D            [ 2] 3894                  TSTB
   0DA8 2A 07         [ 3] 3895                  BPL           mul_An_Bp261
   0DAA 50            [ 2] 3896                  NEGB
   0DAB 20 09         [ 3] 3897                  BRA           mul_An_Bn261
                           3898  .globl mul_Ap261
   0DAD                    3899 mul_Ap261:
   0DAD 5D            [ 2] 3900                  TSTB
   0DAE 2A 06         [ 3] 3901                  BPL           mul_Ap_Bp261
   0DB0 50            [ 2] 3902                  NEGB
                           3903  .globl mul_An_Bp261
   0DB1                    3904 mul_An_Bp261:
   0DB1 3D            [11] 3905                  MUL
   0DB2 53            [ 2] 3906                  COMB                              ; here we can use this as negd
   0DB3 43            [ 2] 3907                  COMA                              ; since the low nibble of b doesn't interest us
   0DB4 20 01         [ 3] 3908                  BRA           mul_end261
                           3909  .globl mul_Ap_Bp261
   0DB6                    3910 mul_Ap_Bp261:
                           3911  .globl mul_An_Bn261
   0DB6                    3912 mul_An_Bn261:
   0DB6 3D            [11] 3913                  MUL
                           3914  .globl mul_end261
   0DB7                    3915 mul_end261:
   0DB7 58            [ 2] 3916                  ASLB                              ; this divides d by 64
   0DB8 49            [ 2] 3917                  ROLA
   0DB9 58            [ 2] 3918                  ASLB
   0DBA 49            [ 2] 3919                  ROLA
                           3920 
   0DBB BB 00 03      [ 5] 3921                  ADDA  _cosy
                           3922 ; macro call ->                  STORE_A _11Nx
   0DBE B7 00 35      [ 5] 3923                  STA           _11Nx
                           3924 ; macro call ->                  A_EQUALS_MUL _helper, _cosz
   0DC1 F6 00 05      [ 5] 3925                  LDB           _cosz
   0DC4 B6 00 00      [ 5] 3926                  LDA           _helper
   0DC7 2A 07         [ 3] 3927                  BPL           mul_Ap263
   0DC9 40            [ 2] 3928                  NEGA
   0DCA 5D            [ 2] 3929                  TSTB
   0DCB 2A 07         [ 3] 3930                  BPL           mul_An_Bp263
   0DCD 50            [ 2] 3931                  NEGB
   0DCE 20 09         [ 3] 3932                  BRA           mul_An_Bn263
                           3933  .globl mul_Ap263
   0DD0                    3934 mul_Ap263:
   0DD0 5D            [ 2] 3935                  TSTB
   0DD1 2A 06         [ 3] 3936                  BPL           mul_Ap_Bp263
   0DD3 50            [ 2] 3937                  NEGB
                           3938  .globl mul_An_Bp263
   0DD4                    3939 mul_An_Bp263:
   0DD4 3D            [11] 3940                  MUL
   0DD5 53            [ 2] 3941                  COMB                              ; here we can use this as negd
   0DD6 43            [ 2] 3942                  COMA                              ; since the low nibble of b doesn't interest us
   0DD7 20 01         [ 3] 3943                  BRA           mul_end263
                           3944  .globl mul_Ap_Bp263
   0DD9                    3945 mul_Ap_Bp263:
                           3946  .globl mul_An_Bn263
   0DD9                    3947 mul_An_Bn263:
   0DD9 3D            [11] 3948                  MUL
                           3949  .globl mul_end263
   0DDA                    3950 mul_end263:
   0DDA 58            [ 2] 3951                  ASLB                              ; this divides d by 64
   0DDB 49            [ 2] 3952                  ROLA
   0DDC 58            [ 2] 3953                  ASLB
   0DDD 49            [ 2] 3954                  ROLA
                           3955 
                           3956 ; macro call ->                  STORE_A _11Ny
   0DDE B7 00 36      [ 5] 3957                  STA           _11Ny
                           3958 ; macro call ->                  A_EQUALS_MUL _11Nx, _sinz
   0DE1 F6 00 06      [ 5] 3959                  LDB           _sinz
   0DE4 B6 00 35      [ 5] 3960                  LDA           _11Nx
   0DE7 2A 07         [ 3] 3961                  BPL           mul_Ap265
   0DE9 40            [ 2] 3962                  NEGA
   0DEA 5D            [ 2] 3963                  TSTB
   0DEB 2A 07         [ 3] 3964                  BPL           mul_An_Bp265
   0DED 50            [ 2] 3965                  NEGB
   0DEE 20 09         [ 3] 3966                  BRA           mul_An_Bn265
                           3967  .globl mul_Ap265
   0DF0                    3968 mul_Ap265:
   0DF0 5D            [ 2] 3969                  TSTB
   0DF1 2A 06         [ 3] 3970                  BPL           mul_Ap_Bp265
   0DF3 50            [ 2] 3971                  NEGB
                           3972  .globl mul_An_Bp265
   0DF4                    3973 mul_An_Bp265:
   0DF4 3D            [11] 3974                  MUL
   0DF5 53            [ 2] 3975                  COMB                              ; here we can use this as negd
   0DF6 43            [ 2] 3976                  COMA                              ; since the low nibble of b doesn't interest us
   0DF7 20 01         [ 3] 3977                  BRA           mul_end265
                           3978  .globl mul_Ap_Bp265
   0DF9                    3979 mul_Ap_Bp265:
                           3980  .globl mul_An_Bn265
   0DF9                    3981 mul_An_Bn265:
   0DF9 3D            [11] 3982                  MUL
                           3983  .globl mul_end265
   0DFA                    3984 mul_end265:
   0DFA 58            [ 2] 3985                  ASLB                              ; this divides d by 64
   0DFB 49            [ 2] 3986                  ROLA
   0DFC 58            [ 2] 3987                  ASLB
   0DFD 49            [ 2] 3988                  ROLA
                           3989 
                           3990 ; macro call ->                  ADD_A_TO _11Ny
   0DFE BB 00 36      [ 5] 3991                  ADDA          _11Ny
                           3992 ; macro call ->                  STORE_A       _11Ny
   0E01 B7 00 36      [ 5] 3993                  STA           _11Ny
                           3994 ; macro call ->                  STORE_A_NEG _11Nyi
   0E04 40            [ 2] 3995                  NEGA
   0E05 B7 00 60      [ 5] 3996                  STA           _11Nyi
                           3997 ; macro call ->                  A_EQUALS_MUL _11Nx, _cosz
   0E08 F6 00 05      [ 5] 3998                  LDB           _cosz
   0E0B B6 00 35      [ 5] 3999                  LDA           _11Nx
   0E0E 2A 07         [ 3] 4000                  BPL           mul_Ap269
   0E10 40            [ 2] 4001                  NEGA
   0E11 5D            [ 2] 4002                  TSTB
   0E12 2A 07         [ 3] 4003                  BPL           mul_An_Bp269
   0E14 50            [ 2] 4004                  NEGB
   0E15 20 09         [ 3] 4005                  BRA           mul_An_Bn269
                           4006  .globl mul_Ap269
   0E17                    4007 mul_Ap269:
   0E17 5D            [ 2] 4008                  TSTB
   0E18 2A 06         [ 3] 4009                  BPL           mul_Ap_Bp269
   0E1A 50            [ 2] 4010                  NEGB
                           4011  .globl mul_An_Bp269
   0E1B                    4012 mul_An_Bp269:
   0E1B 3D            [11] 4013                  MUL
   0E1C 53            [ 2] 4014                  COMB                              ; here we can use this as negd
   0E1D 43            [ 2] 4015                  COMA                              ; since the low nibble of b doesn't interest us
   0E1E 20 01         [ 3] 4016                  BRA           mul_end269
                           4017  .globl mul_Ap_Bp269
   0E20                    4018 mul_Ap_Bp269:
                           4019  .globl mul_An_Bn269
   0E20                    4020 mul_An_Bn269:
   0E20 3D            [11] 4021                  MUL
                           4022  .globl mul_end269
   0E21                    4023 mul_end269:
   0E21 58            [ 2] 4024                  ASLB                              ; this divides d by 64
   0E22 49            [ 2] 4025                  ROLA
   0E23 58            [ 2] 4026                  ASLB
   0E24 49            [ 2] 4027                  ROLA
                           4028 
                           4029 ; macro call ->                  STORE_A _11Nx
   0E25 B7 00 35      [ 5] 4030                  STA           _11Nx
                           4031 ; macro call ->                  A_EQUALS_MUL _helper, _sinz
   0E28 F6 00 06      [ 5] 4032                  LDB           _sinz
   0E2B B6 00 00      [ 5] 4033                  LDA           _helper
   0E2E 2A 07         [ 3] 4034                  BPL           mul_Ap271
   0E30 40            [ 2] 4035                  NEGA
   0E31 5D            [ 2] 4036                  TSTB
   0E32 2A 07         [ 3] 4037                  BPL           mul_An_Bp271
   0E34 50            [ 2] 4038                  NEGB
   0E35 20 09         [ 3] 4039                  BRA           mul_An_Bn271
                           4040  .globl mul_Ap271
   0E37                    4041 mul_Ap271:
   0E37 5D            [ 2] 4042                  TSTB
   0E38 2A 06         [ 3] 4043                  BPL           mul_Ap_Bp271
   0E3A 50            [ 2] 4044                  NEGB
                           4045  .globl mul_An_Bp271
   0E3B                    4046 mul_An_Bp271:
   0E3B 3D            [11] 4047                  MUL
   0E3C 53            [ 2] 4048                  COMB                              ; here we can use this as negd
   0E3D 43            [ 2] 4049                  COMA                              ; since the low nibble of b doesn't interest us
   0E3E 20 01         [ 3] 4050                  BRA           mul_end271
                           4051  .globl mul_Ap_Bp271
   0E40                    4052 mul_Ap_Bp271:
                           4053  .globl mul_An_Bn271
   0E40                    4054 mul_An_Bn271:
   0E40 3D            [11] 4055                  MUL
                           4056  .globl mul_end271
   0E41                    4057 mul_end271:
   0E41 58            [ 2] 4058                  ASLB                              ; this divides d by 64
   0E42 49            [ 2] 4059                  ROLA
   0E43 58            [ 2] 4060                  ASLB
   0E44 49            [ 2] 4061                  ROLA
                           4062 
                           4063 ; macro call ->                  SUB_A_FROM _11Nx
   0E45 40            [ 2] 4064                  NEGA
                           4065 ; macro call ->                  ADD_A_TO      _11Nx
   0E46 BB 00 35      [ 5] 4066                  ADDA          _11Nx
                           4067 ; macro call ->                  STORE_A       _11Nx
   0E49 B7 00 35      [ 5] 4068                  STA           _11Nx
                           4069 ; macro call ->                  STORE_A_NEG _11Nxi
   0E4C 40            [ 2] 4070                  NEGA
   0E4D B7 00 5F      [ 5] 4071                  STA           _11Nxi
                           4072  .globl no11N
   0E50                    4073 no11N:
                           4074 
   0E50 39            [ 5] 4075 				rts
                           4076 
ASxxxx Assembler V05.00  (Motorola 6809), page 1.
Hexidecimal [16-Bits]

Symbol Table

    .__.$$$.       =   2710 L   |     .__.ABS.       =   0000 G
    .__.CPU.       =   0000 L   |     .__.H$L.       =   0001 L
  2 A$3dForC.pre.a     01C6 GR  |   2 A$3dForC.pre.a     01C7 GR
  2 A$3dForC.pre.a     01C8 GR  |   2 A$3dForC.pre.a     01C9 GR
  2 A$3dForC.pre.a     01CB GR  |   2 A$3dForC.pre.a     01CC GR
  2 A$3dForC.pre.a     01CD GR  |   2 A$3dForC.pre.a     01CE GR
  2 A$3dForC.pre.a     01CF GR  |   2 A$3dForC.pre.a     01D0 GR
  2 A$3dForC.pre.a     01D1 GR  |   2 A$3dForC.pre.a     01D4 GR
  2 A$3dForC.pre.a     01D7 GR  |   2 A$3dForC.pre.a     01D8 GR
  2 A$3dForC.pre.a     01DB GR  |   2 A$3dForC.pre.a     01DE GR
  2 A$3dForC.pre.a     01E1 GR  |   2 A$3dForC.pre.a     01E3 GR
  2 A$3dForC.pre.a     01E4 GR  |   2 A$3dForC.pre.a     01E5 GR
  2 A$3dForC.pre.a     01E7 GR  |   2 A$3dForC.pre.a     01E8 GR
  2 A$3dForC.pre.a     01EA GR  |   2 A$3dForC.pre.a     01EB GR
  2 A$3dForC.pre.a     01ED GR  |   2 A$3dForC.pre.a     01EE GR
  2 A$3dForC.pre.a     01EF GR  |   2 A$3dForC.pre.a     01F0 GR
  2 A$3dForC.pre.a     01F1 GR  |   2 A$3dForC.pre.a     01F3 GR
  2 A$3dForC.pre.a     01F4 GR  |   2 A$3dForC.pre.a     01F5 GR
  2 A$3dForC.pre.a     01F6 GR  |   2 A$3dForC.pre.a     01F7 GR
  2 A$3dForC.pre.a     01F8 GR  |   2 A$3dForC.pre.a     01FB GR
  2 A$3dForC.pre.a     01FE GR  |   2 A$3dForC.pre.a     0201 GR
  2 A$3dForC.pre.a     0203 GR  |   2 A$3dForC.pre.a     0204 GR
  2 A$3dForC.pre.a     0205 GR  |   2 A$3dForC.pre.a     0207 GR
  2 A$3dForC.pre.a     0208 GR  |   2 A$3dForC.pre.a     020A GR
  2 A$3dForC.pre.a     020B GR  |   2 A$3dForC.pre.a     020D GR
  2 A$3dForC.pre.a     020E GR  |   2 A$3dForC.pre.a     020F GR
  2 A$3dForC.pre.a     0210 GR  |   2 A$3dForC.pre.a     0211 GR
  2 A$3dForC.pre.a     0213 GR  |   2 A$3dForC.pre.a     0214 GR
  2 A$3dForC.pre.a     0215 GR  |   2 A$3dForC.pre.a     0216 GR
  2 A$3dForC.pre.a     0217 GR  |   2 A$3dForC.pre.a     0218 GR
  2 A$3dForC.pre.a     021B GR  |   2 A$3dForC.pre.a     021E GR
  2 A$3dForC.pre.a     021F GR  |   2 A$3dForC.pre.a     0222 GR
  2 A$3dForC.pre.a     0225 GR  |   2 A$3dForC.pre.a     0227 GR
  2 A$3dForC.pre.a     0229 GR  |   2 A$3dForC.pre.a     022C GR
  2 A$3dForC.pre.a     022F GR  |   2 A$3dForC.pre.a     0231 GR
  2 A$3dForC.pre.a     0232 GR  |   2 A$3dForC.pre.a     0233 GR
  2 A$3dForC.pre.a     0235 GR  |   2 A$3dForC.pre.a     0236 GR
  2 A$3dForC.pre.a     0238 GR  |   2 A$3dForC.pre.a     0239 GR
  2 A$3dForC.pre.a     023B GR  |   2 A$3dForC.pre.a     023C GR
  2 A$3dForC.pre.a     023D GR  |   2 A$3dForC.pre.a     023E GR
  2 A$3dForC.pre.a     023F GR  |   2 A$3dForC.pre.a     0241 GR
  2 A$3dForC.pre.a     0242 GR  |   2 A$3dForC.pre.a     0243 GR
  2 A$3dForC.pre.a     0244 GR  |   2 A$3dForC.pre.a     0245 GR
  2 A$3dForC.pre.a     0246 GR  |   2 A$3dForC.pre.a     0249 GR
  2 A$3dForC.pre.a     024A GR  |   2 A$3dForC.pre.a     024D GR
  2 A$3dForC.pre.a     0250 GR  |   2 A$3dForC.pre.a     0253 GR
  2 A$3dForC.pre.a     0255 GR  |   2 A$3dForC.pre.a     0256 GR
  2 A$3dForC.pre.a     0257 GR  |   2 A$3dForC.pre.a     0259 GR
  2 A$3dForC.pre.a     025A GR  |   2 A$3dForC.pre.a     025C GR
  2 A$3dForC.pre.a     025D GR  |   2 A$3dForC.pre.a     025F GR
  2 A$3dForC.pre.a     0260 GR  |   2 A$3dForC.pre.a     0261 GR
  2 A$3dForC.pre.a     0262 GR  |   2 A$3dForC.pre.a     0263 GR
  2 A$3dForC.pre.a     0265 GR  |   2 A$3dForC.pre.a     0266 GR
  2 A$3dForC.pre.a     0267 GR  |   2 A$3dForC.pre.a     0268 GR
  2 A$3dForC.pre.a     0269 GR  |   2 A$3dForC.pre.a     026A GR
  2 A$3dForC.pre.a     026D GR  |   2 A$3dForC.pre.a     026E GR
  2 A$3dForC.pre.a     0271 GR  |   2 A$3dForC.pre.a     0274 GR
  2 A$3dForC.pre.a     0276 GR  |   2 A$3dForC.pre.a     027A GR
  2 A$3dForC.pre.a     027D GR  |   2 A$3dForC.pre.a     027E GR
  2 A$3dForC.pre.a     0281 GR  |   2 A$3dForC.pre.a     0284 GR
  2 A$3dForC.pre.a     0287 GR  |   2 A$3dForC.pre.a     0289 GR
  2 A$3dForC.pre.a     028A GR  |   2 A$3dForC.pre.a     028B GR
  2 A$3dForC.pre.a     028D GR  |   2 A$3dForC.pre.a     028E GR
  2 A$3dForC.pre.a     0290 GR  |   2 A$3dForC.pre.a     0291 GR
  2 A$3dForC.pre.a     0293 GR  |   2 A$3dForC.pre.a     0294 GR
  2 A$3dForC.pre.a     0295 GR  |   2 A$3dForC.pre.a     0296 GR
  2 A$3dForC.pre.a     0297 GR  |   2 A$3dForC.pre.a     0299 GR
  2 A$3dForC.pre.a     029A GR  |   2 A$3dForC.pre.a     029B GR
  2 A$3dForC.pre.a     029C GR  |   2 A$3dForC.pre.a     029D GR
  2 A$3dForC.pre.a     029E GR  |   2 A$3dForC.pre.a     02A1 GR
  2 A$3dForC.pre.a     02A4 GR  |   2 A$3dForC.pre.a     02A7 GR
  2 A$3dForC.pre.a     02AA GR  |   2 A$3dForC.pre.a     02AC GR
  2 A$3dForC.pre.a     02AD GR  |   2 A$3dForC.pre.a     02AE GR
  2 A$3dForC.pre.a     02B0 GR  |   2 A$3dForC.pre.a     02B1 GR
  2 A$3dForC.pre.a     02B3 GR  |   2 A$3dForC.pre.a     02B4 GR
  2 A$3dForC.pre.a     02B6 GR  |   2 A$3dForC.pre.a     02B7 GR
  2 A$3dForC.pre.a     02B8 GR  |   2 A$3dForC.pre.a     02B9 GR
  2 A$3dForC.pre.a     02BA GR  |   2 A$3dForC.pre.a     02BC GR
  2 A$3dForC.pre.a     02BD GR  |   2 A$3dForC.pre.a     02BE GR
  2 A$3dForC.pre.a     02BF GR  |   2 A$3dForC.pre.a     02C0 GR
  2 A$3dForC.pre.a     02C1 GR  |   2 A$3dForC.pre.a     02C4 GR
  2 A$3dForC.pre.a     02C7 GR  |   2 A$3dForC.pre.a     02CA GR
  2 A$3dForC.pre.a     02CC GR  |   2 A$3dForC.pre.a     02CD GR
  2 A$3dForC.pre.a     02CE GR  |   2 A$3dForC.pre.a     02D0 GR
  2 A$3dForC.pre.a     02D1 GR  |   2 A$3dForC.pre.a     02D3 GR
  2 A$3dForC.pre.a     02D4 GR  |   2 A$3dForC.pre.a     02D6 GR
  2 A$3dForC.pre.a     02D7 GR  |   2 A$3dForC.pre.a     02D8 GR
  2 A$3dForC.pre.a     02D9 GR  |   2 A$3dForC.pre.a     02DA GR
  2 A$3dForC.pre.a     02DC GR  |   2 A$3dForC.pre.a     02DD GR
  2 A$3dForC.pre.a     02DE GR  |   2 A$3dForC.pre.a     02DF GR
  2 A$3dForC.pre.a     02E0 GR  |   2 A$3dForC.pre.a     02E1 GR
  2 A$3dForC.pre.a     02E4 GR  |   2 A$3dForC.pre.a     02E7 GR
  2 A$3dForC.pre.a     02E8 GR  |   2 A$3dForC.pre.a     02EB GR
  2 A$3dForC.pre.a     02EE GR  |   2 A$3dForC.pre.a     02F1 GR
  2 A$3dForC.pre.a     02F3 GR  |   2 A$3dForC.pre.a     02F4 GR
  2 A$3dForC.pre.a     02F5 GR  |   2 A$3dForC.pre.a     02F7 GR
  2 A$3dForC.pre.a     02F8 GR  |   2 A$3dForC.pre.a     02FA GR
  2 A$3dForC.pre.a     02FB GR  |   2 A$3dForC.pre.a     02FD GR
  2 A$3dForC.pre.a     02FE GR  |   2 A$3dForC.pre.a     02FF GR
  2 A$3dForC.pre.a     0300 GR  |   2 A$3dForC.pre.a     0301 GR
  2 A$3dForC.pre.a     0303 GR  |   2 A$3dForC.pre.a     0304 GR
  2 A$3dForC.pre.a     0305 GR  |   2 A$3dForC.pre.a     0306 GR
  2 A$3dForC.pre.a     0307 GR  |   2 A$3dForC.pre.a     0308 GR
  2 A$3dForC.pre.a     030B GR  |   2 A$3dForC.pre.a     030E GR
  2 A$3dForC.pre.a     0311 GR  |   2 A$3dForC.pre.a     0313 GR
  2 A$3dForC.pre.a     0314 GR  |   2 A$3dForC.pre.a     0315 GR
  2 A$3dForC.pre.a     0317 GR  |   2 A$3dForC.pre.a     0318 GR
  2 A$3dForC.pre.a     031A GR  |   2 A$3dForC.pre.a     031B GR
  2 A$3dForC.pre.a     031D GR  |   2 A$3dForC.pre.a     031E GR
  2 A$3dForC.pre.a     031F GR  |   2 A$3dForC.pre.a     0320 GR
  2 A$3dForC.pre.a     0321 GR  |   2 A$3dForC.pre.a     0323 GR
  2 A$3dForC.pre.a     0324 GR  |   2 A$3dForC.pre.a     0325 GR
  2 A$3dForC.pre.a     0326 GR  |   2 A$3dForC.pre.a     0327 GR
  2 A$3dForC.pre.a     0328 GR  |   2 A$3dForC.pre.a     0329 GR
  2 A$3dForC.pre.a     032C GR  |   2 A$3dForC.pre.a     032F GR
  2 A$3dForC.pre.a     0330 GR  |   2 A$3dForC.pre.a     0333 GR
  2 A$3dForC.pre.a     0336 GR  |   2 A$3dForC.pre.a     0338 GR
  2 A$3dForC.pre.a     033C GR  |   2 A$3dForC.pre.a     033F GR
  2 A$3dForC.pre.a     0340 GR  |   2 A$3dForC.pre.a     0343 GR
  2 A$3dForC.pre.a     0346 GR  |   2 A$3dForC.pre.a     0349 GR
  2 A$3dForC.pre.a     034B GR  |   2 A$3dForC.pre.a     034C GR
  2 A$3dForC.pre.a     034D GR  |   2 A$3dForC.pre.a     034F GR
  2 A$3dForC.pre.a     0350 GR  |   2 A$3dForC.pre.a     0352 GR
  2 A$3dForC.pre.a     0353 GR  |   2 A$3dForC.pre.a     0355 GR
  2 A$3dForC.pre.a     0356 GR  |   2 A$3dForC.pre.a     0357 GR
  2 A$3dForC.pre.a     0358 GR  |   2 A$3dForC.pre.a     0359 GR
  2 A$3dForC.pre.a     035B GR  |   2 A$3dForC.pre.a     035C GR
  2 A$3dForC.pre.a     035D GR  |   2 A$3dForC.pre.a     035E GR
  2 A$3dForC.pre.a     035F GR  |   2 A$3dForC.pre.a     0360 GR
  2 A$3dForC.pre.a     0363 GR  |   2 A$3dForC.pre.a     0366 GR
  2 A$3dForC.pre.a     0369 GR  |   2 A$3dForC.pre.a     036C GR
  2 A$3dForC.pre.a     036E GR  |   2 A$3dForC.pre.a     036F GR
  2 A$3dForC.pre.a     0370 GR  |   2 A$3dForC.pre.a     0372 GR
  2 A$3dForC.pre.a     0373 GR  |   2 A$3dForC.pre.a     0375 GR
  2 A$3dForC.pre.a     0376 GR  |   2 A$3dForC.pre.a     0378 GR
  2 A$3dForC.pre.a     0379 GR  |   2 A$3dForC.pre.a     037A GR
  2 A$3dForC.pre.a     037B GR  |   2 A$3dForC.pre.a     037C GR
  2 A$3dForC.pre.a     037E GR  |   2 A$3dForC.pre.a     037F GR
  2 A$3dForC.pre.a     0380 GR  |   2 A$3dForC.pre.a     0381 GR
  2 A$3dForC.pre.a     0382 GR  |   2 A$3dForC.pre.a     0383 GR
  2 A$3dForC.pre.a     0386 GR  |   2 A$3dForC.pre.a     0389 GR
  2 A$3dForC.pre.a     038C GR  |   2 A$3dForC.pre.a     038E GR
  2 A$3dForC.pre.a     038F GR  |   2 A$3dForC.pre.a     0390 GR
  2 A$3dForC.pre.a     0392 GR  |   2 A$3dForC.pre.a     0393 GR
  2 A$3dForC.pre.a     0395 GR  |   2 A$3dForC.pre.a     0396 GR
  2 A$3dForC.pre.a     0398 GR  |   2 A$3dForC.pre.a     0399 GR
  2 A$3dForC.pre.a     039A GR  |   2 A$3dForC.pre.a     039B GR
  2 A$3dForC.pre.a     039C GR  |   2 A$3dForC.pre.a     039E GR
  2 A$3dForC.pre.a     039F GR  |   2 A$3dForC.pre.a     03A0 GR
  2 A$3dForC.pre.a     03A1 GR  |   2 A$3dForC.pre.a     03A2 GR
  2 A$3dForC.pre.a     03A3 GR  |   2 A$3dForC.pre.a     03A6 GR
  2 A$3dForC.pre.a     03A9 GR  |   2 A$3dForC.pre.a     03AA GR
  2 A$3dForC.pre.a     03AD GR  |   2 A$3dForC.pre.a     03B0 GR
  2 A$3dForC.pre.a     03B3 GR  |   2 A$3dForC.pre.a     03B5 GR
  2 A$3dForC.pre.a     03B6 GR  |   2 A$3dForC.pre.a     03B7 GR
  2 A$3dForC.pre.a     03B9 GR  |   2 A$3dForC.pre.a     03BA GR
  2 A$3dForC.pre.a     03BC GR  |   2 A$3dForC.pre.a     03BD GR
  2 A$3dForC.pre.a     03BF GR  |   2 A$3dForC.pre.a     03C0 GR
  2 A$3dForC.pre.a     03C1 GR  |   2 A$3dForC.pre.a     03C2 GR
  2 A$3dForC.pre.a     03C3 GR  |   2 A$3dForC.pre.a     03C5 GR
  2 A$3dForC.pre.a     03C6 GR  |   2 A$3dForC.pre.a     03C7 GR
  2 A$3dForC.pre.a     03C8 GR  |   2 A$3dForC.pre.a     03C9 GR
  2 A$3dForC.pre.a     03CA GR  |   2 A$3dForC.pre.a     03CD GR
  2 A$3dForC.pre.a     03D0 GR  |   2 A$3dForC.pre.a     03D3 GR
  2 A$3dForC.pre.a     03D5 GR  |   2 A$3dForC.pre.a     03D6 GR
  2 A$3dForC.pre.a     03D7 GR  |   2 A$3dForC.pre.a     03D9 GR
  2 A$3dForC.pre.a     03DA GR  |   2 A$3dForC.pre.a     03DC GR
  2 A$3dForC.pre.a     03DD GR  |   2 A$3dForC.pre.a     03DF GR
  2 A$3dForC.pre.a     03E0 GR  |   2 A$3dForC.pre.a     03E1 GR
  2 A$3dForC.pre.a     03E2 GR  |   2 A$3dForC.pre.a     03E3 GR
  2 A$3dForC.pre.a     03E5 GR  |   2 A$3dForC.pre.a     03E6 GR
  2 A$3dForC.pre.a     03E7 GR  |   2 A$3dForC.pre.a     03E8 GR
  2 A$3dForC.pre.a     03E9 GR  |   2 A$3dForC.pre.a     03EA GR
  2 A$3dForC.pre.a     03EB GR  |   2 A$3dForC.pre.a     03EE GR
  2 A$3dForC.pre.a     03F1 GR  |   2 A$3dForC.pre.a     03F2 GR
  2 A$3dForC.pre.a     03F5 GR  |   2 A$3dForC.pre.a     03F6 GR
  2 A$3dForC.pre.a     03F9 GR  |   2 A$3dForC.pre.a     03FC GR
  2 A$3dForC.pre.a     03FF GR  |   2 A$3dForC.pre.a     0401 GR
  2 A$3dForC.pre.a     0404 GR  |   2 A$3dForC.pre.a     0406 GR
  2 A$3dForC.pre.a     0409 GR  |   2 A$3dForC.pre.a     040C GR
  2 A$3dForC.pre.a     040E GR  |   2 A$3dForC.pre.a     0411 GR
  2 A$3dForC.pre.a     0413 GR  |   2 A$3dForC.pre.a     0416 GR
  2 A$3dForC.pre.a     0419 GR  |   2 A$3dForC.pre.a     041B GR
  2 A$3dForC.pre.a     041E GR  |   2 A$3dForC.pre.a     0420 GR
  2 A$3dForC.pre.a     0423 GR  |   2 A$3dForC.pre.a     0426 GR
  2 A$3dForC.pre.a     0428 GR  |   2 A$3dForC.pre.a     042A GR
  2 A$3dForC.pre.a     042B GR  |   2 A$3dForC.pre.a     042E GR
  2 A$3dForC.pre.a     0431 GR  |   2 A$3dForC.pre.a     0434 GR
  2 A$3dForC.pre.a     0437 GR  |   2 A$3dForC.pre.a     043A GR
  2 A$3dForC.pre.a     043D GR  |   2 A$3dForC.pre.a     0440 GR
  2 A$3dForC.pre.a     0442 GR  |   2 A$3dForC.pre.a     0444 GR
  2 A$3dForC.pre.a     0445 GR  |   2 A$3dForC.pre.a     0448 GR
  2 A$3dForC.pre.a     044B GR  |   2 A$3dForC.pre.a     044E GR
  2 A$3dForC.pre.a     0451 GR  |   2 A$3dForC.pre.a     0453 GR
  2 A$3dForC.pre.a     0454 GR  |   2 A$3dForC.pre.a     0455 GR
  2 A$3dForC.pre.a     0457 GR  |   2 A$3dForC.pre.a     0458 GR
  2 A$3dForC.pre.a     045A GR  |   2 A$3dForC.pre.a     045B GR
  2 A$3dForC.pre.a     045D GR  |   2 A$3dForC.pre.a     045E GR
  2 A$3dForC.pre.a     045F GR  |   2 A$3dForC.pre.a     0460 GR
  2 A$3dForC.pre.a     0461 GR  |   2 A$3dForC.pre.a     0463 GR
  2 A$3dForC.pre.a     0464 GR  |   2 A$3dForC.pre.a     0465 GR
  2 A$3dForC.pre.a     0466 GR  |   2 A$3dForC.pre.a     0467 GR
  2 A$3dForC.pre.a     0468 GR  |   2 A$3dForC.pre.a     046B GR
  2 A$3dForC.pre.a     046C GR  |   2 A$3dForC.pre.a     046F GR
  2 A$3dForC.pre.a     0472 GR  |   2 A$3dForC.pre.a     0475 GR
  2 A$3dForC.pre.a     0477 GR  |   2 A$3dForC.pre.a     0478 GR
  2 A$3dForC.pre.a     0479 GR  |   2 A$3dForC.pre.a     047B GR
  2 A$3dForC.pre.a     047C GR  |   2 A$3dForC.pre.a     047E GR
  2 A$3dForC.pre.a     047F GR  |   2 A$3dForC.pre.a     0481 GR
  2 A$3dForC.pre.a     0482 GR  |   2 A$3dForC.pre.a     0483 GR
  2 A$3dForC.pre.a     0484 GR  |   2 A$3dForC.pre.a     0485 GR
  2 A$3dForC.pre.a     0487 GR  |   2 A$3dForC.pre.a     0488 GR
  2 A$3dForC.pre.a     0489 GR  |   2 A$3dForC.pre.a     048A GR
  2 A$3dForC.pre.a     048B GR  |   2 A$3dForC.pre.a     048C GR
  2 A$3dForC.pre.a     048F GR  |   2 A$3dForC.pre.a     0490 GR
  2 A$3dForC.pre.a     0493 GR  |   2 A$3dForC.pre.a     0496 GR
  2 A$3dForC.pre.a     0498 GR  |   2 A$3dForC.pre.a     049C GR
  2 A$3dForC.pre.a     049F GR  |   2 A$3dForC.pre.a     04A2 GR
  2 A$3dForC.pre.a     04A3 GR  |   2 A$3dForC.pre.a     04A6 GR
  2 A$3dForC.pre.a     04A9 GR  |   2 A$3dForC.pre.a     04AA GR
  2 A$3dForC.pre.a     04AD GR  |   2 A$3dForC.pre.a     04B0 GR
  2 A$3dForC.pre.a     04B3 GR  |   2 A$3dForC.pre.a     04B5 GR
  2 A$3dForC.pre.a     04B6 GR  |   2 A$3dForC.pre.a     04B7 GR
  2 A$3dForC.pre.a     04B9 GR  |   2 A$3dForC.pre.a     04BA GR
  2 A$3dForC.pre.a     04BC GR  |   2 A$3dForC.pre.a     04BD GR
  2 A$3dForC.pre.a     04BF GR  |   2 A$3dForC.pre.a     04C0 GR
  2 A$3dForC.pre.a     04C1 GR  |   2 A$3dForC.pre.a     04C2 GR
  2 A$3dForC.pre.a     04C3 GR  |   2 A$3dForC.pre.a     04C5 GR
  2 A$3dForC.pre.a     04C6 GR  |   2 A$3dForC.pre.a     04C7 GR
  2 A$3dForC.pre.a     04C8 GR  |   2 A$3dForC.pre.a     04C9 GR
  2 A$3dForC.pre.a     04CA GR  |   2 A$3dForC.pre.a     04CD GR
  2 A$3dForC.pre.a     04D0 GR  |   2 A$3dForC.pre.a     04D3 GR
  2 A$3dForC.pre.a     04D6 GR  |   2 A$3dForC.pre.a     04D8 GR
  2 A$3dForC.pre.a     04D9 GR  |   2 A$3dForC.pre.a     04DA GR
  2 A$3dForC.pre.a     04DC GR  |   2 A$3dForC.pre.a     04DD GR
  2 A$3dForC.pre.a     04DF GR  |   2 A$3dForC.pre.a     04E0 GR
  2 A$3dForC.pre.a     04E2 GR  |   2 A$3dForC.pre.a     04E3 GR
  2 A$3dForC.pre.a     04E4 GR  |   2 A$3dForC.pre.a     04E5 GR
  2 A$3dForC.pre.a     04E6 GR  |   2 A$3dForC.pre.a     04E8 GR
  2 A$3dForC.pre.a     04E9 GR  |   2 A$3dForC.pre.a     04EA GR
  2 A$3dForC.pre.a     04EB GR  |   2 A$3dForC.pre.a     04EC GR
  2 A$3dForC.pre.a     04ED GR  |   2 A$3dForC.pre.a     04F0 GR
  2 A$3dForC.pre.a     04F3 GR  |   2 A$3dForC.pre.a     04F6 GR
  2 A$3dForC.pre.a     04F8 GR  |   2 A$3dForC.pre.a     04F9 GR
  2 A$3dForC.pre.a     04FA GR  |   2 A$3dForC.pre.a     04FC GR
  2 A$3dForC.pre.a     04FD GR  |   2 A$3dForC.pre.a     04FF GR
  2 A$3dForC.pre.a     0500 GR  |   2 A$3dForC.pre.a     0502 GR
  2 A$3dForC.pre.a     0503 GR  |   2 A$3dForC.pre.a     0504 GR
  2 A$3dForC.pre.a     0505 GR  |   2 A$3dForC.pre.a     0506 GR
  2 A$3dForC.pre.a     0508 GR  |   2 A$3dForC.pre.a     0509 GR
  2 A$3dForC.pre.a     050A GR  |   2 A$3dForC.pre.a     050B GR
  2 A$3dForC.pre.a     050C GR  |   2 A$3dForC.pre.a     050D GR
  2 A$3dForC.pre.a     0510 GR  |   2 A$3dForC.pre.a     0513 GR
  2 A$3dForC.pre.a     0514 GR  |   2 A$3dForC.pre.a     0517 GR
  2 A$3dForC.pre.a     051A GR  |   2 A$3dForC.pre.a     051D GR
  2 A$3dForC.pre.a     051F GR  |   2 A$3dForC.pre.a     0520 GR
  2 A$3dForC.pre.a     0521 GR  |   2 A$3dForC.pre.a     0523 GR
  2 A$3dForC.pre.a     0524 GR  |   2 A$3dForC.pre.a     0526 GR
  2 A$3dForC.pre.a     0527 GR  |   2 A$3dForC.pre.a     0529 GR
  2 A$3dForC.pre.a     052A GR  |   2 A$3dForC.pre.a     052B GR
  2 A$3dForC.pre.a     052C GR  |   2 A$3dForC.pre.a     052D GR
  2 A$3dForC.pre.a     052F GR  |   2 A$3dForC.pre.a     0530 GR
  2 A$3dForC.pre.a     0531 GR  |   2 A$3dForC.pre.a     0532 GR
  2 A$3dForC.pre.a     0533 GR  |   2 A$3dForC.pre.a     0534 GR
  2 A$3dForC.pre.a     0537 GR  |   2 A$3dForC.pre.a     053A GR
  2 A$3dForC.pre.a     053D GR  |   2 A$3dForC.pre.a     053F GR
  2 A$3dForC.pre.a     0540 GR  |   2 A$3dForC.pre.a     0541 GR
  2 A$3dForC.pre.a     0543 GR  |   2 A$3dForC.pre.a     0544 GR
  2 A$3dForC.pre.a     0546 GR  |   2 A$3dForC.pre.a     0547 GR
  2 A$3dForC.pre.a     0549 GR  |   2 A$3dForC.pre.a     054A GR
  2 A$3dForC.pre.a     054B GR  |   2 A$3dForC.pre.a     054C GR
  2 A$3dForC.pre.a     054D GR  |   2 A$3dForC.pre.a     054F GR
  2 A$3dForC.pre.a     0550 GR  |   2 A$3dForC.pre.a     0551 GR
  2 A$3dForC.pre.a     0552 GR  |   2 A$3dForC.pre.a     0553 GR
  2 A$3dForC.pre.a     0554 GR  |   2 A$3dForC.pre.a     0555 GR
  2 A$3dForC.pre.a     0558 GR  |   2 A$3dForC.pre.a     055B GR
  2 A$3dForC.pre.a     055C GR  |   2 A$3dForC.pre.a     055F GR
  2 A$3dForC.pre.a     0562 GR  |   2 A$3dForC.pre.a     0564 GR
  2 A$3dForC.pre.a     0568 GR  |   2 A$3dForC.pre.a     056B GR
  2 A$3dForC.pre.a     056E GR  |   2 A$3dForC.pre.a     056F GR
  2 A$3dForC.pre.a     0572 GR  |   2 A$3dForC.pre.a     0575 GR
  2 A$3dForC.pre.a     0578 GR  |   2 A$3dForC.pre.a     057A GR
  2 A$3dForC.pre.a     057B GR  |   2 A$3dForC.pre.a     057C GR
  2 A$3dForC.pre.a     057E GR  |   2 A$3dForC.pre.a     057F GR
  2 A$3dForC.pre.a     0581 GR  |   2 A$3dForC.pre.a     0582 GR
  2 A$3dForC.pre.a     0584 GR  |   2 A$3dForC.pre.a     0585 GR
  2 A$3dForC.pre.a     0586 GR  |   2 A$3dForC.pre.a     0587 GR
  2 A$3dForC.pre.a     0588 GR  |   2 A$3dForC.pre.a     058A GR
  2 A$3dForC.pre.a     058B GR  |   2 A$3dForC.pre.a     058C GR
  2 A$3dForC.pre.a     058D GR  |   2 A$3dForC.pre.a     058E GR
  2 A$3dForC.pre.a     058F GR  |   2 A$3dForC.pre.a     0592 GR
  2 A$3dForC.pre.a     0595 GR  |   2 A$3dForC.pre.a     0598 GR
  2 A$3dForC.pre.a     059B GR  |   2 A$3dForC.pre.a     059D GR
  2 A$3dForC.pre.a     059E GR  |   2 A$3dForC.pre.a     059F GR
  2 A$3dForC.pre.a     05A1 GR  |   2 A$3dForC.pre.a     05A2 GR
  2 A$3dForC.pre.a     05A4 GR  |   2 A$3dForC.pre.a     05A5 GR
  2 A$3dForC.pre.a     05A7 GR  |   2 A$3dForC.pre.a     05A8 GR
  2 A$3dForC.pre.a     05A9 GR  |   2 A$3dForC.pre.a     05AA GR
  2 A$3dForC.pre.a     05AB GR  |   2 A$3dForC.pre.a     05AD GR
  2 A$3dForC.pre.a     05AE GR  |   2 A$3dForC.pre.a     05AF GR
  2 A$3dForC.pre.a     05B0 GR  |   2 A$3dForC.pre.a     05B1 GR
  2 A$3dForC.pre.a     05B2 GR  |   2 A$3dForC.pre.a     05B5 GR
  2 A$3dForC.pre.a     05B8 GR  |   2 A$3dForC.pre.a     05BB GR
  2 A$3dForC.pre.a     05BD GR  |   2 A$3dForC.pre.a     05BE GR
  2 A$3dForC.pre.a     05BF GR  |   2 A$3dForC.pre.a     05C1 GR
  2 A$3dForC.pre.a     05C2 GR  |   2 A$3dForC.pre.a     05C4 GR
  2 A$3dForC.pre.a     05C5 GR  |   2 A$3dForC.pre.a     05C7 GR
  2 A$3dForC.pre.a     05C8 GR  |   2 A$3dForC.pre.a     05C9 GR
  2 A$3dForC.pre.a     05CA GR  |   2 A$3dForC.pre.a     05CB GR
  2 A$3dForC.pre.a     05CD GR  |   2 A$3dForC.pre.a     05CE GR
  2 A$3dForC.pre.a     05CF GR  |   2 A$3dForC.pre.a     05D0 GR
  2 A$3dForC.pre.a     05D1 GR  |   2 A$3dForC.pre.a     05D2 GR
  2 A$3dForC.pre.a     05D5 GR  |   2 A$3dForC.pre.a     05D8 GR
  2 A$3dForC.pre.a     05D9 GR  |   2 A$3dForC.pre.a     05DC GR
  2 A$3dForC.pre.a     05DF GR  |   2 A$3dForC.pre.a     05E2 GR
  2 A$3dForC.pre.a     05E4 GR  |   2 A$3dForC.pre.a     05E5 GR
  2 A$3dForC.pre.a     05E6 GR  |   2 A$3dForC.pre.a     05E8 GR
  2 A$3dForC.pre.a     05E9 GR  |   2 A$3dForC.pre.a     05EB GR
  2 A$3dForC.pre.a     05EC GR  |   2 A$3dForC.pre.a     05EE GR
  2 A$3dForC.pre.a     05EF GR  |   2 A$3dForC.pre.a     05F0 GR
  2 A$3dForC.pre.a     05F1 GR  |   2 A$3dForC.pre.a     05F2 GR
  2 A$3dForC.pre.a     05F4 GR  |   2 A$3dForC.pre.a     05F5 GR
  2 A$3dForC.pre.a     05F6 GR  |   2 A$3dForC.pre.a     05F7 GR
  2 A$3dForC.pre.a     05F8 GR  |   2 A$3dForC.pre.a     05F9 GR
  2 A$3dForC.pre.a     05FC GR  |   2 A$3dForC.pre.a     05FF GR
  2 A$3dForC.pre.a     0602 GR  |   2 A$3dForC.pre.a     0604 GR
  2 A$3dForC.pre.a     0605 GR  |   2 A$3dForC.pre.a     0606 GR
  2 A$3dForC.pre.a     0608 GR  |   2 A$3dForC.pre.a     0609 GR
  2 A$3dForC.pre.a     060B GR  |   2 A$3dForC.pre.a     060C GR
  2 A$3dForC.pre.a     060E GR  |   2 A$3dForC.pre.a     060F GR
  2 A$3dForC.pre.a     0610 GR  |   2 A$3dForC.pre.a     0611 GR
  2 A$3dForC.pre.a     0612 GR  |   2 A$3dForC.pre.a     0614 GR
  2 A$3dForC.pre.a     0615 GR  |   2 A$3dForC.pre.a     0616 GR
  2 A$3dForC.pre.a     0617 GR  |   2 A$3dForC.pre.a     0618 GR
  2 A$3dForC.pre.a     0619 GR  |   2 A$3dForC.pre.a     061A GR
  2 A$3dForC.pre.a     061D GR  |   2 A$3dForC.pre.a     0620 GR
  2 A$3dForC.pre.a     0621 GR  |   2 A$3dForC.pre.a     0624 GR
  2 A$3dForC.pre.a     0627 GR  |   2 A$3dForC.pre.a     0629 GR
  2 A$3dForC.pre.a     062D GR  |   2 A$3dForC.pre.a     0630 GR
  2 A$3dForC.pre.a     0633 GR  |   2 A$3dForC.pre.a     0636 GR
  2 A$3dForC.pre.a     0637 GR  |   2 A$3dForC.pre.a     063A GR
  2 A$3dForC.pre.a     063D GR  |   2 A$3dForC.pre.a     0640 GR
  2 A$3dForC.pre.a     0643 GR  |   2 A$3dForC.pre.a     0646 GR
  2 A$3dForC.pre.a     0649 GR  |   2 A$3dForC.pre.a     064C GR
  2 A$3dForC.pre.a     064F GR  |   2 A$3dForC.pre.a     0652 GR
  2 A$3dForC.pre.a     0654 GR  |   2 A$3dForC.pre.a     0655 GR
  2 A$3dForC.pre.a     0656 GR  |   2 A$3dForC.pre.a     0658 GR
  2 A$3dForC.pre.a     0659 GR  |   2 A$3dForC.pre.a     065B GR
  2 A$3dForC.pre.a     065C GR  |   2 A$3dForC.pre.a     065E GR
  2 A$3dForC.pre.a     065F GR  |   2 A$3dForC.pre.a     0660 GR
  2 A$3dForC.pre.a     0661 GR  |   2 A$3dForC.pre.a     0662 GR
  2 A$3dForC.pre.a     0664 GR  |   2 A$3dForC.pre.a     0665 GR
  2 A$3dForC.pre.a     0666 GR  |   2 A$3dForC.pre.a     0667 GR
  2 A$3dForC.pre.a     0668 GR  |   2 A$3dForC.pre.a     0669 GR
  2 A$3dForC.pre.a     066C GR  |   2 A$3dForC.pre.a     066F GR
  2 A$3dForC.pre.a     0672 GR  |   2 A$3dForC.pre.a     0675 GR
  2 A$3dForC.pre.a     0677 GR  |   2 A$3dForC.pre.a     0678 GR
  2 A$3dForC.pre.a     0679 GR  |   2 A$3dForC.pre.a     067B GR
  2 A$3dForC.pre.a     067C GR  |   2 A$3dForC.pre.a     067E GR
  2 A$3dForC.pre.a     067F GR  |   2 A$3dForC.pre.a     0681 GR
  2 A$3dForC.pre.a     0682 GR  |   2 A$3dForC.pre.a     0683 GR
  2 A$3dForC.pre.a     0684 GR  |   2 A$3dForC.pre.a     0685 GR
  2 A$3dForC.pre.a     0687 GR  |   2 A$3dForC.pre.a     0688 GR
  2 A$3dForC.pre.a     0689 GR  |   2 A$3dForC.pre.a     068A GR
  2 A$3dForC.pre.a     068B GR  |   2 A$3dForC.pre.a     068C GR
  2 A$3dForC.pre.a     068F GR  |   2 A$3dForC.pre.a     0692 GR
  2 A$3dForC.pre.a     0695 GR  |   2 A$3dForC.pre.a     0697 GR
  2 A$3dForC.pre.a     0698 GR  |   2 A$3dForC.pre.a     0699 GR
  2 A$3dForC.pre.a     069B GR  |   2 A$3dForC.pre.a     069C GR
  2 A$3dForC.pre.a     069E GR  |   2 A$3dForC.pre.a     069F GR
  2 A$3dForC.pre.a     06A1 GR  |   2 A$3dForC.pre.a     06A2 GR
  2 A$3dForC.pre.a     06A3 GR  |   2 A$3dForC.pre.a     06A4 GR
  2 A$3dForC.pre.a     06A5 GR  |   2 A$3dForC.pre.a     06A7 GR
  2 A$3dForC.pre.a     06A8 GR  |   2 A$3dForC.pre.a     06A9 GR
  2 A$3dForC.pre.a     06AA GR  |   2 A$3dForC.pre.a     06AB GR
  2 A$3dForC.pre.a     06AC GR  |   2 A$3dForC.pre.a     06AF GR
  2 A$3dForC.pre.a     06B2 GR  |   2 A$3dForC.pre.a     06B3 GR
  2 A$3dForC.pre.a     06B6 GR  |   2 A$3dForC.pre.a     06B9 GR
  2 A$3dForC.pre.a     06BC GR  |   2 A$3dForC.pre.a     06BE GR
  2 A$3dForC.pre.a     06BF GR  |   2 A$3dForC.pre.a     06C0 GR
  2 A$3dForC.pre.a     06C2 GR  |   2 A$3dForC.pre.a     06C3 GR
  2 A$3dForC.pre.a     06C5 GR  |   2 A$3dForC.pre.a     06C6 GR
  2 A$3dForC.pre.a     06C8 GR  |   2 A$3dForC.pre.a     06C9 GR
  2 A$3dForC.pre.a     06CA GR  |   2 A$3dForC.pre.a     06CB GR
  2 A$3dForC.pre.a     06CC GR  |   2 A$3dForC.pre.a     06CE GR
  2 A$3dForC.pre.a     06CF GR  |   2 A$3dForC.pre.a     06D0 GR
  2 A$3dForC.pre.a     06D1 GR  |   2 A$3dForC.pre.a     06D2 GR
  2 A$3dForC.pre.a     06D3 GR  |   2 A$3dForC.pre.a     06D6 GR
  2 A$3dForC.pre.a     06D9 GR  |   2 A$3dForC.pre.a     06DC GR
  2 A$3dForC.pre.a     06DE GR  |   2 A$3dForC.pre.a     06DF GR
  2 A$3dForC.pre.a     06E0 GR  |   2 A$3dForC.pre.a     06E2 GR
  2 A$3dForC.pre.a     06E3 GR  |   2 A$3dForC.pre.a     06E5 GR
  2 A$3dForC.pre.a     06E6 GR  |   2 A$3dForC.pre.a     06E8 GR
  2 A$3dForC.pre.a     06E9 GR  |   2 A$3dForC.pre.a     06EA GR
  2 A$3dForC.pre.a     06EB GR  |   2 A$3dForC.pre.a     06EC GR
  2 A$3dForC.pre.a     06EE GR  |   2 A$3dForC.pre.a     06EF GR
  2 A$3dForC.pre.a     06F0 GR  |   2 A$3dForC.pre.a     06F1 GR
  2 A$3dForC.pre.a     06F2 GR  |   2 A$3dForC.pre.a     06F3 GR
  2 A$3dForC.pre.a     06F4 GR  |   2 A$3dForC.pre.a     06F7 GR
  2 A$3dForC.pre.a     06FA GR  |   2 A$3dForC.pre.a     06FB GR
  2 A$3dForC.pre.a     06FE GR  |   2 A$3dForC.pre.a     0701 GR
  2 A$3dForC.pre.a     0703 GR  |   2 A$3dForC.pre.a     0707 GR
  2 A$3dForC.pre.a     070A GR  |   2 A$3dForC.pre.a     070D GR
  2 A$3dForC.pre.a     070E GR  |   2 A$3dForC.pre.a     0711 GR
  2 A$3dForC.pre.a     0714 GR  |   2 A$3dForC.pre.a     0717 GR
  2 A$3dForC.pre.a     0719 GR  |   2 A$3dForC.pre.a     071A GR
  2 A$3dForC.pre.a     071B GR  |   2 A$3dForC.pre.a     071D GR
  2 A$3dForC.pre.a     071E GR  |   2 A$3dForC.pre.a     0720 GR
  2 A$3dForC.pre.a     0721 GR  |   2 A$3dForC.pre.a     0723 GR
  2 A$3dForC.pre.a     0724 GR  |   2 A$3dForC.pre.a     0725 GR
  2 A$3dForC.pre.a     0726 GR  |   2 A$3dForC.pre.a     0727 GR
  2 A$3dForC.pre.a     0729 GR  |   2 A$3dForC.pre.a     072A GR
  2 A$3dForC.pre.a     072B GR  |   2 A$3dForC.pre.a     072C GR
  2 A$3dForC.pre.a     072D GR  |   2 A$3dForC.pre.a     072E GR
  2 A$3dForC.pre.a     0731 GR  |   2 A$3dForC.pre.a     0734 GR
  2 A$3dForC.pre.a     0737 GR  |   2 A$3dForC.pre.a     0739 GR
  2 A$3dForC.pre.a     073A GR  |   2 A$3dForC.pre.a     073B GR
  2 A$3dForC.pre.a     073D GR  |   2 A$3dForC.pre.a     073E GR
  2 A$3dForC.pre.a     0740 GR  |   2 A$3dForC.pre.a     0741 GR
  2 A$3dForC.pre.a     0743 GR  |   2 A$3dForC.pre.a     0744 GR
  2 A$3dForC.pre.a     0745 GR  |   2 A$3dForC.pre.a     0746 GR
  2 A$3dForC.pre.a     0747 GR  |   2 A$3dForC.pre.a     0749 GR
  2 A$3dForC.pre.a     074A GR  |   2 A$3dForC.pre.a     074B GR
  2 A$3dForC.pre.a     074C GR  |   2 A$3dForC.pre.a     074D GR
  2 A$3dForC.pre.a     074E GR  |   2 A$3dForC.pre.a     0751 GR
  2 A$3dForC.pre.a     0754 GR  |   2 A$3dForC.pre.a     0757 GR
  2 A$3dForC.pre.a     0759 GR  |   2 A$3dForC.pre.a     075A GR
  2 A$3dForC.pre.a     075B GR  |   2 A$3dForC.pre.a     075D GR
  2 A$3dForC.pre.a     075E GR  |   2 A$3dForC.pre.a     0760 GR
  2 A$3dForC.pre.a     0761 GR  |   2 A$3dForC.pre.a     0763 GR
  2 A$3dForC.pre.a     0764 GR  |   2 A$3dForC.pre.a     0765 GR
  2 A$3dForC.pre.a     0766 GR  |   2 A$3dForC.pre.a     0767 GR
  2 A$3dForC.pre.a     0769 GR  |   2 A$3dForC.pre.a     076A GR
  2 A$3dForC.pre.a     076B GR  |   2 A$3dForC.pre.a     076C GR
  2 A$3dForC.pre.a     076D GR  |   2 A$3dForC.pre.a     076E GR
  2 A$3dForC.pre.a     076F GR  |   2 A$3dForC.pre.a     0772 GR
  2 A$3dForC.pre.a     0775 GR  |   2 A$3dForC.pre.a     0776 GR
  2 A$3dForC.pre.a     0779 GR  |   2 A$3dForC.pre.a     077C GR
  2 A$3dForC.pre.a     077F GR  |   2 A$3dForC.pre.a     0781 GR
  2 A$3dForC.pre.a     0782 GR  |   2 A$3dForC.pre.a     0783 GR
  2 A$3dForC.pre.a     0785 GR  |   2 A$3dForC.pre.a     0786 GR
  2 A$3dForC.pre.a     0788 GR  |   2 A$3dForC.pre.a     0789 GR
  2 A$3dForC.pre.a     078B GR  |   2 A$3dForC.pre.a     078C GR
  2 A$3dForC.pre.a     078D GR  |   2 A$3dForC.pre.a     078E GR
  2 A$3dForC.pre.a     078F GR  |   2 A$3dForC.pre.a     0791 GR
  2 A$3dForC.pre.a     0792 GR  |   2 A$3dForC.pre.a     0793 GR
  2 A$3dForC.pre.a     0794 GR  |   2 A$3dForC.pre.a     0795 GR
  2 A$3dForC.pre.a     0796 GR  |   2 A$3dForC.pre.a     0799 GR
  2 A$3dForC.pre.a     079C GR  |   2 A$3dForC.pre.a     079F GR
  2 A$3dForC.pre.a     07A1 GR  |   2 A$3dForC.pre.a     07A2 GR
  2 A$3dForC.pre.a     07A3 GR  |   2 A$3dForC.pre.a     07A5 GR
  2 A$3dForC.pre.a     07A6 GR  |   2 A$3dForC.pre.a     07A8 GR
  2 A$3dForC.pre.a     07A9 GR  |   2 A$3dForC.pre.a     07AB GR
  2 A$3dForC.pre.a     07AC GR  |   2 A$3dForC.pre.a     07AD GR
  2 A$3dForC.pre.a     07AE GR  |   2 A$3dForC.pre.a     07AF GR
  2 A$3dForC.pre.a     07B1 GR  |   2 A$3dForC.pre.a     07B2 GR
  2 A$3dForC.pre.a     07B3 GR  |   2 A$3dForC.pre.a     07B4 GR
  2 A$3dForC.pre.a     07B5 GR  |   2 A$3dForC.pre.a     07B6 GR
  2 A$3dForC.pre.a     07B9 GR  |   2 A$3dForC.pre.a     07BC GR
  2 A$3dForC.pre.a     07BD GR  |   2 A$3dForC.pre.a     07C0 GR
  2 A$3dForC.pre.a     07C3 GR  |   2 A$3dForC.pre.a     07C5 GR
  2 A$3dForC.pre.a     07C9 GR  |   2 A$3dForC.pre.a     07CC GR
  2 A$3dForC.pre.a     07CF GR  |   2 A$3dForC.pre.a     07D2 GR
  2 A$3dForC.pre.a     07D3 GR  |   2 A$3dForC.pre.a     07D6 GR
  2 A$3dForC.pre.a     07D9 GR  |   2 A$3dForC.pre.a     07DC GR
  2 A$3dForC.pre.a     07DF GR  |   2 A$3dForC.pre.a     07E2 GR
  2 A$3dForC.pre.a     07E5 GR  |   2 A$3dForC.pre.a     07E8 GR
  2 A$3dForC.pre.a     07EB GR  |   2 A$3dForC.pre.a     07EE GR
  2 A$3dForC.pre.a     07F0 GR  |   2 A$3dForC.pre.a     07F1 GR
  2 A$3dForC.pre.a     07F2 GR  |   2 A$3dForC.pre.a     07F4 GR
  2 A$3dForC.pre.a     07F5 GR  |   2 A$3dForC.pre.a     07F7 GR
  2 A$3dForC.pre.a     07F8 GR  |   2 A$3dForC.pre.a     07FA GR
  2 A$3dForC.pre.a     07FB GR  |   2 A$3dForC.pre.a     07FC GR
  2 A$3dForC.pre.a     07FD GR  |   2 A$3dForC.pre.a     07FE GR
  2 A$3dForC.pre.a     0800 GR  |   2 A$3dForC.pre.a     0801 GR
  2 A$3dForC.pre.a     0802 GR  |   2 A$3dForC.pre.a     0803 GR
  2 A$3dForC.pre.a     0804 GR  |   2 A$3dForC.pre.a     0805 GR
  2 A$3dForC.pre.a     0808 GR  |   2 A$3dForC.pre.a     080B GR
  2 A$3dForC.pre.a     080E GR  |   2 A$3dForC.pre.a     0810 GR
  2 A$3dForC.pre.a     0811 GR  |   2 A$3dForC.pre.a     0812 GR
  2 A$3dForC.pre.a     0814 GR  |   2 A$3dForC.pre.a     0815 GR
  2 A$3dForC.pre.a     0817 GR  |   2 A$3dForC.pre.a     0818 GR
  2 A$3dForC.pre.a     081A GR  |   2 A$3dForC.pre.a     081B GR
  2 A$3dForC.pre.a     081C GR  |   2 A$3dForC.pre.a     081D GR
  2 A$3dForC.pre.a     081E GR  |   2 A$3dForC.pre.a     0820 GR
  2 A$3dForC.pre.a     0821 GR  |   2 A$3dForC.pre.a     0822 GR
  2 A$3dForC.pre.a     0823 GR  |   2 A$3dForC.pre.a     0824 GR
  2 A$3dForC.pre.a     0825 GR  |   2 A$3dForC.pre.a     0828 GR
  2 A$3dForC.pre.a     082B GR  |   2 A$3dForC.pre.a     082E GR
  2 A$3dForC.pre.a     0830 GR  |   2 A$3dForC.pre.a     0831 GR
  2 A$3dForC.pre.a     0832 GR  |   2 A$3dForC.pre.a     0834 GR
  2 A$3dForC.pre.a     0835 GR  |   2 A$3dForC.pre.a     0837 GR
  2 A$3dForC.pre.a     0838 GR  |   2 A$3dForC.pre.a     083A GR
  2 A$3dForC.pre.a     083B GR  |   2 A$3dForC.pre.a     083C GR
  2 A$3dForC.pre.a     083D GR  |   2 A$3dForC.pre.a     083E GR
  2 A$3dForC.pre.a     0840 GR  |   2 A$3dForC.pre.a     0841 GR
  2 A$3dForC.pre.a     0842 GR  |   2 A$3dForC.pre.a     0843 GR
  2 A$3dForC.pre.a     0844 GR  |   2 A$3dForC.pre.a     0845 GR
  2 A$3dForC.pre.a     0848 GR  |   2 A$3dForC.pre.a     084B GR
  2 A$3dForC.pre.a     084C GR  |   2 A$3dForC.pre.a     084F GR
  2 A$3dForC.pre.a     0852 GR  |   2 A$3dForC.pre.a     0855 GR
  2 A$3dForC.pre.a     0857 GR  |   2 A$3dForC.pre.a     0858 GR
  2 A$3dForC.pre.a     0859 GR  |   2 A$3dForC.pre.a     085B GR
  2 A$3dForC.pre.a     085C GR  |   2 A$3dForC.pre.a     085E GR
  2 A$3dForC.pre.a     085F GR  |   2 A$3dForC.pre.a     0861 GR
  2 A$3dForC.pre.a     0862 GR  |   2 A$3dForC.pre.a     0863 GR
  2 A$3dForC.pre.a     0864 GR  |   2 A$3dForC.pre.a     0865 GR
  2 A$3dForC.pre.a     0867 GR  |   2 A$3dForC.pre.a     0868 GR
  2 A$3dForC.pre.a     0869 GR  |   2 A$3dForC.pre.a     086A GR
  2 A$3dForC.pre.a     086B GR  |   2 A$3dForC.pre.a     086C GR
  2 A$3dForC.pre.a     086F GR  |   2 A$3dForC.pre.a     0872 GR
  2 A$3dForC.pre.a     0875 GR  |   2 A$3dForC.pre.a     0877 GR
  2 A$3dForC.pre.a     0878 GR  |   2 A$3dForC.pre.a     0879 GR
  2 A$3dForC.pre.a     087B GR  |   2 A$3dForC.pre.a     087C GR
  2 A$3dForC.pre.a     087E GR  |   2 A$3dForC.pre.a     087F GR
  2 A$3dForC.pre.a     0881 GR  |   2 A$3dForC.pre.a     0882 GR
  2 A$3dForC.pre.a     0883 GR  |   2 A$3dForC.pre.a     0884 GR
  2 A$3dForC.pre.a     0885 GR  |   2 A$3dForC.pre.a     0887 GR
  2 A$3dForC.pre.a     0888 GR  |   2 A$3dForC.pre.a     0889 GR
  2 A$3dForC.pre.a     088A GR  |   2 A$3dForC.pre.a     088B GR
  2 A$3dForC.pre.a     088C GR  |   2 A$3dForC.pre.a     088D GR
  2 A$3dForC.pre.a     0890 GR  |   2 A$3dForC.pre.a     0893 GR
  2 A$3dForC.pre.a     0894 GR  |   2 A$3dForC.pre.a     0897 GR
  2 A$3dForC.pre.a     089A GR  |   2 A$3dForC.pre.a     089C GR
  2 A$3dForC.pre.a     08A0 GR  |   2 A$3dForC.pre.a     08A3 GR
  2 A$3dForC.pre.a     08A6 GR  |   2 A$3dForC.pre.a     08A7 GR
  2 A$3dForC.pre.a     08AA GR  |   2 A$3dForC.pre.a     08AD GR
  2 A$3dForC.pre.a     08B0 GR  |   2 A$3dForC.pre.a     08B2 GR
  2 A$3dForC.pre.a     08B3 GR  |   2 A$3dForC.pre.a     08B4 GR
  2 A$3dForC.pre.a     08B6 GR  |   2 A$3dForC.pre.a     08B7 GR
  2 A$3dForC.pre.a     08B9 GR  |   2 A$3dForC.pre.a     08BA GR
  2 A$3dForC.pre.a     08BC GR  |   2 A$3dForC.pre.a     08BD GR
  2 A$3dForC.pre.a     08BE GR  |   2 A$3dForC.pre.a     08BF GR
  2 A$3dForC.pre.a     08C0 GR  |   2 A$3dForC.pre.a     08C2 GR
  2 A$3dForC.pre.a     08C3 GR  |   2 A$3dForC.pre.a     08C4 GR
  2 A$3dForC.pre.a     08C5 GR  |   2 A$3dForC.pre.a     08C6 GR
  2 A$3dForC.pre.a     08C7 GR  |   2 A$3dForC.pre.a     08CA GR
  2 A$3dForC.pre.a     08CD GR  |   2 A$3dForC.pre.a     08D0 GR
  2 A$3dForC.pre.a     08D2 GR  |   2 A$3dForC.pre.a     08D3 GR
  2 A$3dForC.pre.a     08D4 GR  |   2 A$3dForC.pre.a     08D6 GR
  2 A$3dForC.pre.a     08D7 GR  |   2 A$3dForC.pre.a     08D9 GR
  2 A$3dForC.pre.a     08DA GR  |   2 A$3dForC.pre.a     08DC GR
  2 A$3dForC.pre.a     08DD GR  |   2 A$3dForC.pre.a     08DE GR
  2 A$3dForC.pre.a     08DF GR  |   2 A$3dForC.pre.a     08E0 GR
  2 A$3dForC.pre.a     08E2 GR  |   2 A$3dForC.pre.a     08E3 GR
  2 A$3dForC.pre.a     08E4 GR  |   2 A$3dForC.pre.a     08E5 GR
  2 A$3dForC.pre.a     08E6 GR  |   2 A$3dForC.pre.a     08E7 GR
  2 A$3dForC.pre.a     08EA GR  |   2 A$3dForC.pre.a     08ED GR
  2 A$3dForC.pre.a     08F0 GR  |   2 A$3dForC.pre.a     08F2 GR
  2 A$3dForC.pre.a     08F3 GR  |   2 A$3dForC.pre.a     08F4 GR
  2 A$3dForC.pre.a     08F6 GR  |   2 A$3dForC.pre.a     08F7 GR
  2 A$3dForC.pre.a     08F9 GR  |   2 A$3dForC.pre.a     08FA GR
  2 A$3dForC.pre.a     08FC GR  |   2 A$3dForC.pre.a     08FD GR
  2 A$3dForC.pre.a     08FE GR  |   2 A$3dForC.pre.a     08FF GR
  2 A$3dForC.pre.a     0900 GR  |   2 A$3dForC.pre.a     0902 GR
  2 A$3dForC.pre.a     0903 GR  |   2 A$3dForC.pre.a     0904 GR
  2 A$3dForC.pre.a     0905 GR  |   2 A$3dForC.pre.a     0906 GR
  2 A$3dForC.pre.a     0907 GR  |   2 A$3dForC.pre.a     090A GR
  2 A$3dForC.pre.a     090D GR  |   2 A$3dForC.pre.a     090E GR
  2 A$3dForC.pre.a     0911 GR  |   2 A$3dForC.pre.a     0914 GR
  2 A$3dForC.pre.a     0917 GR  |   2 A$3dForC.pre.a     0919 GR
  2 A$3dForC.pre.a     091A GR  |   2 A$3dForC.pre.a     091B GR
  2 A$3dForC.pre.a     091D GR  |   2 A$3dForC.pre.a     091E GR
  2 A$3dForC.pre.a     0920 GR  |   2 A$3dForC.pre.a     0921 GR
  2 A$3dForC.pre.a     0923 GR  |   2 A$3dForC.pre.a     0924 GR
  2 A$3dForC.pre.a     0925 GR  |   2 A$3dForC.pre.a     0926 GR
  2 A$3dForC.pre.a     0927 GR  |   2 A$3dForC.pre.a     0929 GR
  2 A$3dForC.pre.a     092A GR  |   2 A$3dForC.pre.a     092B GR
  2 A$3dForC.pre.a     092C GR  |   2 A$3dForC.pre.a     092D GR
  2 A$3dForC.pre.a     092E GR  |   2 A$3dForC.pre.a     0931 GR
  2 A$3dForC.pre.a     0934 GR  |   2 A$3dForC.pre.a     0937 GR
  2 A$3dForC.pre.a     0939 GR  |   2 A$3dForC.pre.a     093A GR
  2 A$3dForC.pre.a     093B GR  |   2 A$3dForC.pre.a     093D GR
  2 A$3dForC.pre.a     093E GR  |   2 A$3dForC.pre.a     0940 GR
  2 A$3dForC.pre.a     0941 GR  |   2 A$3dForC.pre.a     0943 GR
  2 A$3dForC.pre.a     0944 GR  |   2 A$3dForC.pre.a     0945 GR
  2 A$3dForC.pre.a     0946 GR  |   2 A$3dForC.pre.a     0947 GR
  2 A$3dForC.pre.a     0949 GR  |   2 A$3dForC.pre.a     094A GR
  2 A$3dForC.pre.a     094B GR  |   2 A$3dForC.pre.a     094C GR
  2 A$3dForC.pre.a     094D GR  |   2 A$3dForC.pre.a     094E GR
  2 A$3dForC.pre.a     094F GR  |   2 A$3dForC.pre.a     0952 GR
  2 A$3dForC.pre.a     0955 GR  |   2 A$3dForC.pre.a     0956 GR
  2 A$3dForC.pre.a     0959 GR  |   2 A$3dForC.pre.a     095C GR
  2 A$3dForC.pre.a     095E GR  |   2 A$3dForC.pre.a     0962 GR
  2 A$3dForC.pre.a     0965 GR  |   2 A$3dForC.pre.a     0968 GR
  2 A$3dForC.pre.a     0969 GR  |   2 A$3dForC.pre.a     096C GR
  2 A$3dForC.pre.a     096F GR  |   2 A$3dForC.pre.a     0970 GR
  2 A$3dForC.pre.a     0973 GR  |   2 A$3dForC.pre.a     0976 GR
  2 A$3dForC.pre.a     0979 GR  |   2 A$3dForC.pre.a     097B GR
  2 A$3dForC.pre.a     097C GR  |   2 A$3dForC.pre.a     097D GR
  2 A$3dForC.pre.a     097F GR  |   2 A$3dForC.pre.a     0980 GR
  2 A$3dForC.pre.a     0982 GR  |   2 A$3dForC.pre.a     0983 GR
  2 A$3dForC.pre.a     0985 GR  |   2 A$3dForC.pre.a     0986 GR
  2 A$3dForC.pre.a     0987 GR  |   2 A$3dForC.pre.a     0988 GR
  2 A$3dForC.pre.a     0989 GR  |   2 A$3dForC.pre.a     098B GR
  2 A$3dForC.pre.a     098C GR  |   2 A$3dForC.pre.a     098D GR
  2 A$3dForC.pre.a     098E GR  |   2 A$3dForC.pre.a     098F GR
  2 A$3dForC.pre.a     0990 GR  |   2 A$3dForC.pre.a     0993 GR
  2 A$3dForC.pre.a     0996 GR  |   2 A$3dForC.pre.a     0999 GR
  2 A$3dForC.pre.a     099C GR  |   2 A$3dForC.pre.a     099E GR
  2 A$3dForC.pre.a     099F GR  |   2 A$3dForC.pre.a     09A0 GR
  2 A$3dForC.pre.a     09A2 GR  |   2 A$3dForC.pre.a     09A3 GR
  2 A$3dForC.pre.a     09A5 GR  |   2 A$3dForC.pre.a     09A6 GR
  2 A$3dForC.pre.a     09A8 GR  |   2 A$3dForC.pre.a     09A9 GR
  2 A$3dForC.pre.a     09AA GR  |   2 A$3dForC.pre.a     09AB GR
  2 A$3dForC.pre.a     09AC GR  |   2 A$3dForC.pre.a     09AE GR
  2 A$3dForC.pre.a     09AF GR  |   2 A$3dForC.pre.a     09B0 GR
  2 A$3dForC.pre.a     09B1 GR  |   2 A$3dForC.pre.a     09B2 GR
  2 A$3dForC.pre.a     09B3 GR  |   2 A$3dForC.pre.a     09B6 GR
  2 A$3dForC.pre.a     09B9 GR  |   2 A$3dForC.pre.a     09BC GR
  2 A$3dForC.pre.a     09BE GR  |   2 A$3dForC.pre.a     09BF GR
  2 A$3dForC.pre.a     09C0 GR  |   2 A$3dForC.pre.a     09C2 GR
  2 A$3dForC.pre.a     09C3 GR  |   2 A$3dForC.pre.a     09C5 GR
  2 A$3dForC.pre.a     09C6 GR  |   2 A$3dForC.pre.a     09C8 GR
  2 A$3dForC.pre.a     09C9 GR  |   2 A$3dForC.pre.a     09CA GR
  2 A$3dForC.pre.a     09CB GR  |   2 A$3dForC.pre.a     09CC GR
  2 A$3dForC.pre.a     09CE GR  |   2 A$3dForC.pre.a     09CF GR
  2 A$3dForC.pre.a     09D0 GR  |   2 A$3dForC.pre.a     09D1 GR
  2 A$3dForC.pre.a     09D2 GR  |   2 A$3dForC.pre.a     09D3 GR
  2 A$3dForC.pre.a     09D6 GR  |   2 A$3dForC.pre.a     09D9 GR
  2 A$3dForC.pre.a     09DA GR  |   2 A$3dForC.pre.a     09DD GR
  2 A$3dForC.pre.a     09E0 GR  |   2 A$3dForC.pre.a     09E3 GR
  2 A$3dForC.pre.a     09E5 GR  |   2 A$3dForC.pre.a     09E6 GR
  2 A$3dForC.pre.a     09E7 GR  |   2 A$3dForC.pre.a     09E9 GR
  2 A$3dForC.pre.a     09EA GR  |   2 A$3dForC.pre.a     09EC GR
  2 A$3dForC.pre.a     09ED GR  |   2 A$3dForC.pre.a     09EF GR
  2 A$3dForC.pre.a     09F0 GR  |   2 A$3dForC.pre.a     09F1 GR
  2 A$3dForC.pre.a     09F2 GR  |   2 A$3dForC.pre.a     09F3 GR
  2 A$3dForC.pre.a     09F5 GR  |   2 A$3dForC.pre.a     09F6 GR
  2 A$3dForC.pre.a     09F7 GR  |   2 A$3dForC.pre.a     09F8 GR
  2 A$3dForC.pre.a     09F9 GR  |   2 A$3dForC.pre.a     09FA GR
  2 A$3dForC.pre.a     09FD GR  |   2 A$3dForC.pre.a     0A00 GR
  2 A$3dForC.pre.a     0A03 GR  |   2 A$3dForC.pre.a     0A05 GR
  2 A$3dForC.pre.a     0A06 GR  |   2 A$3dForC.pre.a     0A07 GR
  2 A$3dForC.pre.a     0A09 GR  |   2 A$3dForC.pre.a     0A0A GR
  2 A$3dForC.pre.a     0A0C GR  |   2 A$3dForC.pre.a     0A0D GR
  2 A$3dForC.pre.a     0A0F GR  |   2 A$3dForC.pre.a     0A10 GR
  2 A$3dForC.pre.a     0A11 GR  |   2 A$3dForC.pre.a     0A12 GR
  2 A$3dForC.pre.a     0A13 GR  |   2 A$3dForC.pre.a     0A15 GR
  2 A$3dForC.pre.a     0A16 GR  |   2 A$3dForC.pre.a     0A17 GR
  2 A$3dForC.pre.a     0A18 GR  |   2 A$3dForC.pre.a     0A19 GR
  2 A$3dForC.pre.a     0A1A GR  |   2 A$3dForC.pre.a     0A1B GR
  2 A$3dForC.pre.a     0A1E GR  |   2 A$3dForC.pre.a     0A21 GR
  2 A$3dForC.pre.a     0A22 GR  |   2 A$3dForC.pre.a     0A25 GR
  2 A$3dForC.pre.a     0A28 GR  |   2 A$3dForC.pre.a     0A2A GR
  2 A$3dForC.pre.a     0A2E GR  |   2 A$3dForC.pre.a     0A31 GR
  2 A$3dForC.pre.a     0A34 GR  |   2 A$3dForC.pre.a     0A35 GR
  2 A$3dForC.pre.a     0A38 GR  |   2 A$3dForC.pre.a     0A3B GR
  2 A$3dForC.pre.a     0A3E GR  |   2 A$3dForC.pre.a     0A40 GR
  2 A$3dForC.pre.a     0A41 GR  |   2 A$3dForC.pre.a     0A42 GR
  2 A$3dForC.pre.a     0A44 GR  |   2 A$3dForC.pre.a     0A45 GR
  2 A$3dForC.pre.a     0A47 GR  |   2 A$3dForC.pre.a     0A48 GR
  2 A$3dForC.pre.a     0A4A GR  |   2 A$3dForC.pre.a     0A4B GR
  2 A$3dForC.pre.a     0A4C GR  |   2 A$3dForC.pre.a     0A4D GR
  2 A$3dForC.pre.a     0A4E GR  |   2 A$3dForC.pre.a     0A50 GR
  2 A$3dForC.pre.a     0A51 GR  |   2 A$3dForC.pre.a     0A52 GR
  2 A$3dForC.pre.a     0A53 GR  |   2 A$3dForC.pre.a     0A54 GR
  2 A$3dForC.pre.a     0A55 GR  |   2 A$3dForC.pre.a     0A58 GR
  2 A$3dForC.pre.a     0A5B GR  |   2 A$3dForC.pre.a     0A5E GR
  2 A$3dForC.pre.a     0A61 GR  |   2 A$3dForC.pre.a     0A63 GR
  2 A$3dForC.pre.a     0A64 GR  |   2 A$3dForC.pre.a     0A65 GR
  2 A$3dForC.pre.a     0A67 GR  |   2 A$3dForC.pre.a     0A68 GR
  2 A$3dForC.pre.a     0A6A GR  |   2 A$3dForC.pre.a     0A6B GR
  2 A$3dForC.pre.a     0A6D GR  |   2 A$3dForC.pre.a     0A6E GR
  2 A$3dForC.pre.a     0A6F GR  |   2 A$3dForC.pre.a     0A70 GR
  2 A$3dForC.pre.a     0A71 GR  |   2 A$3dForC.pre.a     0A73 GR
  2 A$3dForC.pre.a     0A74 GR  |   2 A$3dForC.pre.a     0A75 GR
  2 A$3dForC.pre.a     0A76 GR  |   2 A$3dForC.pre.a     0A77 GR
  2 A$3dForC.pre.a     0A78 GR  |   2 A$3dForC.pre.a     0A7B GR
  2 A$3dForC.pre.a     0A7E GR  |   2 A$3dForC.pre.a     0A81 GR
  2 A$3dForC.pre.a     0A83 GR  |   2 A$3dForC.pre.a     0A84 GR
  2 A$3dForC.pre.a     0A85 GR  |   2 A$3dForC.pre.a     0A87 GR
  2 A$3dForC.pre.a     0A88 GR  |   2 A$3dForC.pre.a     0A8A GR
  2 A$3dForC.pre.a     0A8B GR  |   2 A$3dForC.pre.a     0A8D GR
  2 A$3dForC.pre.a     0A8E GR  |   2 A$3dForC.pre.a     0A8F GR
  2 A$3dForC.pre.a     0A90 GR  |   2 A$3dForC.pre.a     0A91 GR
  2 A$3dForC.pre.a     0A93 GR  |   2 A$3dForC.pre.a     0A94 GR
  2 A$3dForC.pre.a     0A95 GR  |   2 A$3dForC.pre.a     0A96 GR
  2 A$3dForC.pre.a     0A97 GR  |   2 A$3dForC.pre.a     0A98 GR
  2 A$3dForC.pre.a     0A9B GR  |   2 A$3dForC.pre.a     0A9E GR
  2 A$3dForC.pre.a     0A9F GR  |   2 A$3dForC.pre.a     0AA2 GR
  2 A$3dForC.pre.a     0AA5 GR  |   2 A$3dForC.pre.a     0AA8 GR
  2 A$3dForC.pre.a     0AAA GR  |   2 A$3dForC.pre.a     0AAB GR
  2 A$3dForC.pre.a     0AAC GR  |   2 A$3dForC.pre.a     0AAE GR
  2 A$3dForC.pre.a     0AAF GR  |   2 A$3dForC.pre.a     0AB1 GR
  2 A$3dForC.pre.a     0AB2 GR  |   2 A$3dForC.pre.a     0AB4 GR
  2 A$3dForC.pre.a     0AB5 GR  |   2 A$3dForC.pre.a     0AB6 GR
  2 A$3dForC.pre.a     0AB7 GR  |   2 A$3dForC.pre.a     0AB8 GR
  2 A$3dForC.pre.a     0ABA GR  |   2 A$3dForC.pre.a     0ABB GR
  2 A$3dForC.pre.a     0ABC GR  |   2 A$3dForC.pre.a     0ABD GR
  2 A$3dForC.pre.a     0ABE GR  |   2 A$3dForC.pre.a     0ABF GR
  2 A$3dForC.pre.a     0AC2 GR  |   2 A$3dForC.pre.a     0AC5 GR
  2 A$3dForC.pre.a     0AC8 GR  |   2 A$3dForC.pre.a     0ACA GR
  2 A$3dForC.pre.a     0ACB GR  |   2 A$3dForC.pre.a     0ACC GR
  2 A$3dForC.pre.a     0ACE GR  |   2 A$3dForC.pre.a     0ACF GR
  2 A$3dForC.pre.a     0AD1 GR  |   2 A$3dForC.pre.a     0AD2 GR
  2 A$3dForC.pre.a     0AD4 GR  |   2 A$3dForC.pre.a     0AD5 GR
  2 A$3dForC.pre.a     0AD6 GR  |   2 A$3dForC.pre.a     0AD7 GR
  2 A$3dForC.pre.a     0AD8 GR  |   2 A$3dForC.pre.a     0ADA GR
  2 A$3dForC.pre.a     0ADB GR  |   2 A$3dForC.pre.a     0ADC GR
  2 A$3dForC.pre.a     0ADD GR  |   2 A$3dForC.pre.a     0ADE GR
  2 A$3dForC.pre.a     0ADF GR  |   2 A$3dForC.pre.a     0AE0 GR
  2 A$3dForC.pre.a     0AE3 GR  |   2 A$3dForC.pre.a     0AE6 GR
  2 A$3dForC.pre.a     0AE7 GR  |   2 A$3dForC.pre.a     0AEA GR
  2 A$3dForC.pre.a     0AED GR  |   2 A$3dForC.pre.a     0AEF GR
  2 A$3dForC.pre.a     0AF3 GR  |   2 A$3dForC.pre.a     0AF6 GR
  2 A$3dForC.pre.a     0AF9 GR  |   2 A$3dForC.pre.a     0AFC GR
  2 A$3dForC.pre.a     0AFD GR  |   2 A$3dForC.pre.a     0B00 GR
  2 A$3dForC.pre.a     0B03 GR  |   2 A$3dForC.pre.a     0B06 GR
  2 A$3dForC.pre.a     0B09 GR  |   2 A$3dForC.pre.a     0B0C GR
  2 A$3dForC.pre.a     0B0F GR  |   2 A$3dForC.pre.a     0B12 GR
  2 A$3dForC.pre.a     0B15 GR  |   2 A$3dForC.pre.a     0B18 GR
  2 A$3dForC.pre.a     0B1A GR  |   2 A$3dForC.pre.a     0B1B GR
  2 A$3dForC.pre.a     0B1C GR  |   2 A$3dForC.pre.a     0B1E GR
  2 A$3dForC.pre.a     0B1F GR  |   2 A$3dForC.pre.a     0B21 GR
  2 A$3dForC.pre.a     0B22 GR  |   2 A$3dForC.pre.a     0B24 GR
  2 A$3dForC.pre.a     0B25 GR  |   2 A$3dForC.pre.a     0B26 GR
  2 A$3dForC.pre.a     0B27 GR  |   2 A$3dForC.pre.a     0B28 GR
  2 A$3dForC.pre.a     0B2A GR  |   2 A$3dForC.pre.a     0B2B GR
  2 A$3dForC.pre.a     0B2C GR  |   2 A$3dForC.pre.a     0B2D GR
  2 A$3dForC.pre.a     0B2E GR  |   2 A$3dForC.pre.a     0B2F GR
  2 A$3dForC.pre.a     0B32 GR  |   2 A$3dForC.pre.a     0B35 GR
  2 A$3dForC.pre.a     0B38 GR  |   2 A$3dForC.pre.a     0B3A GR
  2 A$3dForC.pre.a     0B3B GR  |   2 A$3dForC.pre.a     0B3C GR
  2 A$3dForC.pre.a     0B3E GR  |   2 A$3dForC.pre.a     0B3F GR
  2 A$3dForC.pre.a     0B41 GR  |   2 A$3dForC.pre.a     0B42 GR
  2 A$3dForC.pre.a     0B44 GR  |   2 A$3dForC.pre.a     0B45 GR
  2 A$3dForC.pre.a     0B46 GR  |   2 A$3dForC.pre.a     0B47 GR
  2 A$3dForC.pre.a     0B48 GR  |   2 A$3dForC.pre.a     0B4A GR
  2 A$3dForC.pre.a     0B4B GR  |   2 A$3dForC.pre.a     0B4C GR
  2 A$3dForC.pre.a     0B4D GR  |   2 A$3dForC.pre.a     0B4E GR
  2 A$3dForC.pre.a     0B4F GR  |   2 A$3dForC.pre.a     0B52 GR
  2 A$3dForC.pre.a     0B55 GR  |   2 A$3dForC.pre.a     0B58 GR
  2 A$3dForC.pre.a     0B5A GR  |   2 A$3dForC.pre.a     0B5B GR
  2 A$3dForC.pre.a     0B5C GR  |   2 A$3dForC.pre.a     0B5E GR
  2 A$3dForC.pre.a     0B5F GR  |   2 A$3dForC.pre.a     0B61 GR
  2 A$3dForC.pre.a     0B62 GR  |   2 A$3dForC.pre.a     0B64 GR
  2 A$3dForC.pre.a     0B65 GR  |   2 A$3dForC.pre.a     0B66 GR
  2 A$3dForC.pre.a     0B67 GR  |   2 A$3dForC.pre.a     0B68 GR
  2 A$3dForC.pre.a     0B6A GR  |   2 A$3dForC.pre.a     0B6B GR
  2 A$3dForC.pre.a     0B6C GR  |   2 A$3dForC.pre.a     0B6D GR
  2 A$3dForC.pre.a     0B6E GR  |   2 A$3dForC.pre.a     0B6F GR
  2 A$3dForC.pre.a     0B72 GR  |   2 A$3dForC.pre.a     0B75 GR
  2 A$3dForC.pre.a     0B76 GR  |   2 A$3dForC.pre.a     0B79 GR
  2 A$3dForC.pre.a     0B7C GR  |   2 A$3dForC.pre.a     0B7F GR
  2 A$3dForC.pre.a     0B81 GR  |   2 A$3dForC.pre.a     0B82 GR
  2 A$3dForC.pre.a     0B83 GR  |   2 A$3dForC.pre.a     0B85 GR
  2 A$3dForC.pre.a     0B86 GR  |   2 A$3dForC.pre.a     0B88 GR
  2 A$3dForC.pre.a     0B89 GR  |   2 A$3dForC.pre.a     0B8B GR
  2 A$3dForC.pre.a     0B8C GR  |   2 A$3dForC.pre.a     0B8D GR
  2 A$3dForC.pre.a     0B8E GR  |   2 A$3dForC.pre.a     0B8F GR
  2 A$3dForC.pre.a     0B91 GR  |   2 A$3dForC.pre.a     0B92 GR
  2 A$3dForC.pre.a     0B93 GR  |   2 A$3dForC.pre.a     0B94 GR
  2 A$3dForC.pre.a     0B95 GR  |   2 A$3dForC.pre.a     0B96 GR
  2 A$3dForC.pre.a     0B99 GR  |   2 A$3dForC.pre.a     0B9C GR
  2 A$3dForC.pre.a     0B9F GR  |   2 A$3dForC.pre.a     0BA1 GR
  2 A$3dForC.pre.a     0BA2 GR  |   2 A$3dForC.pre.a     0BA3 GR
  2 A$3dForC.pre.a     0BA5 GR  |   2 A$3dForC.pre.a     0BA6 GR
  2 A$3dForC.pre.a     0BA8 GR  |   2 A$3dForC.pre.a     0BA9 GR
  2 A$3dForC.pre.a     0BAB GR  |   2 A$3dForC.pre.a     0BAC GR
  2 A$3dForC.pre.a     0BAD GR  |   2 A$3dForC.pre.a     0BAE GR
  2 A$3dForC.pre.a     0BAF GR  |   2 A$3dForC.pre.a     0BB1 GR
  2 A$3dForC.pre.a     0BB2 GR  |   2 A$3dForC.pre.a     0BB3 GR
  2 A$3dForC.pre.a     0BB4 GR  |   2 A$3dForC.pre.a     0BB5 GR
  2 A$3dForC.pre.a     0BB6 GR  |   2 A$3dForC.pre.a     0BB7 GR
  2 A$3dForC.pre.a     0BBA GR  |   2 A$3dForC.pre.a     0BBD GR
  2 A$3dForC.pre.a     0BBE GR  |   2 A$3dForC.pre.a     0BC1 GR
  2 A$3dForC.pre.a     0BC4 GR  |   2 A$3dForC.pre.a     0BC6 GR
  2 A$3dForC.pre.a     0BCA GR  |   2 A$3dForC.pre.a     0BCD GR
  2 A$3dForC.pre.a     0BD0 GR  |   2 A$3dForC.pre.a     0BD3 GR
  2 A$3dForC.pre.a     0BD4 GR  |   2 A$3dForC.pre.a     0BD7 GR
  2 A$3dForC.pre.a     0BDA GR  |   2 A$3dForC.pre.a     0BDD GR
  2 A$3dForC.pre.a     0BE0 GR  |   2 A$3dForC.pre.a     0BE3 GR
  2 A$3dForC.pre.a     0BE6 GR  |   2 A$3dForC.pre.a     0BE9 GR
  2 A$3dForC.pre.a     0BEC GR  |   2 A$3dForC.pre.a     0BEF GR
  2 A$3dForC.pre.a     0BF1 GR  |   2 A$3dForC.pre.a     0BF2 GR
  2 A$3dForC.pre.a     0BF3 GR  |   2 A$3dForC.pre.a     0BF5 GR
  2 A$3dForC.pre.a     0BF6 GR  |   2 A$3dForC.pre.a     0BF8 GR
  2 A$3dForC.pre.a     0BF9 GR  |   2 A$3dForC.pre.a     0BFB GR
  2 A$3dForC.pre.a     0BFC GR  |   2 A$3dForC.pre.a     0BFD GR
  2 A$3dForC.pre.a     0BFE GR  |   2 A$3dForC.pre.a     0BFF GR
  2 A$3dForC.pre.a     0C01 GR  |   2 A$3dForC.pre.a     0C02 GR
  2 A$3dForC.pre.a     0C03 GR  |   2 A$3dForC.pre.a     0C04 GR
  2 A$3dForC.pre.a     0C05 GR  |   2 A$3dForC.pre.a     0C06 GR
  2 A$3dForC.pre.a     0C09 GR  |   2 A$3dForC.pre.a     0C0C GR
  2 A$3dForC.pre.a     0C0F GR  |   2 A$3dForC.pre.a     0C12 GR
  2 A$3dForC.pre.a     0C14 GR  |   2 A$3dForC.pre.a     0C15 GR
  2 A$3dForC.pre.a     0C16 GR  |   2 A$3dForC.pre.a     0C18 GR
  2 A$3dForC.pre.a     0C19 GR  |   2 A$3dForC.pre.a     0C1B GR
  2 A$3dForC.pre.a     0C1C GR  |   2 A$3dForC.pre.a     0C1E GR
  2 A$3dForC.pre.a     0C1F GR  |   2 A$3dForC.pre.a     0C20 GR
  2 A$3dForC.pre.a     0C21 GR  |   2 A$3dForC.pre.a     0C22 GR
  2 A$3dForC.pre.a     0C24 GR  |   2 A$3dForC.pre.a     0C25 GR
  2 A$3dForC.pre.a     0C26 GR  |   2 A$3dForC.pre.a     0C27 GR
  2 A$3dForC.pre.a     0C28 GR  |   2 A$3dForC.pre.a     0C29 GR
  2 A$3dForC.pre.a     0C2C GR  |   2 A$3dForC.pre.a     0C2F GR
  2 A$3dForC.pre.a     0C32 GR  |   2 A$3dForC.pre.a     0C34 GR
  2 A$3dForC.pre.a     0C35 GR  |   2 A$3dForC.pre.a     0C36 GR
  2 A$3dForC.pre.a     0C38 GR  |   2 A$3dForC.pre.a     0C39 GR
  2 A$3dForC.pre.a     0C3B GR  |   2 A$3dForC.pre.a     0C3C GR
  2 A$3dForC.pre.a     0C3E GR  |   2 A$3dForC.pre.a     0C3F GR
  2 A$3dForC.pre.a     0C40 GR  |   2 A$3dForC.pre.a     0C41 GR
  2 A$3dForC.pre.a     0C42 GR  |   2 A$3dForC.pre.a     0C44 GR
  2 A$3dForC.pre.a     0C45 GR  |   2 A$3dForC.pre.a     0C46 GR
  2 A$3dForC.pre.a     0C47 GR  |   2 A$3dForC.pre.a     0C48 GR
  2 A$3dForC.pre.a     0C49 GR  |   2 A$3dForC.pre.a     0C4C GR
  2 A$3dForC.pre.a     0C4F GR  |   2 A$3dForC.pre.a     0C50 GR
  2 A$3dForC.pre.a     0C53 GR  |   2 A$3dForC.pre.a     0C56 GR
  2 A$3dForC.pre.a     0C59 GR  |   2 A$3dForC.pre.a     0C5B GR
  2 A$3dForC.pre.a     0C5C GR  |   2 A$3dForC.pre.a     0C5D GR
  2 A$3dForC.pre.a     0C5F GR  |   2 A$3dForC.pre.a     0C60 GR
  2 A$3dForC.pre.a     0C62 GR  |   2 A$3dForC.pre.a     0C63 GR
  2 A$3dForC.pre.a     0C65 GR  |   2 A$3dForC.pre.a     0C66 GR
  2 A$3dForC.pre.a     0C67 GR  |   2 A$3dForC.pre.a     0C68 GR
  2 A$3dForC.pre.a     0C69 GR  |   2 A$3dForC.pre.a     0C6B GR
  2 A$3dForC.pre.a     0C6C GR  |   2 A$3dForC.pre.a     0C6D GR
  2 A$3dForC.pre.a     0C6E GR  |   2 A$3dForC.pre.a     0C6F GR
  2 A$3dForC.pre.a     0C70 GR  |   2 A$3dForC.pre.a     0C73 GR
  2 A$3dForC.pre.a     0C76 GR  |   2 A$3dForC.pre.a     0C79 GR
  2 A$3dForC.pre.a     0C7B GR  |   2 A$3dForC.pre.a     0C7C GR
  2 A$3dForC.pre.a     0C7D GR  |   2 A$3dForC.pre.a     0C7F GR
  2 A$3dForC.pre.a     0C80 GR  |   2 A$3dForC.pre.a     0C82 GR
  2 A$3dForC.pre.a     0C83 GR  |   2 A$3dForC.pre.a     0C85 GR
  2 A$3dForC.pre.a     0C86 GR  |   2 A$3dForC.pre.a     0C87 GR
  2 A$3dForC.pre.a     0C88 GR  |   2 A$3dForC.pre.a     0C89 GR
  2 A$3dForC.pre.a     0C8B GR  |   2 A$3dForC.pre.a     0C8C GR
  2 A$3dForC.pre.a     0C8D GR  |   2 A$3dForC.pre.a     0C8E GR
  2 A$3dForC.pre.a     0C8F GR  |   2 A$3dForC.pre.a     0C90 GR
  2 A$3dForC.pre.a     0C91 GR  |   2 A$3dForC.pre.a     0C94 GR
  2 A$3dForC.pre.a     0C97 GR  |   2 A$3dForC.pre.a     0C98 GR
  2 A$3dForC.pre.a     0C9B GR  |   2 A$3dForC.pre.a     0C9E GR
  2 A$3dForC.pre.a     0CA0 GR  |   2 A$3dForC.pre.a     0CA4 GR
  2 A$3dForC.pre.a     0CA7 GR  |   2 A$3dForC.pre.a     0CAA GR
  2 A$3dForC.pre.a     0CAD GR  |   2 A$3dForC.pre.a     0CAE GR
  2 A$3dForC.pre.a     0CB1 GR  |   2 A$3dForC.pre.a     0CB4 GR
  2 A$3dForC.pre.a     0CB7 GR  |   2 A$3dForC.pre.a     0CBA GR
  2 A$3dForC.pre.a     0CBD GR  |   2 A$3dForC.pre.a     0CC0 GR
  2 A$3dForC.pre.a     0CC3 GR  |   2 A$3dForC.pre.a     0CC6 GR
  2 A$3dForC.pre.a     0CC9 GR  |   2 A$3dForC.pre.a     0CCB GR
  2 A$3dForC.pre.a     0CCC GR  |   2 A$3dForC.pre.a     0CCD GR
  2 A$3dForC.pre.a     0CCF GR  |   2 A$3dForC.pre.a     0CD0 GR
  2 A$3dForC.pre.a     0CD2 GR  |   2 A$3dForC.pre.a     0CD3 GR
  2 A$3dForC.pre.a     0CD5 GR  |   2 A$3dForC.pre.a     0CD6 GR
  2 A$3dForC.pre.a     0CD7 GR  |   2 A$3dForC.pre.a     0CD8 GR
  2 A$3dForC.pre.a     0CD9 GR  |   2 A$3dForC.pre.a     0CDB GR
  2 A$3dForC.pre.a     0CDC GR  |   2 A$3dForC.pre.a     0CDD GR
  2 A$3dForC.pre.a     0CDE GR  |   2 A$3dForC.pre.a     0CDF GR
  2 A$3dForC.pre.a     0CE0 GR  |   2 A$3dForC.pre.a     0CE3 GR
  2 A$3dForC.pre.a     0CE6 GR  |   2 A$3dForC.pre.a     0CE9 GR
  2 A$3dForC.pre.a     0CEC GR  |   2 A$3dForC.pre.a     0CEE GR
  2 A$3dForC.pre.a     0CEF GR  |   2 A$3dForC.pre.a     0CF0 GR
  2 A$3dForC.pre.a     0CF2 GR  |   2 A$3dForC.pre.a     0CF3 GR
  2 A$3dForC.pre.a     0CF5 GR  |   2 A$3dForC.pre.a     0CF6 GR
  2 A$3dForC.pre.a     0CF8 GR  |   2 A$3dForC.pre.a     0CF9 GR
  2 A$3dForC.pre.a     0CFA GR  |   2 A$3dForC.pre.a     0CFB GR
  2 A$3dForC.pre.a     0CFC GR  |   2 A$3dForC.pre.a     0CFE GR
  2 A$3dForC.pre.a     0CFF GR  |   2 A$3dForC.pre.a     0D00 GR
  2 A$3dForC.pre.a     0D01 GR  |   2 A$3dForC.pre.a     0D02 GR
  2 A$3dForC.pre.a     0D03 GR  |   2 A$3dForC.pre.a     0D06 GR
  2 A$3dForC.pre.a     0D09 GR  |   2 A$3dForC.pre.a     0D0C GR
  2 A$3dForC.pre.a     0D0E GR  |   2 A$3dForC.pre.a     0D0F GR
  2 A$3dForC.pre.a     0D10 GR  |   2 A$3dForC.pre.a     0D12 GR
  2 A$3dForC.pre.a     0D13 GR  |   2 A$3dForC.pre.a     0D15 GR
  2 A$3dForC.pre.a     0D16 GR  |   2 A$3dForC.pre.a     0D18 GR
  2 A$3dForC.pre.a     0D19 GR  |   2 A$3dForC.pre.a     0D1A GR
  2 A$3dForC.pre.a     0D1B GR  |   2 A$3dForC.pre.a     0D1C GR
  2 A$3dForC.pre.a     0D1E GR  |   2 A$3dForC.pre.a     0D1F GR
  2 A$3dForC.pre.a     0D20 GR  |   2 A$3dForC.pre.a     0D21 GR
  2 A$3dForC.pre.a     0D22 GR  |   2 A$3dForC.pre.a     0D23 GR
  2 A$3dForC.pre.a     0D26 GR  |   2 A$3dForC.pre.a     0D29 GR
  2 A$3dForC.pre.a     0D2A GR  |   2 A$3dForC.pre.a     0D2D GR
  2 A$3dForC.pre.a     0D30 GR  |   2 A$3dForC.pre.a     0D33 GR
  2 A$3dForC.pre.a     0D35 GR  |   2 A$3dForC.pre.a     0D36 GR
  2 A$3dForC.pre.a     0D37 GR  |   2 A$3dForC.pre.a     0D39 GR
  2 A$3dForC.pre.a     0D3A GR  |   2 A$3dForC.pre.a     0D3C GR
  2 A$3dForC.pre.a     0D3D GR  |   2 A$3dForC.pre.a     0D3F GR
  2 A$3dForC.pre.a     0D40 GR  |   2 A$3dForC.pre.a     0D41 GR
  2 A$3dForC.pre.a     0D42 GR  |   2 A$3dForC.pre.a     0D43 GR
  2 A$3dForC.pre.a     0D45 GR  |   2 A$3dForC.pre.a     0D46 GR
  2 A$3dForC.pre.a     0D47 GR  |   2 A$3dForC.pre.a     0D48 GR
  2 A$3dForC.pre.a     0D49 GR  |   2 A$3dForC.pre.a     0D4A GR
  2 A$3dForC.pre.a     0D4D GR  |   2 A$3dForC.pre.a     0D50 GR
  2 A$3dForC.pre.a     0D53 GR  |   2 A$3dForC.pre.a     0D55 GR
  2 A$3dForC.pre.a     0D56 GR  |   2 A$3dForC.pre.a     0D57 GR
  2 A$3dForC.pre.a     0D59 GR  |   2 A$3dForC.pre.a     0D5A GR
  2 A$3dForC.pre.a     0D5C GR  |   2 A$3dForC.pre.a     0D5D GR
  2 A$3dForC.pre.a     0D5F GR  |   2 A$3dForC.pre.a     0D60 GR
  2 A$3dForC.pre.a     0D61 GR  |   2 A$3dForC.pre.a     0D62 GR
  2 A$3dForC.pre.a     0D63 GR  |   2 A$3dForC.pre.a     0D65 GR
  2 A$3dForC.pre.a     0D66 GR  |   2 A$3dForC.pre.a     0D67 GR
  2 A$3dForC.pre.a     0D68 GR  |   2 A$3dForC.pre.a     0D69 GR
  2 A$3dForC.pre.a     0D6A GR  |   2 A$3dForC.pre.a     0D6B GR
  2 A$3dForC.pre.a     0D6E GR  |   2 A$3dForC.pre.a     0D71 GR
  2 A$3dForC.pre.a     0D72 GR  |   2 A$3dForC.pre.a     0D75 GR
  2 A$3dForC.pre.a     0D78 GR  |   2 A$3dForC.pre.a     0D7A GR
  2 A$3dForC.pre.a     0D7E GR  |   2 A$3dForC.pre.a     0D81 GR
  2 A$3dForC.pre.a     0D84 GR  |   2 A$3dForC.pre.a     0D87 GR
  2 A$3dForC.pre.a     0D88 GR  |   2 A$3dForC.pre.a     0D8B GR
  2 A$3dForC.pre.a     0D8E GR  |   2 A$3dForC.pre.a     0D91 GR
  2 A$3dForC.pre.a     0D94 GR  |   2 A$3dForC.pre.a     0D97 GR
  2 A$3dForC.pre.a     0D98 GR  |   2 A$3dForC.pre.a     0D9B GR
  2 A$3dForC.pre.a     0D9E GR  |   2 A$3dForC.pre.a     0DA1 GR
  2 A$3dForC.pre.a     0DA4 GR  |   2 A$3dForC.pre.a     0DA6 GR
  2 A$3dForC.pre.a     0DA7 GR  |   2 A$3dForC.pre.a     0DA8 GR
  2 A$3dForC.pre.a     0DAA GR  |   2 A$3dForC.pre.a     0DAB GR
  2 A$3dForC.pre.a     0DAD GR  |   2 A$3dForC.pre.a     0DAE GR
  2 A$3dForC.pre.a     0DB0 GR  |   2 A$3dForC.pre.a     0DB1 GR
  2 A$3dForC.pre.a     0DB2 GR  |   2 A$3dForC.pre.a     0DB3 GR
  2 A$3dForC.pre.a     0DB4 GR  |   2 A$3dForC.pre.a     0DB6 GR
  2 A$3dForC.pre.a     0DB7 GR  |   2 A$3dForC.pre.a     0DB8 GR
  2 A$3dForC.pre.a     0DB9 GR  |   2 A$3dForC.pre.a     0DBA GR
  2 A$3dForC.pre.a     0DBB GR  |   2 A$3dForC.pre.a     0DBE GR
  2 A$3dForC.pre.a     0DC1 GR  |   2 A$3dForC.pre.a     0DC4 GR
  2 A$3dForC.pre.a     0DC7 GR  |   2 A$3dForC.pre.a     0DC9 GR
  2 A$3dForC.pre.a     0DCA GR  |   2 A$3dForC.pre.a     0DCB GR
  2 A$3dForC.pre.a     0DCD GR  |   2 A$3dForC.pre.a     0DCE GR
  2 A$3dForC.pre.a     0DD0 GR  |   2 A$3dForC.pre.a     0DD1 GR
  2 A$3dForC.pre.a     0DD3 GR  |   2 A$3dForC.pre.a     0DD4 GR
  2 A$3dForC.pre.a     0DD5 GR  |   2 A$3dForC.pre.a     0DD6 GR
  2 A$3dForC.pre.a     0DD7 GR  |   2 A$3dForC.pre.a     0DD9 GR
  2 A$3dForC.pre.a     0DDA GR  |   2 A$3dForC.pre.a     0DDB GR
  2 A$3dForC.pre.a     0DDC GR  |   2 A$3dForC.pre.a     0DDD GR
  2 A$3dForC.pre.a     0DDE GR  |   2 A$3dForC.pre.a     0DE1 GR
  2 A$3dForC.pre.a     0DE4 GR  |   2 A$3dForC.pre.a     0DE7 GR
  2 A$3dForC.pre.a     0DE9 GR  |   2 A$3dForC.pre.a     0DEA GR
  2 A$3dForC.pre.a     0DEB GR  |   2 A$3dForC.pre.a     0DED GR
  2 A$3dForC.pre.a     0DEE GR  |   2 A$3dForC.pre.a     0DF0 GR
  2 A$3dForC.pre.a     0DF1 GR  |   2 A$3dForC.pre.a     0DF3 GR
  2 A$3dForC.pre.a     0DF4 GR  |   2 A$3dForC.pre.a     0DF5 GR
  2 A$3dForC.pre.a     0DF6 GR  |   2 A$3dForC.pre.a     0DF7 GR
  2 A$3dForC.pre.a     0DF9 GR  |   2 A$3dForC.pre.a     0DFA GR
  2 A$3dForC.pre.a     0DFB GR  |   2 A$3dForC.pre.a     0DFC GR
  2 A$3dForC.pre.a     0DFD GR  |   2 A$3dForC.pre.a     0DFE GR
  2 A$3dForC.pre.a     0E01 GR  |   2 A$3dForC.pre.a     0E04 GR
  2 A$3dForC.pre.a     0E05 GR  |   2 A$3dForC.pre.a     0E08 GR
  2 A$3dForC.pre.a     0E0B GR  |   2 A$3dForC.pre.a     0E0E GR
  2 A$3dForC.pre.a     0E10 GR  |   2 A$3dForC.pre.a     0E11 GR
  2 A$3dForC.pre.a     0E12 GR  |   2 A$3dForC.pre.a     0E14 GR
  2 A$3dForC.pre.a     0E15 GR  |   2 A$3dForC.pre.a     0E17 GR
  2 A$3dForC.pre.a     0E18 GR  |   2 A$3dForC.pre.a     0E1A GR
  2 A$3dForC.pre.a     0E1B GR  |   2 A$3dForC.pre.a     0E1C GR
  2 A$3dForC.pre.a     0E1D GR  |   2 A$3dForC.pre.a     0E1E GR
  2 A$3dForC.pre.a     0E20 GR  |   2 A$3dForC.pre.a     0E21 GR
  2 A$3dForC.pre.a     0E22 GR  |   2 A$3dForC.pre.a     0E23 GR
  2 A$3dForC.pre.a     0E24 GR  |   2 A$3dForC.pre.a     0E25 GR
  2 A$3dForC.pre.a     0E28 GR  |   2 A$3dForC.pre.a     0E2B GR
  2 A$3dForC.pre.a     0E2E GR  |   2 A$3dForC.pre.a     0E30 GR
  2 A$3dForC.pre.a     0E31 GR  |   2 A$3dForC.pre.a     0E32 GR
  2 A$3dForC.pre.a     0E34 GR  |   2 A$3dForC.pre.a     0E35 GR
  2 A$3dForC.pre.a     0E37 GR  |   2 A$3dForC.pre.a     0E38 GR
  2 A$3dForC.pre.a     0E3A GR  |   2 A$3dForC.pre.a     0E3B GR
  2 A$3dForC.pre.a     0E3C GR  |   2 A$3dForC.pre.a     0E3D GR
  2 A$3dForC.pre.a     0E3E GR  |   2 A$3dForC.pre.a     0E40 GR
  2 A$3dForC.pre.a     0E41 GR  |   2 A$3dForC.pre.a     0E42 GR
  2 A$3dForC.pre.a     0E43 GR  |   2 A$3dForC.pre.a     0E44 GR
  2 A$3dForC.pre.a     0E45 GR  |   2 A$3dForC.pre.a     0E46 GR
  2 A$3dForC.pre.a     0E49 GR  |   2 A$3dForC.pre.a     0E4C GR
  2 A$3dForC.pre.a     0E4D GR  |   2 A$3dForC.pre.a     0E50 GR
  2 A$3dForC.pre.a     0000 GR  |   2 A$3dForC.pre.a     0002 GR
  2 A$3dForC.pre.a     0004 GR  |   2 A$3dForC.pre.a     0007 GR
  2 A$3dForC.pre.a     0009 GR  |   2 A$3dForC.pre.a     000C GR
  2 A$3dForC.pre.a     000F GR  |   2 A$3dForC.pre.a     0011 GR
  2 A$3dForC.pre.a     0014 GR  |   2 A$3dForC.pre.a     0017 GR
  2 A$3dForC.pre.a     001A GR  |   2 A$3dForC.pre.a     001D GR
  2 A$3dForC.pre.a     001F GR  |   2 A$3dForC.pre.a     0021 GR
  2 A$3dForC.pre.a     0023 GR  |   2 A$3dForC.pre.a     0025 GR
  2 A$3dForC.pre.a     0027 GR  |   2 A$3dForC.pre.a     0029 GR
  2 A$3dForC.pre.a     002C GR  |   2 A$3dForC.pre.a     002E GR
  2 A$3dForC.pre.a     0030 GR  |   2 A$3dForC.pre.a     0033 GR
  2 A$3dForC.pre.a     0035 GR  |   2 A$3dForC.pre.a     0038 GR
  2 A$3dForC.pre.a     003B GR  |   2 A$3dForC.pre.a     003D GR
  2 A$3dForC.pre.a     0040 GR  |   2 A$3dForC.pre.a     0041 GR
  2 A$3dForC.pre.a     0043 GR  |   2 A$3dForC.pre.a     0045 GR
  2 A$3dForC.pre.a     0048 GR  |   2 A$3dForC.pre.a     004B GR
  2 A$3dForC.pre.a     004D GR  |   2 A$3dForC.pre.a     0050 GR
  2 A$3dForC.pre.a     0053 GR  |   2 A$3dForC.pre.a     0056 GR
  2 A$3dForC.pre.a     0059 GR  |   2 A$3dForC.pre.a     005B GR
  2 A$3dForC.pre.a     005D GR  |   2 A$3dForC.pre.a     005F GR
  2 A$3dForC.pre.a     0061 GR  |   2 A$3dForC.pre.a     0064 GR
  2 A$3dForC.pre.a     0067 GR  |   2 A$3dForC.pre.a     0069 GR
  2 A$3dForC.pre.a     006C GR  |   2 A$3dForC.pre.a     006E GR
  2 A$3dForC.pre.a     0071 GR  |   2 A$3dForC.pre.a     0074 GR
  2 A$3dForC.pre.a     0076 GR  |   2 A$3dForC.pre.a     0079 GR
  2 A$3dForC.pre.a     007A GR  |   2 A$3dForC.pre.a     007C GR
  2 A$3dForC.pre.a     007E GR  |   2 A$3dForC.pre.a     0080 GR
  2 A$3dForC.pre.a     0082 GR  |   2 A$3dForC.pre.a     0084 GR
  2 A$3dForC.pre.a     0086 GR  |   2 A$3dForC.pre.a     0088 GR
  2 A$3dForC.pre.a     008A GR  |   2 A$3dForC.pre.a     008C GR
  2 A$3dForC.pre.a     008E GR  |   2 A$3dForC.pre.a     0090 GR
  2 A$3dForC.pre.a     0092 GR  |   2 A$3dForC.pre.a     0094 GR
  2 A$3dForC.pre.a     0097 GR  |   2 A$3dForC.pre.a     0099 GR
  2 A$3dForC.pre.a     009B GR  |   2 A$3dForC.pre.a     009D GR
  2 A$3dForC.pre.a     009F GR  |   2 A$3dForC.pre.a     00A2 GR
  2 A$3dForC.pre.a     00A4 GR  |   2 A$3dForC.pre.a     00A6 GR
  2 A$3dForC.pre.a     00A8 GR  |   2 A$3dForC.pre.a     0129 GR
  2 A$3dForC.pre.a     012C GR  |   2 A$3dForC.pre.a     012F GR
  2 A$3dForC.pre.a     0132 GR  |   2 A$3dForC.pre.a     0134 GR
  2 A$3dForC.pre.a     0137 GR  |   2 A$3dForC.pre.a     0139 GR
  2 A$3dForC.pre.a     013C GR  |   2 A$3dForC.pre.a     013F GR
  2 A$3dForC.pre.a     0141 GR  |   2 A$3dForC.pre.a     0144 GR
  2 A$3dForC.pre.a     0146 GR  |   2 A$3dForC.pre.a     0149 GR
  2 A$3dForC.pre.a     014C GR  |   2 A$3dForC.pre.a     014E GR
  2 A$3dForC.pre.a     0151 GR  |   2 A$3dForC.pre.a     0153 GR
  2 A$3dForC.pre.a     0156 GR  |   2 A$3dForC.pre.a     0159 GR
  2 A$3dForC.pre.a     015B GR  |   2 A$3dForC.pre.a     015D GR
  2 A$3dForC.pre.a     015E GR  |   2 A$3dForC.pre.a     0161 GR
  2 A$3dForC.pre.a     0164 GR  |   2 A$3dForC.pre.a     0167 GR
  2 A$3dForC.pre.a     016A GR  |   2 A$3dForC.pre.a     016D GR
  2 A$3dForC.pre.a     016F GR  |   2 A$3dForC.pre.a     0173 GR
  2 A$3dForC.pre.a     0176 GR  |   2 A$3dForC.pre.a     0179 GR
  2 A$3dForC.pre.a     017B GR  |   2 A$3dForC.pre.a     017C GR
  2 A$3dForC.pre.a     017D GR  |   2 A$3dForC.pre.a     017F GR
  2 A$3dForC.pre.a     0180 GR  |   2 A$3dForC.pre.a     0182 GR
  2 A$3dForC.pre.a     0183 GR  |   2 A$3dForC.pre.a     0185 GR
  2 A$3dForC.pre.a     0186 GR  |   2 A$3dForC.pre.a     0187 GR
  2 A$3dForC.pre.a     0188 GR  |   2 A$3dForC.pre.a     0189 GR
  2 A$3dForC.pre.a     018B GR  |   2 A$3dForC.pre.a     018C GR
  2 A$3dForC.pre.a     018D GR  |   2 A$3dForC.pre.a     018E GR
  2 A$3dForC.pre.a     018F GR  |   2 A$3dForC.pre.a     0190 GR
  2 A$3dForC.pre.a     0193 GR  |   2 A$3dForC.pre.a     0196 GR
  2 A$3dForC.pre.a     0199 GR  |   2 A$3dForC.pre.a     019B GR
  2 A$3dForC.pre.a     019C GR  |   2 A$3dForC.pre.a     019D GR
  2 A$3dForC.pre.a     019F GR  |   2 A$3dForC.pre.a     01A0 GR
  2 A$3dForC.pre.a     01A2 GR  |   2 A$3dForC.pre.a     01A3 GR
  2 A$3dForC.pre.a     01A5 GR  |   2 A$3dForC.pre.a     01A6 GR
  2 A$3dForC.pre.a     01A7 GR  |   2 A$3dForC.pre.a     01A8 GR
  2 A$3dForC.pre.a     01A9 GR  |   2 A$3dForC.pre.a     01AB GR
  2 A$3dForC.pre.a     01AC GR  |   2 A$3dForC.pre.a     01AD GR
  2 A$3dForC.pre.a     01AE GR  |   2 A$3dForC.pre.a     01AF GR
  2 A$3dForC.pre.a     01B0 GR  |   2 A$3dForC.pre.a     01B3 GR
  2 A$3dForC.pre.a     01B6 GR  |   2 A$3dForC.pre.a     01B9 GR
  2 A$3dForC.pre.a     01BB GR  |   2 A$3dForC.pre.a     01BC GR
  2 A$3dForC.pre.a     01BD GR  |   2 A$3dForC.pre.a     01BF GR
  2 A$3dForC.pre.a     01C0 GR  |   2 A$3dForC.pre.a     01C2 GR
  2 A$3dForC.pre.a     01C3 GR  |   2 A$3dForC.pre.a     01C5 GR
    ADD_000        =   0000     |     ADD_001        =   0015 
    ADD_010        =   000F     |     ADD_011        =   0012 
    ADD_0N1        =   001E     |     ADD_100        =   0003 
    ADD_101        =   0009     |     ADD_110        =   0006 
    ADD_111        =   000C     |     ADD_11N        =   0027 
    ADD_1N1        =   0024     |     ADD_N01        =   001B 
    ADD_N10        =   0018     |     ADD_N11        =   0021 
    Abs_a_b        =   F584     |     Abs_b          =   F58B 
    Add_Score_a    =   F85E     |     Add_Score_d    =   F87C 
    Bitmask_a      =   F57E     |     Char_Table     =   F9F4 
    Char_Table_End =   FBD4     |     Check0Ref      =   F34F 
    Clear_C8_RAM   =   F542     |     Clear_Score    =   F84F 
    Clear_Sound    =   F272     |     Clear_x_256    =   F545 
    Clear_x_b      =   F53F     |     Clear_x_b_80   =   F550 
    Clear_x_b_a    =   F552     |     Clear_x_d      =   F548 
    Cold_Start     =   F000     |     Compare_Score  =   F8C7 
    DO_Z_KOORDINAT =   0001     |     DP_to_C8       =   F1AF 
    DP_to_D0       =   F1AA     |     Dec_3_Counters =   F55A 
    Dec_6_Counters =   F55E     |     Dec_Counters   =   F563 
    Delay_0        =   F579     |     Delay_1        =   F575 
    Delay_2        =   F571     |     Delay_3        =   F56D 
    Delay_RTS      =   F57D     |     Delay_b        =   F57A 
    Do_Sound       =   F289     |     Do_Sound_x     =   F28C 
    Dot_List       =   F2D5     |     Dot_List_Reset =   F2DE 
    Dot_d          =   F2C3     |     Dot_here       =   F2C5 
    Dot_ix         =   F2C1     |     Dot_ix_b       =   F2BE 
    Draw_Grid_VL   =   FF9F     |     Draw_Line_d    =   F3DF 
    Draw_Pat_VL    =   F437     |     Draw_Pat_VL_a  =   F434 
    Draw_Pat_VL_d  =   F439     |     Draw_VL        =   F3DD 
    Draw_VL_a      =   F3DA     |     Draw_VL_ab     =   F3D8 
    Draw_VL_b      =   F3D2     |     Draw_VL_mode   =   F46E 
    Draw_VLc       =   F3CE     |     Draw_VLcs      =   F3D6 
    Draw_VLp       =   F410     |     Draw_VLp_7F    =   F408 
    Draw_VLp_FF    =   F404     |     Draw_VLp_b     =   F40E 
    Draw_VLp_scale =   F40C     |     Explosion_Snd  =   F92E 
    Get_Rise_Idx   =   F5D9     |     Get_Rise_Run   =   F5EF 
    Get_Run_Idx    =   F5DB     |     INCLUDE_I      =   0001 
    INVERS_OFFSET  =   002A     |   3 I_0_0_0        =   0038 R
  3 I_0_0_1        =   004D R   |   3 I_0_1_0        =   0047 R
  3 I_0_1_1        =   004A R   |   3 I_0_N_1        =   0056 R
  3 I_1_0_0        =   003B R   |   3 I_1_0_1        =   0041 R
  3 I_1_1_0        =   003E R   |   3 I_1_1_1        =   0044 R
  3 I_1_1_N        =   005F R   |   3 I_1_N_1        =   005C R
  3 I_N_0_1        =   0053 R   |   3 I_N_1_0        =   0050 R
  3 I_N_1_1        =   0059 R   |     Init_Music     =   F68D 
    Init_Music_Buf =   F533     |     Init_Music_chk =   F687 
    Init_Music_x   =   F692     |     Init_OS        =   F18B 
    Init_OS_RAM    =   F164     |     Init_VIA       =   F14C 
    Intensity_1F   =   F29D     |     Intensity_3F   =   F2A1 
    Intensity_5F   =   F2A5     |     Intensity_7F   =   F2A9 
    Intensity_a    =   F2AB     |     Joy_Analog     =   F1F5 
    Joy_Digital    =   F1F8     |     Mov_Draw_VL    =   F3BC 
    Mov_Draw_VL_a  =   F3B9     |     Mov_Draw_VL_ab =   F3B7 
    Mov_Draw_VL_b  =   F3B1     |     Mov_Draw_VL_d  =   F3BE 
    Mov_Draw_VLc_a =   F3AD     |     Mov_Draw_VLcs  =   F3B5 
    Move_Mem_a     =   F683     |     Move_Mem_a_1   =   F67F 
    Moveto_d       =   F312     |     Moveto_d_7F    =   F2FC 
    Moveto_ix      =   F310     |     Moveto_ix_7F   =   F30C 
    Moveto_ix_FF   =   F308     |     Moveto_ix_b    =   F30E 
    Moveto_x_7F    =   F2F2     |     New_High_Score =   F8D8 
    Obj_Hit        =   F8FF     |     Obj_Will_Hit   =   F8F3 
    Obj_Will_Hit_u =   F8E5     |     Print_List     =   F38A 
    Print_List_chk =   F38C     |     Print_List_hw  =   F385 
    Print_Ships    =   F393     |     Print_Ships_x  =   F391 
    Print_Str      =   F495     |     Print_Str_d    =   F37A 
    Print_Str_hwyx =   F373     |     Print_Str_yx   =   F378 
    Random         =   F517     |     Random_3       =   F511 
    Read_Btns      =   F1BA     |     Read_Btns_Mask =   F1B4 
    Recalibrate    =   F2E6     |     Reset0Int      =   F36B 
    Reset0Ref      =   F354     |     Reset0Ref_D0   =   F34A 
    Reset_Pen      =   F35B     |     Rise_Run_Angle =   F593 
    Rise_Run_Len   =   F603     |     Rise_Run_X     =   F5FF 
    Rise_Run_Y     =   F601     |     Rot_VL         =   F616 
    Rot_VL_M_dft   =   F62B     |     Rot_VL_Mode    =   F61F 
    Rot_VL_ab      =   F610     |     Select_Game    =   F7A9 
    Set_Refresh    =   F1A2     |     Sound_Byte     =   F256 
    Sound_Byte_raw =   F25B     |     Sound_Byte_x   =   F259 
    Sound_Bytes    =   F27D     |     Sound_Bytes_x  =   F284 
    Strip_Zeros    =   F8B7     |     TEST_0_0_0     =   0001 
    TEST_0_0_1     =   0080     |     TEST_0_1_0     =   0020 
    TEST_0_1_1     =   0040     |     TEST_0_N_1     =   0004 
    TEST_1_0_0     =   0002     |     TEST_1_0_1     =   0008 
    TEST_1_1_0     =   0004     |     TEST_1_1_1     =   0010 
    TEST_1_1_N     =   0020     |     TEST_1_N_1     =   0010 
    TEST_N_0_1     =   0002     |     TEST_N_1_0     =   0001 
    TEST_N_1_1     =   0008     |     VIA_DDR_a      =   D003 
    VIA_DDR_b      =   D002     |     VIA_aux_cntl   =   D00B 
    VIA_cntl       =   D00C     |     VIA_int_enable =   D00E 
    VIA_int_flags  =   D00D     |     VIA_port_a     =   D001 
    VIA_port_a_noh =   D00F     |     VIA_port_b     =   D000 
    VIA_shift_reg  =   D00A     |     VIA_t1_cnt_hi  =   D005 
    VIA_t1_cnt_lo  =   D004     |     VIA_t1_lch_hi  =   D007 
    VIA_t1_lch_lo  =   D006     |     VIA_t2_hi      =   D009 
    VIA_t2_lo      =   D008     |     Vec_0Ref_Enabl =   C824 
    Vec_ADSR_Table =   C84F     |     Vec_ADSR_Timer =   C85E 
    Vec_Angle      =   C836     |     Vec_Brightness =   C827 
    Vec_Btn_State  =   C80F     |     Vec_Button_1_1 =   C812 
    Vec_Button_1_2 =   C813     |     Vec_Button_1_3 =   C814 
    Vec_Button_1_4 =   C815     |     Vec_Button_2_1 =   C816 
    Vec_Button_2_2 =   C817     |     Vec_Button_2_3 =   C818 
    Vec_Button_2_4 =   C819     |     Vec_Buttons    =   C811 
    Vec_Cold_Flag  =   CBFE     |     Vec_Counter_1  =   C82E 
    Vec_Counter_2  =   C82F     |     Vec_Counter_3  =   C830 
    Vec_Counter_4  =   C831     |     Vec_Counter_5  =   C832 
    Vec_Counter_6  =   C833     |     Vec_Counters   =   C82E 
    Vec_Default_St =   CBEA     |     Vec_Dot_Dwell  =   C828 
    Vec_Duration   =   C857     |     Vec_Expl_1     =   C858 
    Vec_Expl_2     =   C859     |     Vec_Expl_3     =   C85A 
    Vec_Expl_4     =   C85B     |     Vec_Expl_Chan  =   C85C 
    Vec_Expl_ChanA =   C853     |     Vec_Expl_ChanB =   C85D 
    Vec_Expl_Chans =   C854     |     Vec_Expl_Flag  =   C867 
    Vec_Expl_Timer =   C877     |     Vec_FIRQ_Vecto =   CBF5 
    Vec_Freq_Table =   C84D     |     Vec_High_Score =   CBEB 
    Vec_IRQ_Vector =   CBF8     |     Vec_Joy_1_X    =   C81B 
    Vec_Joy_1_Y    =   C81C     |     Vec_Joy_2_X    =   C81D 
    Vec_Joy_2_Y    =   C81E     |     Vec_Joy_Mux    =   C81F 
    Vec_Joy_Mux_1_ =   C81F     |     Vec_Joy_Mux_1_ =   C820 
    Vec_Joy_Mux_2_ =   C821     |     Vec_Joy_Mux_2_ =   C822 
    Vec_Joy_Resltn =   C81A     |     Vec_Loop_Count =   C825 
    Vec_Max_Games  =   C850     |     Vec_Max_Player =   C84F 
    Vec_Misc_Count =   C823     |     Vec_Music_Chan =   C855 
    Vec_Music_Flag =   C856     |     Vec_Music_Freq =   C861 
    Vec_Music_Ptr  =   C853     |     Vec_Music_Twan =   C858 
    Vec_Music_Wk_1 =   C84B     |     Vec_Music_Wk_5 =   C847 
    Vec_Music_Wk_6 =   C846     |     Vec_Music_Wk_7 =   C845 
    Vec_Music_Wk_A =   C842     |     Vec_Music_Work =   C83F 
    Vec_NMI_Vector =   CBFB     |     Vec_Num_Game   =   C87A 
    Vec_Num_Player =   C879     |     Vec_Pattern    =   C829 
    Vec_Prev_Btns  =   C810     |     Vec_Random_See =   C87D 
    Vec_Rfrsh      =   C83D     |     Vec_Rfrsh_hi   =   C83E 
    Vec_Rfrsh_lo   =   C83D     |     Vec_RiseRun_Le =   C83B 
    Vec_RiseRun_Tm =   C834     |     Vec_Rise_Index =   C839 
    Vec_Run_Index  =   C837     |     Vec_SWI2_Vecto =   CBF2 
    Vec_SWI3_Vecto =   CBF2     |     Vec_SWI_Vector =   CBFB 
    Vec_Seed_Ptr   =   C87B     |     Vec_Snd_Shadow =   C800 
    Vec_Str_Ptr    =   C82C     |     Vec_Text_HW    =   C82A 
    Vec_Text_Heigh =   C82A     |     Vec_Text_Width =   C82B 
    Vec_Twang_Tabl =   C851     |     Wait_Recal     =   F192 
    Warm_Start     =   F06C     |     Xform_Rise     =   F663 
    Xform_Rise_a   =   F661     |     Xform_Run      =   F65D 
    Xform_Run_a    =   F65B     |   3 _000x          =   000E R
  3 _000xi         =   0038 R   |   3 _000y          =   000F R
  3 _000yi         =   0039 R   |   3 _000z          =   0010 R
  3 _000zi         =   003A R   |   3 _001x          =   0023 R
  3 _001xi         =   004D R   |   3 _001y          =   0024 R
  3 _001yi         =   004E R   |   3 _001z          =   0025 R
  3 _001zi         =   004F R   |   3 _010x          =   001D R
  3 _010xi         =   0047 R   |   3 _010y          =   001E R
  3 _010yi         =   0048 R   |   3 _010z          =   001F R
  3 _010zi         =   0049 R   |   3 _011x          =   0020 R
  3 _011xi         =   004A R   |   3 _011y          =   0021 R
  3 _011yi         =   004B R   |   3 _011z          =   0022 R
  3 _011zi         =   004C R   |   3 _0N1x          =   002C R
  3 _0N1xi         =   0056 R   |   3 _0N1y          =   002D R
  3 _0N1yi         =   0057 R   |   3 _0N1z          =   002E R
  3 _0N1zi         =   0058 R   |   3 _0_0_0         =   000E R
  3 _0_0_1         =   0023 R   |   3 _0_0_N         =   004D R
  3 _0_1_0         =   001D R   |   3 _0_1_1         =   0020 R
  3 _0_1_N         =   0056 R   |   3 _0_N_0         =   0047 R
  3 _0_N_1         =   002C R   |   3 _0_N_N         =   004A R
  3 _100x          =   0011 R   |   3 _100xi         =   003B R
  3 _100y          =   0012 R   |   3 _100yi         =   003C R
  3 _100z          =   0013 R   |   3 _100zi         =   003D R
  3 _101x          =   0017 R   |   3 _101xi         =   0041 R
  3 _101y          =   0018 R   |   3 _101yi         =   0042 R
  3 _101z          =   0019 R   |   3 _101zi         =   0043 R
  3 _110x          =   0014 R   |   3 _110xi         =   003E R
  3 _110y          =   0015 R   |   3 _110yi         =   003F R
  3 _110z          =   0016 R   |   3 _110zi         =   0040 R
  3 _111x          =   001A R   |   3 _111xi         =   0044 R
  3 _111y          =   001B R   |   3 _111yi         =   0045 R
  3 _111z          =   001C R   |   3 _111zi         =   0046 R
  3 _11Nx          =   0035 R   |   3 _11Nxi         =   005F R
  3 _11Ny          =   0036 R   |   3 _11Nyi         =   0060 R
  3 _11Nz          =   0037 R   |   3 _11Nzi         =   0061 R
  3 _1N1x          =   0032 R   |   3 _1N1xi         =   005C R
  3 _1N1y          =   0033 R   |   3 _1N1yi         =   005D R
  3 _1N1z          =   0034 R   |   3 _1N1zi         =   005E R
  3 _1_0_0         =   0011 R   |   3 _1_0_1         =   0017 R
  3 _1_0_N         =   0053 R   |   3 _1_1_0         =   0014 R
  3 _1_1_1         =   001A R   |   3 _1_1_N         =   0035 R
  3 _1_N_0         =   0050 R   |   3 _1_N_1         =   0032 R
  3 _1_N_N         =   0059 R   |   3 _N01x          =   0029 R
  3 _N01xi         =   0053 R   |   3 _N01y          =   002A R
  3 _N01yi         =   0054 R   |   3 _N01z          =   002B R
  3 _N01zi         =   0055 R   |   3 _N10x          =   0026 R
  3 _N10xi         =   0050 R   |   3 _N10y          =   0027 R
  3 _N10yi         =   0051 R   |   3 _N10z          =   0028 R
  3 _N10zi         =   0052 R   |   3 _N11x          =   002F R
  3 _N11xi         =   0059 R   |   3 _N11y          =   0030 R
  3 _N11yi         =   005A R   |   3 _N11z          =   0031 R
  3 _N11zi         =   005B R   |   3 _N_0_0         =   003B R
  3 _N_0_1         =   0029 R   |   3 _N_0_N         =   0041 R
  3 _N_1_0         =   0026 R   |   3 _N_1_1         =   002F R
  3 _N_1_N         =   005C R   |   3 _N_N_0         =   003E R
  3 _N_N_1         =   005F R   |   3 _N_N_N         =   0044 R
  3 _allDirs_calc      000E GR  |   3 _angle_x           0007 GR
  3 _angle_y           0008 GR  |   3 _angle_z           0009 GR
  2 _cosinus3d         00A9 GR  |   3 _cosx              0001 GR
  3 _cosy              0003 GR  |   3 _cosz              0005 GR
  3 _helper            0000 GR  |   3 _scale_3d          000C GR
  3 _scale_3d_move     000D GR  |   2 _sinus3d           00E9 GR
  3 _sinx              0002 GR  |   3 _siny              0004 GR
  3 _sinz              0006 GR  |   3 _start_letter_     005F GR
  3 _vectorBits        000A GR  |   2 asm_draw_3d        0041 GR
  2 asm_draw_3d_dp     007A GR  |   2 asm_draw_3ds       0000 GR
  2 end                0071 GR  |   2 end1               006E GR
  2 end1_dp            009F GR  |   2 end1s              0035 GR
  2 end_dp             00A2 GR  |   2 ends               0038 GR
  2 init_2d            0129 GR  |   2 init_all           03F6 GR
  2 mul_An_Bn101       0614 GR  |   2 mul_An_Bn108       0664 GR
  2 mul_An_Bn110       0687 GR  |   2 mul_An_Bn112       06A7 GR
  2 mul_An_Bn116       06CE GR  |   2 mul_An_Bn118       06EE GR
  2 mul_An_Bn125       0729 GR  |   2 mul_An_Bn127       0749 GR
  2 mul_An_Bn129       0769 GR  |   2 mul_An_Bn134       0791 GR
  2 mul_An_Bn136       07B1 GR  |   2 mul_An_Bn14        01F3 GR
  2 mul_An_Bn142       0800 GR  |   2 mul_An_Bn144       0820 GR
  2 mul_An_Bn146       0840 GR  |   2 mul_An_Bn150       0867 GR
  2 mul_An_Bn152       0887 GR  |   2 mul_An_Bn159       08C2 GR
  2 mul_An_Bn16        0213 GR  |   2 mul_An_Bn161       08E2 GR
  2 mul_An_Bn163       0902 GR  |   2 mul_An_Bn167       0929 GR
  2 mul_An_Bn169       0949 GR  |   2 mul_An_Bn176       098B GR
  2 mul_An_Bn178       09AE GR  |   2 mul_An_Bn180       09CE GR
  2 mul_An_Bn184       09F5 GR  |   2 mul_An_Bn186       0A15 GR
  2 mul_An_Bn193       0A50 GR  |   2 mul_An_Bn195       0A73 GR
  2 mul_An_Bn197       0A93 GR  |   2 mul_An_Bn201       0ABA GR
  2 mul_An_Bn203       0ADA GR  |   2 mul_An_Bn210       0B2A GR
  2 mul_An_Bn212       0B4A GR  |   2 mul_An_Bn214       0B6A GR
  2 mul_An_Bn218       0B91 GR  |   2 mul_An_Bn22        0241 GR
  2 mul_An_Bn220       0BB1 GR  |   2 mul_An_Bn227       0C01 GR
  2 mul_An_Bn229       0C24 GR  |   2 mul_An_Bn231       0C44 GR
  2 mul_An_Bn235       0C6B GR  |   2 mul_An_Bn237       0C8B GR
  2 mul_An_Bn244       0CDB GR  |   2 mul_An_Bn246       0CFE GR
  2 mul_An_Bn248       0D1E GR  |   2 mul_An_Bn25        0265 GR
  2 mul_An_Bn252       0D45 GR  |   2 mul_An_Bn254       0D65 GR
  2 mul_An_Bn261       0DB6 GR  |   2 mul_An_Bn263       0DD9 GR
  2 mul_An_Bn265       0DF9 GR  |   2 mul_An_Bn269       0E20 GR
  2 mul_An_Bn271       0E40 GR  |   2 mul_An_Bn30        0299 GR
  2 mul_An_Bn32        02BC GR  |   2 mul_An_Bn34        02DC GR
  2 mul_An_Bn38        0303 GR  |   2 mul_An_Bn40        0323 GR
  2 mul_An_Bn47        035B GR  |   2 mul_An_Bn49        037E GR
  2 mul_An_Bn5         018B GR  |   2 mul_An_Bn51        039E GR
  2 mul_An_Bn55        03C5 GR  |   2 mul_An_Bn57        03E5 GR
  2 mul_An_Bn66        0463 GR  |   2 mul_An_Bn69        0487 GR
  2 mul_An_Bn7         01AB GR  |   2 mul_An_Bn74        04C5 GR
  2 mul_An_Bn76        04E8 GR  |   2 mul_An_Bn78        0508 GR
  2 mul_An_Bn82        052F GR  |   2 mul_An_Bn84        054F GR
  2 mul_An_Bn9         01CB GR  |   2 mul_An_Bn91        058A GR
  2 mul_An_Bn93        05AD GR  |   2 mul_An_Bn95        05CD GR
  2 mul_An_Bn99        05F4 GR  |   2 mul_An_Bp101       060F GR
  2 mul_An_Bp108       065F GR  |   2 mul_An_Bp110       0682 GR
  2 mul_An_Bp112       06A2 GR  |   2 mul_An_Bp116       06C9 GR
  2 mul_An_Bp118       06E9 GR  |   2 mul_An_Bp125       0724 GR
  2 mul_An_Bp127       0744 GR  |   2 mul_An_Bp129       0764 GR
  2 mul_An_Bp134       078C GR  |   2 mul_An_Bp136       07AC GR
  2 mul_An_Bp14        01EE GR  |   2 mul_An_Bp142       07FB GR
  2 mul_An_Bp144       081B GR  |   2 mul_An_Bp146       083B GR
  2 mul_An_Bp150       0862 GR  |   2 mul_An_Bp152       0882 GR
  2 mul_An_Bp159       08BD GR  |   2 mul_An_Bp16        020E GR
  2 mul_An_Bp161       08DD GR  |   2 mul_An_Bp163       08FD GR
  2 mul_An_Bp167       0924 GR  |   2 mul_An_Bp169       0944 GR
  2 mul_An_Bp176       0986 GR  |   2 mul_An_Bp178       09A9 GR
  2 mul_An_Bp180       09C9 GR  |   2 mul_An_Bp184       09F0 GR
  2 mul_An_Bp186       0A10 GR  |   2 mul_An_Bp193       0A4B GR
  2 mul_An_Bp195       0A6E GR  |   2 mul_An_Bp197       0A8E GR
  2 mul_An_Bp201       0AB5 GR  |   2 mul_An_Bp203       0AD5 GR
  2 mul_An_Bp210       0B25 GR  |   2 mul_An_Bp212       0B45 GR
  2 mul_An_Bp214       0B65 GR  |   2 mul_An_Bp218       0B8C GR
  2 mul_An_Bp22        023C GR  |   2 mul_An_Bp220       0BAC GR
  2 mul_An_Bp227       0BFC GR  |   2 mul_An_Bp229       0C1F GR
  2 mul_An_Bp231       0C3F GR  |   2 mul_An_Bp235       0C66 GR
  2 mul_An_Bp237       0C86 GR  |   2 mul_An_Bp244       0CD6 GR
  2 mul_An_Bp246       0CF9 GR  |   2 mul_An_Bp248       0D19 GR
  2 mul_An_Bp25        0260 GR  |   2 mul_An_Bp252       0D40 GR
  2 mul_An_Bp254       0D60 GR  |   2 mul_An_Bp261       0DB1 GR
  2 mul_An_Bp263       0DD4 GR  |   2 mul_An_Bp265       0DF4 GR
  2 mul_An_Bp269       0E1B GR  |   2 mul_An_Bp271       0E3B GR
  2 mul_An_Bp30        0294 GR  |   2 mul_An_Bp32        02B7 GR
  2 mul_An_Bp34        02D7 GR  |   2 mul_An_Bp38        02FE GR
  2 mul_An_Bp40        031E GR  |   2 mul_An_Bp47        0356 GR
  2 mul_An_Bp49        0379 GR  |   2 mul_An_Bp5         0186 GR
  2 mul_An_Bp51        0399 GR  |   2 mul_An_Bp55        03C0 GR
  2 mul_An_Bp57        03E0 GR  |   2 mul_An_Bp66        045E GR
  2 mul_An_Bp69        0482 GR  |   2 mul_An_Bp7         01A6 GR
  2 mul_An_Bp74        04C0 GR  |   2 mul_An_Bp76        04E3 GR
  2 mul_An_Bp78        0503 GR  |   2 mul_An_Bp82        052A GR
  2 mul_An_Bp84        054A GR  |   2 mul_An_Bp9         01C6 GR
  2 mul_An_Bp91        0585 GR  |   2 mul_An_Bp93        05A8 GR
  2 mul_An_Bp95        05C8 GR  |   2 mul_An_Bp99        05EF GR
  2 mul_Ap101          060B GR  |   2 mul_Ap108          065B GR
  2 mul_Ap110          067E GR  |   2 mul_Ap112          069E GR
  2 mul_Ap116          06C5 GR  |   2 mul_Ap118          06E5 GR
  2 mul_Ap125          0720 GR  |   2 mul_Ap127          0740 GR
  2 mul_Ap129          0760 GR  |   2 mul_Ap134          0788 GR
  2 mul_Ap136          07A8 GR  |   2 mul_Ap14           01EA GR
  2 mul_Ap142          07F7 GR  |   2 mul_Ap144          0817 GR
  2 mul_Ap146          0837 GR  |   2 mul_Ap150          085E GR
  2 mul_Ap152          087E GR  |   2 mul_Ap159          08B9 GR
  2 mul_Ap16           020A GR  |   2 mul_Ap161          08D9 GR
  2 mul_Ap163          08F9 GR  |   2 mul_Ap167          0920 GR
  2 mul_Ap169          0940 GR  |   2 mul_Ap176          0982 GR
  2 mul_Ap178          09A5 GR  |   2 mul_Ap180          09C5 GR
  2 mul_Ap184          09EC GR  |   2 mul_Ap186          0A0C GR
  2 mul_Ap193          0A47 GR  |   2 mul_Ap195          0A6A GR
  2 mul_Ap197          0A8A GR  |   2 mul_Ap201          0AB1 GR
  2 mul_Ap203          0AD1 GR  |   2 mul_Ap210          0B21 GR
  2 mul_Ap212          0B41 GR  |   2 mul_Ap214          0B61 GR
  2 mul_Ap218          0B88 GR  |   2 mul_Ap22           0238 GR
  2 mul_Ap220          0BA8 GR  |   2 mul_Ap227          0BF8 GR
  2 mul_Ap229          0C1B GR  |   2 mul_Ap231          0C3B GR
  2 mul_Ap235          0C62 GR  |   2 mul_Ap237          0C82 GR
  2 mul_Ap244          0CD2 GR  |   2 mul_Ap246          0CF5 GR
  2 mul_Ap248          0D15 GR  |   2 mul_Ap25           025C GR
  2 mul_Ap252          0D3C GR  |   2 mul_Ap254          0D5C GR
  2 mul_Ap261          0DAD GR  |   2 mul_Ap263          0DD0 GR
  2 mul_Ap265          0DF0 GR  |   2 mul_Ap269          0E17 GR
  2 mul_Ap271          0E37 GR  |   2 mul_Ap30           0290 GR
  2 mul_Ap32           02B3 GR  |   2 mul_Ap34           02D3 GR
  2 mul_Ap38           02FA GR  |   2 mul_Ap40           031A GR
  2 mul_Ap47           0352 GR  |   2 mul_Ap49           0375 GR
  2 mul_Ap5            0182 GR  |   2 mul_Ap51           0395 GR
  2 mul_Ap55           03BC GR  |   2 mul_Ap57           03DC GR
  2 mul_Ap66           045A GR  |   2 mul_Ap69           047E GR
  2 mul_Ap7            01A2 GR  |   2 mul_Ap74           04BC GR
  2 mul_Ap76           04DF GR  |   2 mul_Ap78           04FF GR
  2 mul_Ap82           0526 GR  |   2 mul_Ap84           0546 GR
  2 mul_Ap9            01C2 GR  |   2 mul_Ap91           0581 GR
  2 mul_Ap93           05A4 GR  |   2 mul_Ap95           05C4 GR
  2 mul_Ap99           05EB GR  |   2 mul_Ap_Bp101       0614 GR
  2 mul_Ap_Bp108       0664 GR  |   2 mul_Ap_Bp110       0687 GR
  2 mul_Ap_Bp112       06A7 GR  |   2 mul_Ap_Bp116       06CE GR
  2 mul_Ap_Bp118       06EE GR  |   2 mul_Ap_Bp125       0729 GR
  2 mul_Ap_Bp127       0749 GR  |   2 mul_Ap_Bp129       0769 GR
  2 mul_Ap_Bp134       0791 GR  |   2 mul_Ap_Bp136       07B1 GR
  2 mul_Ap_Bp14        01F3 GR  |   2 mul_Ap_Bp142       0800 GR
  2 mul_Ap_Bp144       0820 GR  |   2 mul_Ap_Bp146       0840 GR
  2 mul_Ap_Bp150       0867 GR  |   2 mul_Ap_Bp152       0887 GR
  2 mul_Ap_Bp159       08C2 GR  |   2 mul_Ap_Bp16        0213 GR
  2 mul_Ap_Bp161       08E2 GR  |   2 mul_Ap_Bp163       0902 GR
  2 mul_Ap_Bp167       0929 GR  |   2 mul_Ap_Bp169       0949 GR
  2 mul_Ap_Bp176       098B GR  |   2 mul_Ap_Bp178       09AE GR
  2 mul_Ap_Bp180       09CE GR  |   2 mul_Ap_Bp184       09F5 GR
  2 mul_Ap_Bp186       0A15 GR  |   2 mul_Ap_Bp193       0A50 GR
  2 mul_Ap_Bp195       0A73 GR  |   2 mul_Ap_Bp197       0A93 GR
  2 mul_Ap_Bp201       0ABA GR  |   2 mul_Ap_Bp203       0ADA GR
  2 mul_Ap_Bp210       0B2A GR  |   2 mul_Ap_Bp212       0B4A GR
  2 mul_Ap_Bp214       0B6A GR  |   2 mul_Ap_Bp218       0B91 GR
  2 mul_Ap_Bp22        0241 GR  |   2 mul_Ap_Bp220       0BB1 GR
  2 mul_Ap_Bp227       0C01 GR  |   2 mul_Ap_Bp229       0C24 GR
  2 mul_Ap_Bp231       0C44 GR  |   2 mul_Ap_Bp235       0C6B GR
  2 mul_Ap_Bp237       0C8B GR  |   2 mul_Ap_Bp244       0CDB GR
  2 mul_Ap_Bp246       0CFE GR  |   2 mul_Ap_Bp248       0D1E GR
  2 mul_Ap_Bp25        0265 GR  |   2 mul_Ap_Bp252       0D45 GR
  2 mul_Ap_Bp254       0D65 GR  |   2 mul_Ap_Bp261       0DB6 GR
  2 mul_Ap_Bp263       0DD9 GR  |   2 mul_Ap_Bp265       0DF9 GR
  2 mul_Ap_Bp269       0E20 GR  |   2 mul_Ap_Bp271       0E40 GR
  2 mul_Ap_Bp30        0299 GR  |   2 mul_Ap_Bp32        02BC GR
  2 mul_Ap_Bp34        02DC GR  |   2 mul_Ap_Bp38        0303 GR
  2 mul_Ap_Bp40        0323 GR  |   2 mul_Ap_Bp47        035B GR
  2 mul_Ap_Bp49        037E GR  |   2 mul_Ap_Bp5         018B GR
  2 mul_Ap_Bp51        039E GR  |   2 mul_Ap_Bp55        03C5 GR
  2 mul_Ap_Bp57        03E5 GR  |   2 mul_Ap_Bp66        0463 GR
  2 mul_Ap_Bp69        0487 GR  |   2 mul_Ap_Bp7         01AB GR
  2 mul_Ap_Bp74        04C5 GR  |   2 mul_Ap_Bp76        04E8 GR
  2 mul_Ap_Bp78        0508 GR  |   2 mul_Ap_Bp82        052F GR
  2 mul_Ap_Bp84        054F GR  |   2 mul_Ap_Bp9         01CB GR
  2 mul_Ap_Bp91        058A GR  |   2 mul_Ap_Bp93        05AD GR
  2 mul_Ap_Bp95        05CD GR  |   2 mul_Ap_Bp99        05F4 GR
  2 mul_end101         0615 GR  |   2 mul_end108         0665 GR
  2 mul_end110         0688 GR  |   2 mul_end112         06A8 GR
  2 mul_end116         06CF GR  |   2 mul_end118         06EF GR
  2 mul_end125         072A GR  |   2 mul_end127         074A GR
  2 mul_end129         076A GR  |   2 mul_end134         0792 GR
  2 mul_end136         07B2 GR  |   2 mul_end14          01F4 GR
  2 mul_end142         0801 GR  |   2 mul_end144         0821 GR
  2 mul_end146         0841 GR  |   2 mul_end150         0868 GR
  2 mul_end152         0888 GR  |   2 mul_end159         08C3 GR
  2 mul_end16          0214 GR  |   2 mul_end161         08E3 GR
  2 mul_end163         0903 GR  |   2 mul_end167         092A GR
  2 mul_end169         094A GR  |   2 mul_end176         098C GR
  2 mul_end178         09AF GR  |   2 mul_end180         09CF GR
  2 mul_end184         09F6 GR  |   2 mul_end186         0A16 GR
  2 mul_end193         0A51 GR  |   2 mul_end195         0A74 GR
  2 mul_end197         0A94 GR  |   2 mul_end201         0ABB GR
  2 mul_end203         0ADB GR  |   2 mul_end210         0B2B GR
  2 mul_end212         0B4B GR  |   2 mul_end214         0B6B GR
  2 mul_end218         0B92 GR  |   2 mul_end22          0242 GR
  2 mul_end220         0BB2 GR  |   2 mul_end227         0C02 GR
  2 mul_end229         0C25 GR  |   2 mul_end231         0C45 GR
  2 mul_end235         0C6C GR  |   2 mul_end237         0C8C GR
  2 mul_end244         0CDC GR  |   2 mul_end246         0CFF GR
  2 mul_end248         0D1F GR  |   2 mul_end25          0266 GR
  2 mul_end252         0D46 GR  |   2 mul_end254         0D66 GR
  2 mul_end261         0DB7 GR  |   2 mul_end263         0DDA GR
  2 mul_end265         0DFA GR  |   2 mul_end269         0E21 GR
  2 mul_end271         0E41 GR  |   2 mul_end30          029A GR
  2 mul_end32          02BD GR  |   2 mul_end34          02DD GR
  2 mul_end38          0304 GR  |   2 mul_end40          0324 GR
  2 mul_end47          035C GR  |   2 mul_end49          037F GR
  2 mul_end5           018C GR  |   2 mul_end51          039F GR
  2 mul_end55          03C6 GR  |   2 mul_end57          03E6 GR
  2 mul_end66          0464 GR  |   2 mul_end69          0488 GR
  2 mul_end7           01AC GR  |   2 mul_end74          04C6 GR
  2 mul_end76          04E9 GR  |   2 mul_end78          0509 GR
  2 mul_end82          0530 GR  |   2 mul_end84          0550 GR
  2 mul_end9           01CC GR  |   2 mul_end91          058B GR
  2 mul_end93          05AE GR  |   2 mul_end95          05CE GR
  2 mul_end99          05F5 GR  |     music1         =   FD0D 
    music2         =   FD1D     |     music3         =   FD81 
    music4         =   FDD3     |     music5         =   FE38 
    music6         =   FE76     |     music7         =   FEC6 
    music8         =   FEF8     |     music9         =   FF26 
    musica         =   FF44     |     musicb         =   FF62 
    musicc         =   FF7A     |     musicd         =   FF8F 
  2 no000              0440 GR  |   2 no0002d            016D GR
  2 no001              0959 GR  |   2 no010              07C3 GR
  2 no0102d            0225 GR  |   2 no011              089A GR
  2 no0N1              0BC4 GR  |   2 no100              0496 GR
  2 no1002d            0274 GR  |   2 no101              0627 GR
  2 no110              0562 GR  |   2 no1102d            0333 GR
  2 no111              0701 GR  |   2 no11N              0E50 GR
  2 no1N1              0D78 GR  |   2 noN01              0AED GR
  2 noN10              0A28 GR  |   2 noN102d            03F5 GR
  2 noN11              0C9E GR  |   2 start              0043 GR
  2 start_dp           007C GR  |   2 starts             0004 GR
  2 wait               0064 GR  |   2 wait_dp            0097 GR
  2 waits              0029 GR

ASxxxx Assembler V05.00  (Motorola 6809), page 2.
Hexidecimal [16-Bits]

Area Table

[_CSEG]
   0 _CODE            size    0   flags C080
   2 .text            size  E51   flags  100
   3 .bss             size   5F   flags    0
[_DSEG]
   1 _DATA            size    0   flags C0C0

