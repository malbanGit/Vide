                              1  .module printSyncList.s
                              2  .area .text
                              3                     .setdp   0xd000,_DATA
                              4 
                              5 ;***************************************************************************
                              6 ; DEFINE SECTION
                              7 ;***************************************************************************
                              8 ; load vectrex bios routine definitions
                     FD0D     9 music1              =      0xFD0D
                     D000    10 VIA_port_b          =      0xD000                        ;VIA port B data I/O register
                     D001    11 VIA_port_a          =      0xD001                        ;VIA port A data I/O register (handshaking)
                     D004    12 VIA_t1_cnt_lo       =      0xD004                        ;VIA timer 1 count register lo (scale factor)
                     D005    13 VIA_t1_cnt_hi       =      0xD005                        ;VIA timer 1 count register hi
                     D00A    14 VIA_shift_reg       =      0xD00A                        ;VIA shift register
                     D00C    15 VIA_cntl            =      0xD00C                        ;VIA control register
                     D00D    16 VIA_int_flags       =      0xD00D                        ;VIA interrupt flags register
                     F2A5    17 Intensity_5F        =      0xF2A5                        ;
                     F192    18 Wait_Recal          =      0xF192                        ;
                     F3AD    19 Mov_Draw_VLc_a      =      0xF3AD                        ;count y x y x ...
                     F312    20 Moveto_d            =      0xF312                        ;
                             21 ; SUBROUTINE SECTION
                             22 ;***************************************************************************
                             23 ;ZERO ing the integrators takes time. Measures at my vectrex show e.g.:
                             24 ;If you move the beam with a to x = -127 and y = -127 at diffferent scale values, the time to reach zero:
                             25 ;- scale 0xff -> zero 110 cycles
                             26 ;- scale 0x7f -> zero 75 cycles
                             27 ;- scale 0x40 -> zero 57 cycles
                             28 ;- scale 0x20 -> zero 53 cycles
                     0003    29 ZERO_DELAY          =      3                            ; delay 7 counter is exactly 111 cycles delay between zero SETTING and zero unsetting (in moveto_d)
                             30 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             31 ;U = address of vectorlist
                             32 ;X = (y,x) position of vectorlist (this will be point 0,0), positioning on screen
                             33 ;A = scalefactor "Move" (after sync)
                             34 ;B = scalefactor "Vector" (vectors in vectorlist)
                             35 ;
                             36 ;     mode, rel y, rel x,
                             37 ;     mode, rel y, rel x,
                             38 ;     .      .      .
                             39 ;     .      .      .
                             40 ;     mode, rel y, rel x,
                             41 ;     0x02
                             42 ; where mode has the following meaning:
                             43 ; negative draw line
                             44 ; 0 move to specified endpoint
                             45 ; 1 sync (and move to list start and than to place in vectorlist)
                             46 ; 2 end
                             47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             48  .globl draw_synced_list
   0000                      49 draw_synced_list:
   0000 34 02         [ 6]   50                     pshs     a                            ; remember out different scale factors
   0002 34 04         [ 6]   51                     pshs     b
                             52                                                           ; first list entry (first will be a sync + moveto_d, so we just stay here!)
   0004 A6 C0         [ 6]   53                     lda      ,u+                          ; this will be a "1"
                             54  .globl sync
   0006                      55 sync:
   0006 4A            [ 2]   56                     deca                                  ; test if real sync - or end of list (2)
   0007 26 58         [ 3]   57                     bne      drawdone                     ; if end of list -> jump
                             58 ; zero integrators
   0009 C6 CC         [ 2]   59                     ldb      #0xCC                         ; zero the integrators
   000B D7 0C         [ 4]   60                     stb      *VIA_cntl                    ; store zeroing values to cntl
   000D C6 03         [ 2]   61                     ldb      #ZERO_DELAY                  ; and wait for zeroing to be actually done
                             62 ; reset integrators
   000F 0F 01         [ 6]   63                     clr      *VIA_port_a                  ; reset integrator offset
   0011 86 82         [ 2]   64                     lda      #0b10000010
                             65 ; wait that zeroing surely has the desired effect!
                             66  .globl zeroLoop
   0013                      67 zeroLoop:
   0013 97 00         [ 4]   68                     sta      *VIA_port_b                  ; while waiting, zero offsets
   0015 5A            [ 2]   69                     decb
   0016 26 FB         [ 3]   70                     bne      zeroLoop
   0018 0C 00         [ 6]   71                     inc      *VIA_port_b
                             72 ; unzero is done by moveto_d
   001A A6 61         [ 5]   73                     lda      1,s                          ; scalefactor move
   001C 97 04         [ 4]   74                     sta      *VIA_t1_cnt_lo               ; to timer t1 (lo=
   001E 1F 10         [ 6]   75                     tfr      x,d                          ; load our coordinates of "entry" of vectorlist
                             76 ; macro call ->                     MY_MOVE_TO_D_START                    ; move there
   0020 97 01         [ 4]   77                     STA      *VIA_port_a                  ;Store Y in D/A register
   0022 86 CE         [ 2]   78                     LDA      #0xCE                         ;Blank low, zero high?
   0024 97 0C         [ 4]   79                     STA      *VIA_cntl                    ;
   0026 4F            [ 2]   80                     CLRA
   0027 97 00         [ 4]   81                     STA      *VIA_port_b                  ;Enable mux ; hey dis si "break integratorzero 440"
   0029 12            [ 2]   82  nop ; y must be set more than xx cycles on some vectrex
   002A 0C 00         [ 6]   83                     INC      *VIA_port_b                  ;Disable mux
   002C D7 01         [ 4]   84                     STB      *VIA_port_a                  ;Store X in D/A register
   002E 97 05         [ 4]   85                     STA      *VIA_t1_cnt_hi               ;enable timer
   0030 A6 E4         [ 4]   86                     lda      ,s                           ; scale factor vector
   0032 97 04         [ 4]   87                     sta      *VIA_t1_cnt_lo               ; to timer T1 (lo)
                             88 ; macro call ->                     MY_MOVE_TO_B_END
   0034 C6 40         [ 2]   89                     LDB      #0x40                         ;
                             90  .globl LF33D22
   0036 D5 0D         [ 4]   91 LF33D22:            BITB     *VIA_int_flags               ;
   0038 27 FC         [ 3]   92                     BEQ      LF33D22                      ;
                             93  .globl moveTo
   003A                      94 moveTo:
   003A EC C1         [ 8]   95                     ldd      ,u++                         ; do our "internal" moveto d
   003C 27 03         [ 3]   96                     beq      nextListEntry                ; there was a move 0,0, if so
   003E BD F3 12      [ 8]   97                     jsr      Moveto_d
                             98  .globl nextListEntry
   0041                      99 nextListEntry:
   0041 A6 C0         [ 6]  100                     lda      ,u+                          ; load next "mode" byte
   0043 27 F5         [ 3]  101                     beq      moveTo                       ; if 0, than we should move somewhere
   0045 2A BF         [ 3]  102                     bpl      sync                         ; if still positive it is a 1 pr 2 _> goto sync
                            103 ; now we should draw a vector
   0047 EC C1         [ 8]  104                     ldd      ,u++                         ;Get next coordinate pair
   0049 97 01         [ 4]  105                     STA      *VIA_port_a                  ;Send Y to A/D
   004B 0F 00         [ 6]  106                     CLR      *VIA_port_b                  ;Enable mux
   004D 86 FF         [ 2]  107                     LDA      #0xff                         ;Get pattern byte
   004F 0C 00         [ 6]  108                     INC      *VIA_port_b                  ;Disable mux
   0051 D7 01         [ 4]  109                     STB      *VIA_port_a                  ;Send X to A/D
   0053 C6 40         [ 2]  110                     LDB      #0x40                         ;B-reg = T1 interrupt bit
   0055 0F 05         [ 6]  111                     CLR      *VIA_t1_cnt_hi               ;Clear T1H
   0057 97 0A         [ 4]  112                     STA      *VIA_shift_reg               ;Store pattern in shift register
                            113  .globl setPatternLoop
   0059                     114 setPatternLoop:
   0059 D5 0D         [ 4]  115                     BITB     *VIA_int_flags               ;Wait for T1 to time out
   005B 27 FC         [ 3]  116                     beq      setPatternLoop               ; wait till line is finished
   005D 0F 0A         [ 6]  117                     CLR      *VIA_shift_reg               ; switch the light off (for sure)
   005F 20 E0         [ 3]  118                     bra      nextListEntry
                            119 
                            120  .globl drawdone
   0061                     121 drawdone:
   0061 35 86         [ 8]  122                     puls     d, pc                            ; correct stack and go back
                            123 
                            124 ;***************************************************************************
                            125 ; DATA SECTION
                            126 ;***************************************************************************
ASxxxx Assembler V05.00  (Motorola 6809), page 1.
Hexidecimal [16-Bits]

Symbol Table

    .__.$$$.       =   2710 L   |     .__.ABS.       =   0000 G
    .__.CPU.       =   0000 L   |     .__.H$L.       =   0001 L
  2 A$printSyncLis     0041 GR  |   2 A$printSyncLis     0043 GR
  2 A$printSyncLis     0045 GR  |   2 A$printSyncLis     0047 GR
  2 A$printSyncLis     0049 GR  |   2 A$printSyncLis     004B GR
  2 A$printSyncLis     004D GR  |   2 A$printSyncLis     004F GR
  2 A$printSyncLis     0051 GR  |   2 A$printSyncLis     0053 GR
  2 A$printSyncLis     0055 GR  |   2 A$printSyncLis     0057 GR
  2 A$printSyncLis     0059 GR  |   2 A$printSyncLis     005B GR
  2 A$printSyncLis     005D GR  |   2 A$printSyncLis     005F GR
  2 A$printSyncLis     0061 GR  |   2 A$printSyncLis     0000 GR
  2 A$printSyncLis     0000 GR  |   2 A$printSyncLis     0002 GR
  2 A$printSyncLis     0004 GR  |   2 A$printSyncLis     0006 GR
  2 A$printSyncLis     0007 GR  |   2 A$printSyncLis     0009 GR
  2 A$printSyncLis     000B GR  |   2 A$printSyncLis     000D GR
  2 A$printSyncLis     000F GR  |   2 A$printSyncLis     0011 GR
  2 A$printSyncLis     0013 GR  |   2 A$printSyncLis     0015 GR
  2 A$printSyncLis     0016 GR  |   2 A$printSyncLis     0018 GR
  2 A$printSyncLis     001A GR  |   2 A$printSyncLis     001C GR
  2 A$printSyncLis     001E GR  |   2 A$printSyncLis     0020 GR
  2 A$printSyncLis     0022 GR  |   2 A$printSyncLis     0024 GR
  2 A$printSyncLis     0026 GR  |   2 A$printSyncLis     0027 GR
  2 A$printSyncLis     0029 GR  |   2 A$printSyncLis     002A GR
  2 A$printSyncLis     002C GR  |   2 A$printSyncLis     002E GR
  2 A$printSyncLis     0030 GR  |   2 A$printSyncLis     0032 GR
  2 A$printSyncLis     0034 GR  |   2 A$printSyncLis     0036 GR
  2 A$printSyncLis     0038 GR  |   2 A$printSyncLis     003A GR
  2 A$printSyncLis     003C GR  |   2 A$printSyncLis     003E GR
    Intensity_5F   =   F2A5     |   2 LF33D22            0036 GR
    Mov_Draw_VLc_a =   F3AD     |     Moveto_d       =   F312 
    VIA_cntl       =   D00C     |     VIA_int_flags  =   D00D 
    VIA_port_a     =   D001     |     VIA_port_b     =   D000 
    VIA_shift_reg  =   D00A     |     VIA_t1_cnt_hi  =   D005 
    VIA_t1_cnt_lo  =   D004     |     Wait_Recal     =   F192 
    ZERO_DELAY     =   0003     |   2 draw_synced_li     0000 GR
  2 drawdone           0061 GR  |   2 moveTo             003A GR
    music1         =   FD0D     |   2 nextListEntry      0041 GR
  2 setPatternLoop     0059 GR  |   2 sync               0006 GR
  2 zeroLoop           0013 GR

ASxxxx Assembler V05.00  (Motorola 6809), page 2.
Hexidecimal [16-Bits]

Area Table

[_CSEG]
   0 _CODE            size    0   flags C080
   2 .text            size   63   flags  100
[_DSEG]
   1 _DATA            size    0   flags C0C0

